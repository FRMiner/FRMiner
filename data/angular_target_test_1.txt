{"id": "93d5948c", "body": "", "comments": [{"timstamp": "2016-09-21 21:29", "user": "ReScO", "body": "So why do you guys love Angular anyways?"}, {"timstamp": "2016-09-21 21:30", "user": "ReScO", "body": "Where lies it's power, and why Angular?"}, {"timstamp": "2016-09-21 21:30", "user": "SaltyCatFish", "body": "ReScO: Did you ever try making a single page application from scratch?"}, {"timstamp": "2016-09-21 21:30", "user": "ReScO", "body": "SaltyCatFish: nope"}, {"timstamp": "2016-09-21 21:30", "user": "ReScO", "body": "Always been a PHP guy"}, {"timstamp": "2016-09-21 21:31", "user": "SaltyCatFish", "body": "ReScO: Its hard... angular makes it easy. Brings really nice separation of concerns and modularity to the project."}, {"timstamp": "2016-09-21 21:31", "user": "SaltyCatFish", "body": "Just stay away from require.js =)"}, {"timstamp": "2016-09-21 21:32", "user": "SaltyCatFish", "body": "ReScO: Honestly, I'm just finishing up my 1st project in Angular now..."}, {"timstamp": "2016-09-21 21:32", "user": "SaltyCatFish", "body": "ReScO: Once you get everything wired up, which there isnt that much, it make everything much easier"}, {"timstamp": "2016-09-21 21:33", "user": "SaltyCatFish", "body": "zomg: I was trying to find something like that, the same way _controller_ is done, thanks man!"}, {"timstamp": "2016-09-21 21:33", "user": "ReScO", "body": "So it's entirely possible to display a live graph in Angular as long as i implement the right code?"}, {"timstamp": "2016-09-21 21:33", "user": "SaltyCatFish", "body": "ReScO: Of coruse"}, {"timstamp": "2016-09-21 21:33", "user": "SaltyCatFish", "body": "course*"}, {"timstamp": "2016-09-21 21:34", "user": "ReScO", "body": "Streaming graph, rather, but eh"}, {"timstamp": "2016-09-21 21:34", "user": "zomg", "body": "SaltyCatFish: yep :) I really should dig into this more and write about it as it seems a lot of people are asking about this (both here and via email to me personally)"}, {"timstamp": "2016-09-21 21:34", "user": "ReScO", "body": "basically all i want to do is send datapoints over, and other messages to update in the UI"}, {"timstamp": "2016-09-21 21:35", "user": "ReScO", "body": "completely seperately, and they'll arrive at random intervals, it's crucial i get the data as soon as it comes in"}, {"timstamp": "2016-09-21 21:35", "user": "ReScO", "body": "s/get the data/get the data on the screen/"}, {"timstamp": "2016-09-21 21:37", "user": "ReScO", "body": "But is it easy to learn? i'm used to frameworks like Symfony3/PHP, i tried using Python to serve webpages but that was a no-go too"}, {"timstamp": "2016-09-21 21:45", "user": "zomg", "body": "ReScO: if you've never used javascript, or just a little, I would avoid angular until you're more comfortable with JS"}, {"timstamp": "2016-09-21 21:45", "user": "zomg", "body": "if you like the concept of binding data into your html via JS, KnockoutJS is similar but a lot easier to understand library"}, {"timstamp": "2016-09-21 21:45", "user": "ReScO", "body": "zomg: i can find my way around JS pretty well"}, {"timstamp": "2016-09-21 21:46", "user": "zomg", "body": "okay, in that case it should be fairly easy to learn the basics. There's some things like custom directives which may be tricky at first, but they're not something you need to worry about when you're getting started"}, {"timstamp": "2016-09-21 21:47", "user": "ReScO", "body": "i don't really care for \"too much\", anything can be learned"}, {"timstamp": "2016-09-21 21:52", "user": "SaltyCatFish", "body": "ReScO: You said this is for the stock market though right?"}, {"timstamp": "2016-09-21 21:54", "user": "ReScO", "body": "SaltyCatFish: cryptocurrency yeah"}, {"timstamp": "2016-09-21 21:55", "user": "ReScO", "body": "trying to make an \"app\"-like webpanel that shows me all i need to know about my system"}, {"timstamp": "2016-09-21 21:55", "user": "SaltyCatFish", "body": "ReScO: Thats a lot of data changing rapidly."}, {"timstamp": "2016-09-21 21:56", "user": "SaltyCatFish", "body": "ReScO: Thinking out loud(typing), i'm sure you figured that already. =D"}, {"timstamp": "2016-09-21 21:57", "user": "ReScO", "body": "SaltyCatFish: yeah, it's not just one currency pair"}, {"timstamp": "2016-09-21 21:57", "user": "ReScO", "body": "it's -all- the market data"}, {"timstamp": "2016-09-21 21:58", "user": "SaltyCatFish", "body": "ambitious!"}, {"timstamp": "2016-09-21 22:00", "user": "SaltyCatFish", "body": "zomg: Hly sht that worked..."}, {"timstamp": "2016-09-21 22:01", "user": "zomg", "body": "oh cool :)"}, {"timstamp": "2016-09-21 22:02", "user": "SaltyCatFish", "body": "thanks! really needed that link!"}, {"timstamp": "2016-09-21 22:03", "user": "zomg", "body": "Did I tell you to download this yet? :P"}, {"timstamp": "2016-09-21 22:03", "user": "zomg", "body": "I seem to remember telling someone to download that recently"}, {"timstamp": "2016-09-21 22:03", "user": "zomg", "body": ":D"}, {"timstamp": "2016-09-21 22:04", "user": "SaltyCatFish", "body": "nope never heard of sinon.js"}, {"timstamp": "2016-09-21 22:04", "user": "zomg", "body": "ah, you'll want to learn about that then :)"}, {"timstamp": "2016-09-21 22:05", "user": "zomg", "body": "basically the best stubbing/mocking lib out there"}, {"timstamp": "2016-09-21 22:05", "user": "SaltyCatFish", "body": "sweet thanks!"}, {"timstamp": "2016-09-21 22:05", "user": "SaltyCatFish", "body": "dl'ing now"}, {"timstamp": "2016-09-21 22:08", "user": "ReScO", "body": "SaltyCatFish: per chance, what's the best way to pass data to Angular?"}, {"timstamp": "2016-09-21 22:09", "user": "SaltyCatFish", "body": "And def start looking into promises if you havent already"}, {"timstamp": "2016-09-21 22:09", "user": "SaltyCatFish", "body": "ReScO: Check with zomg, he's much more well versed. I'm sending everything via JSON through PHP scripts."}, {"timstamp": "2016-09-21 22:09", "user": "SaltyCatFish", "body": "Angular has a built in $http for ajax requests."}, {"timstamp": "2016-09-21 22:11", "user": "SaltyCatFish", "body": "what doesnt work?"}, {"timstamp": "2016-09-21 22:12", "user": "SaltyCatFish", "body": "you dont have $http on line 18"}, {"timstamp": "2016-09-21 22:13", "user": "SaltyCatFish", "body": "You're using $http in your controller, but you have to declare it alongside '$scope'"}, {"timstamp": "2016-09-21 22:13", "user": "ReScO", "body": "zomg, mind if i PM you?"}], "label": "other"}
{"id": "8addb267", "body": "", "comments": [{"timstamp": "2018-08-13 16:10", "user": "picasso", "body": "i'm looking for strategies for managing an angularjs application that will have many different customized versions of the same core functionality. are there any particular design patterns i should be using, or tools, code style (es6 classes?)?"}, {"timstamp": "2018-08-13 16:11", "user": "picasso", "body": "my goal would be to have a \"base\" app project with its own git repo, and then each customized version has its own git repo which only includes the customizations and overrides"}, {"timstamp": "2018-08-13 16:13", "user": "storkme", "body": "sounds a bit like you might want an angular library project"}, {"timstamp": "2018-08-13 16:15", "user": "picasso", "body": "i should also mention that the first version of the app already exists and is angularjs 1.x"}, {"timstamp": "2018-08-13 16:15", "user": "picasso", "body": "what's an angular library project?"}, {"timstamp": "2018-08-13 16:16", "user": "SuperTyp", "body": "sounds like you just want to use git and develop on different branches"}, {"timstamp": "2018-08-13 16:17", "user": "picasso", "body": "the use case is a SaaS business which provides customizations of our core software for various clients. we built a new tool for one client in angular and now we want to repackage it for others"}, {"timstamp": "2018-08-13 16:18", "user": "picasso", "body": "but much to my chagrin, each client needs their own customizations, both in design and business logic"}, {"timstamp": "2018-08-13 16:18", "user": "storkme", "body": "not much of a SaaS business if you end up having to support a bunch of bespoke codebases"}, {"timstamp": "2018-08-13 16:18", "user": "picasso", "body": "git branches would work if the single codebase approach is the best"}, {"timstamp": "2018-08-13 16:18", "user": "Pyrrhus666", "body": "imho you should have thought of that in the design phase, you cant easily bolt that on later. unless you just manage x forks, like SuperTyp suggests"}, {"timstamp": "2018-08-13 16:19", "user": "picasso", "body": "storkme: we do good business. but yes, it is not ideal from a developer's perspective."}, {"timstamp": "2018-08-13 16:19", "user": "picasso", "body": "Pyrrhus666: that's fair, but we now need to design it to work for more clients. if it means a ground-up rebuild, i just need to understand the best strategy for doing it"}, {"timstamp": "2018-08-13 16:20", "user": "SuperTyp", "body": ".tap is like do(() => { //some code });"}, {"timstamp": "2018-08-13 16:21", "user": "SuperTyp", "body": "and use pipe to pipe functions like .tap .map .finalize etc"}, {"timstamp": "2018-08-13 16:22", "user": "Pyrrhus666", "body": "picasso, if its only about business logic, you could try abstracting that away and make it dynamic. otherwise my first though would be angular v6 components and extensions on those when needed."}, {"timstamp": "2018-08-13 16:22", "user": "Pyrrhus666", "body": "but I know too little of whats needed..."}, {"timstamp": "2018-08-13 16:23", "user": "picasso", "body": "we will handle as much as possible through dynamic configuration, but i believe we'll still need a way to override functionality or add custom functionality for a single client"}, {"timstamp": "2018-08-13 16:24", "user": "picasso", "body": "i haven't looked much at angular v6 since we've been in 1.x world but i will check it out. does it have mechanisms for these sorts of overrides? \"extensions\" ?"}, {"timstamp": "2018-08-13 16:25", "user": "Pyrrhus666", "body": "picasso, in typescript you can just do : class ExtComponent extends Component {} and build on that."}, {"timstamp": "2018-08-13 16:25", "user": "Pyrrhus666", "body": "(in v6, that is)"}, {"timstamp": "2018-08-13 16:26", "user": "Pyrrhus666", "body": "or use interfaces or summat to have different implementations."}, {"timstamp": "2018-08-13 16:27", "user": "picasso", "body": "would it be possible & would you recommend building the \"base\" part of this as an npm package, for more explicit dependency management"}, {"timstamp": "2018-08-13 16:27", "user": "picasso", "body": "that's how we handle the backend part of it w/ php/composer"}, {"timstamp": "2018-08-13 16:28", "user": "storkme", "body": "angular 2+ makes it pretty easy to build everything as a module, so yes"}], "label": "feature"}
{"id": "93d59519", "body": "", "comments": [{"timstamp": "2018-04-17 04:43", "user": "Peppa_Swine", "body": ""}, {"timstamp": "2018-04-17 04:44", "user": "RhinoLance", "body": "feeling sorry for yourself Peppa_Swine?"}, {"timstamp": "2018-04-17 04:45", "user": "Peppa_Swine", "body": "not yet, but getting close."}, {"timstamp": "2018-04-17 04:46", "user": "RhinoLance", "body": ":("}, {"timstamp": "2018-04-17 04:47", "user": "Peppa_Swine", "body": ""}, {"timstamp": "2018-04-17 04:47", "user": "Peppa_Swine", "body": "[ Lana del Ray plays in the background ]"}, {"timstamp": "2018-04-17 04:48", "user": "CssNoOb", "body": "Peppa_Swine hmm"}, {"timstamp": "2018-04-17 04:48", "user": "RhinoLance", "body": "I browsed the top reddit posts this morning for the first time in months. Now Peppa_Swine has got no surprises for me today :/"}, {"timstamp": "2018-04-17 04:48", "user": "Peppa_Swine", "body": "RhinoLance:"}, {"timstamp": "2018-04-17 04:50", "user": "RhinoLance", "body": "Oohh, great chops. Don't know that I've listened to her before!"}, {"timstamp": "2018-04-17 04:50", "user": "RhinoLance", "body": "I like the chilled vibe"}, {"timstamp": "2018-04-17 04:52", "user": "Peppa_Swine", "body": "here's another one in the same vein:"}, {"timstamp": "2018-04-17 04:53", "user": "RhinoLance", "body": "That was just nasty!"}, {"timstamp": "2018-04-17 04:53", "user": "RhinoLance", "body": ";)"}, {"timstamp": "2018-04-17 04:53", "user": "Peppa_Swine", "body": "never gets old tho"}, {"timstamp": "2018-04-17 04:54", "user": "RhinoLance", "body": "heh, I was 11 years old when it came out. It was cool music!"}, {"timstamp": "2018-04-17 04:54", "user": "Peppa_Swine", "body": "still is!"}, {"timstamp": "2018-04-17 04:58", "user": "RhinoLance", "body": "Hmmmm, perhaps so. It's not on any playlist I've created though."}, {"timstamp": "2018-04-17 05:21", "user": "CssNoOb", "body": "Cannot read property 'name' of undefined RhinoLance"}, {"timstamp": "2018-04-17 05:21", "user": "RhinoLance", "body": "you need to get component-two out of the ngFor loop"}, {"timstamp": "2018-04-17 05:22", "user": "RhinoLance", "body": "put it after the table"}, {"timstamp": "2018-04-17 05:23", "user": "RhinoLance", "body": "and it's undefined because \"t\" doesn't exist in component-tw.ts"}, {"timstamp": "2018-04-17 05:25", "user": "CssNoOb", "body": ""}, {"timstamp": "2018-04-17 05:25", "user": "CssNoOb", "body": "ngcontent"}, {"timstamp": "2018-04-17 05:27", "user": "RhinoLance", "body": "When you click the print button, you need to set the active model. If you look at line 30 of component-one.html, you can see that it's passing the activeUser as the @user input field to component-two. You need to set that.."}, {"timstamp": "2018-04-17 05:27", "user": "RhinoLance", "body": "get rid of the showDialog stuff. You don' tneed ti."}, {"timstamp": "2018-04-17 05:29", "user": "RhinoLance", "body": "If I were you, I'd scrap what you've got, and use the example I did up as your base."}, {"timstamp": "2018-04-17 05:29", "user": "CssNoOb", "body": "ok"}, {"timstamp": "2018-04-17 05:32", "user": "CssNoOb", "body": "RhinoLance, do we have dummy api transactions?"}, {"timstamp": "2018-04-17 05:33", "user": "CssNoOb", "body": "like for free?"}, {"timstamp": "2018-04-17 05:34", "user": "RhinoLance", "body": "ok. If you look at thte dummy user data, it's just some JSON. You can create your own dummy transaction data in a json file. I'll show you, just a tick."}, {"timstamp": "2018-04-17 05:35", "user": "CssNoOb", "body": "hmm"}, {"timstamp": "2018-04-17 05:40", "user": "CssNoOb", "body": "like transCACTIONS API"}, {"timstamp": "2018-04-17 05:40", "user": "CssNoOb", "body": "transactions api"}, {"timstamp": "2018-04-17 05:44", "user": "RhinoLance", "body": ""}, {"timstamp": "2018-04-17 05:44", "user": "RhinoLance", "body": "Here you can see how I've created a dummy transaction list data source."}, {"timstamp": "2018-04-17 05:45", "user": "CssNoOb", "body": "..."}, {"timstamp": "2018-04-17 05:45", "user": "RhinoLance", "body": "Instead of getting the data from an API call, we can just define the return data here, and return it via an observable so you subscribe to it just as you would an http call."}, {"timstamp": "2018-04-17 05:46", "user": "RhinoLance", "body": "Now you can put whatever transaction data you want in there. Just be sure to update the trsanspaction class to match any changed fields."}, {"timstamp": "2018-04-17 05:47", "user": "CssNoOb", "body": "slowly..."}, {"timstamp": "2018-04-17 05:47", "user": "RhinoLance", "body": "It is very hard for you to write this stuff if no-one's given you an API specification."}, {"timstamp": "2018-04-17 05:47", "user": "RhinoLance", "body": "ok"}, {"timstamp": "2018-04-17 05:47", "user": "RhinoLance", "body": "All an API does is return data in json format for you."}, {"timstamp": "2018-04-17 05:48", "user": "RhinoLance", "body": "If you don't have an existing server to retrieve data from, we can just create the dummy data locally."}, {"timstamp": "2018-04-17 05:48", "user": "RhinoLance", "body": "and pretend it's coming from a server."}, {"timstamp": "2018-04-17 05:54", "user": "CssNoOb", "body": "RhinoLance, I already set the getdata"}, {"timstamp": "2018-04-17 05:55", "user": "RhinoLance", "body": "good, now you should have the transaction data."}, {"timstamp": "2018-04-17 05:55", "user": "CssNoOb", "body": ""}, {"timstamp": "2018-04-17 05:56", "user": "RhinoLance", "body": "Create a new component though, called TrsansactionList and TransactionDetail. Copy the user ones. Otherwise it will get confisuing."}, {"timstamp": "2018-04-17 05:57", "user": "RhinoLance", "body": "good job, I forgot to add them to the app.module"}, {"timstamp": "2018-04-17 05:58", "user": "CssNoOb", "body": ""}, {"timstamp": "2018-04-17 05:58", "user": "CssNoOb", "body": "so it's like this"}, {"timstamp": "2018-04-17 06:00", "user": "RhinoLance", "body": "That's it. It's just confusing because you're editing the userList component with transaction data."}, {"timstamp": "2018-04-17 06:00", "user": "RhinoLance", "body": "Before you go any further, create a transactionList and transactionDetail component, and try to get that working"}, {"timstamp": "2018-04-17 06:01", "user": "CssNoOb", "body": "ok"}, {"timstamp": "2018-04-17 06:03", "user": "CssNoOb", "body": "new epi podcast from adventures in angular"}], "label": "other"}
{"id": "93d5951b", "body": "", "comments": [{"timstamp": "2018-10-04 10:10", "user": "anddam", "body": "should HTML language syntax be built-in?"}, {"timstamp": "2018-10-04 10:10", "user": "anddam", "body": "I cannot find a plugin for it and I don't have it in options in the Select Language Mode dialog"}, {"timstamp": "2018-10-04 10:11", "user": "Pyrrhus666", "body": "built-in where ?"}, {"timstamp": "2018-10-04 10:11", "user": "anddam", "body": "oh sorry"}, {"timstamp": "2018-10-04 10:11", "user": "anddam", "body": "I thought I was in ##vs-code"}, {"timstamp": "2018-10-04 10:11", "user": "anddam", "body": "mixed up the channels"}, {"timstamp": "2018-10-04 10:12", "user": "Pyrrhus666", "body": "afaik its built-in. detected from the .html extension on a file, at least"}, {"timstamp": "2018-10-04 10:13", "user": "anddam", "body": "Pyrrhus666: but I don't have it in list for supported languages"}, {"timstamp": "2018-10-04 10:14", "user": "Pyrrhus666", "body": "anddam, I didnt even know there was such a list, tbh :)"}, {"timstamp": "2018-10-04 10:14", "user": "anddam", "body": "Pyrrhus666: are you using vscode right now?"}, {"timstamp": "2018-10-04 10:14", "user": "Pyrrhus666", "body": "yes"}, {"timstamp": "2018-10-04 10:15", "user": "anddam", "body": "in the bottom status bar, the rightmost text before the icons is the language mode"}, {"timstamp": "2018-10-04 10:15", "user": "Pyrrhus666", "body": "html is listed for me"}, {"timstamp": "2018-10-04 10:16", "user": "anddam", "body": "or in Show All Commands (ctrl+shift+P by default) run Change Language Mode command"}, {"timstamp": "2018-10-04 10:17", "user": "Pyrrhus666", "body": "both lists show HTML as a type, among a whole range of others. I have no extensions installed for html afaik"}, {"timstamp": "2018-10-04 10:17", "user": "anddam", "body": "do you have an HTML syntax plugin in Extensions side panel?"}, {"timstamp": "2018-10-04 10:17", "user": "anddam", "body": "mmm"}, {"timstamp": "2018-10-04 10:17", "user": "anddam", "body": "I wonder what's wrong with this install"}, {"timstamp": "2018-10-04 10:18", "user": "Pyrrhus666", "body": "anddam, no such plugin."}, {"timstamp": "2018-10-04 10:18", "user": "Pyrrhus666", "body": "only angular, php, svn, tslint, xml tools"}, {"timstamp": "2018-10-04 10:18", "user": "Pyrrhus666", "body": "maybe try a reinstall ?"}, {"timstamp": "2018-10-04 10:19", "user": "anddam", "body": ""}, {"timstamp": "2018-10-04 10:19", "user": "anddam", "body": "it's exactly the django template language extension taking over"}, {"timstamp": "2018-10-04 10:19", "user": "anddam", "body": "thanks for the feedback"}, {"timstamp": "2018-10-04 10:19", "user": "Pyrrhus666", "body": "haha, thats a weird one :)"}, {"timstamp": "2018-10-04 10:28", "user": "Pyrrhus666", "body": "lacking support for xml/xsl keeps me on eclipse for some stuff, otherwise its fine"}, {"timstamp": "2018-10-04 10:38", "user": "ray02", "body": "Pyrrhus666 the job hunting continue, it's nice because are challenge to solve and test my knowledge"}, {"timstamp": "2018-10-04 10:39", "user": "ray02", "body": "i use this for have more experience"}, {"timstamp": "2018-10-04 10:40", "user": "SargoDarya", "body": "ray02: Just come to munich. Signing a contract for a job is way easier than signing an apartment"}, {"timstamp": "2018-10-04 10:44", "user": "ray02", "body": "the problem is that i have the residency in france"}, {"timstamp": "2018-10-04 10:44", "user": "ray02", "body": "and so is not so easy make contract beetween two nation"}, {"timstamp": "2018-10-04 15:34", "user": "Elarcis", "body": "ray02: damn, you got me reading about chess again"}, {"timstamp": "2018-10-04 16:28", "user": "Elarcis", "body": "QUESTION"}, {"timstamp": "2018-10-04 16:56", "user": "ray02", "body": "sorry Elarcis didn't want make fall you in the dark hole againg"}, {"timstamp": "2018-10-04 16:56", "user": "ray02", "body": "*again"}, {"timstamp": "2018-10-04 16:57", "user": "Elarcis", "body": "ray02: it's not like I played much chess in the past anyway"}, {"timstamp": "2018-10-04 16:57", "user": "ray02", "body": "if you want we can try to make a game together"}], "label": "other"}
{"id": "0ec1e276", "body": "", "comments": [{"timstamp": "14:20", "user": "RandomSerb", "body": "one question: using built project out of a dist directory is pretty much as deploying angular with ng serve?"}, {"timstamp": "17:35", "user": "anddam", "body": "RandomSerb: except you would use a proper web server"}], "label": "other"}
{"id": "93d594e1", "body": "", "comments": [{"timstamp": "2016-05-26 15:05", "user": "nimomo", "body": "hi, How can I access the element from the controller on this case - <img class=\"grayShadow\" data-ng-src=\"{{model.sharedImage()}}\" data-ng-show=\"model.sharedImage() != ''\" data-ng-cloak> ?"}, {"timstamp": "2016-05-26 15:05", "user": "nimomo", "body": "I'm interested to change the element value"}, {"timstamp": "2016-05-26 15:05", "user": "nimomo", "body": "what should I do for this?"}, {"timstamp": "2016-05-26 15:06", "user": "Fenikkusu", "body": "nimomo, why not use ngModel?"}, {"timstamp": "2016-05-26 15:06", "user": "nimomo", "body": "Fenikkusu: can I add ng-model=\"mode.example\" to this element?"}, {"timstamp": "2016-05-26 15:06", "user": "nimomo", "body": "*model"}, {"timstamp": "2016-05-26 15:07", "user": "icebox", "body": "Fenikkusu: .all"}, {"timstamp": "2016-05-26 15:07", "user": "Fenikkusu", "body": "ninmomo, in most cases yes."}, {"timstamp": "2016-05-26 15:08", "user": "nimomo", "body": "Fenikkusu: is this possible to do this in addition to data-ng-src ?"}, {"timstamp": "2016-05-26 15:08", "user": "Fenikkusu", "body": "icebox, .all forces you to wait for all promises to finish. I'm looking for a promise chain to wait on the sub promise without having to pass the sub promoise in the resolve."}, {"timstamp": "2016-05-26 15:09", "user": "icebox", "body": "Fenikkusu: basically a sequential workflow?"}, {"timstamp": "2016-05-26 15:09", "user": "Fenikkusu", "body": "nimomo, it really depends on the setup. The best thing to do is just try."}, {"timstamp": "2016-05-26 15:09", "user": "nimomo", "body": "Fenikkusu: okay, I'm trying."}, {"timstamp": "2016-05-26 15:09", "user": "icebox", "body": "Fenikkusu:"}, {"timstamp": "2016-05-26 15:09", "user": "Fenikkusu", "body": "icebox, in a way, yes. An example would be a promise queue."}, {"timstamp": "2016-05-26 15:10", "user": "grug", "body": "yeah async.js will do that for you Fenikkusu"}, {"timstamp": "2016-05-26 15:11", "user": "grug", "body": "check out async.series"}, {"timstamp": "2016-05-26 15:15", "user": "nimomo", "body": "Fenikkusu: I changed to this but $scope.model.shared_image doesn't return nothing - <img class=\"grayShadow\" data-ng-model=\"model.shared_image\" data-ng-src=\"{{model.sharedImage()}}\" data-ng-show=\"model.sharedImage() != ''\" data-ng-cloak> . Any idea?"}, {"timstamp": "2016-05-26 15:17", "user": "Fenikkusu", "body": "nimomo, let me make sure I understand this correct. You wish $scope.model.shared_image to be the result of [$scope.]model.sharedImage(), correct?"}, {"timstamp": "2016-05-26 15:17", "user": "nimomo", "body": "Fenikkusu: yes"}, {"timstamp": "2016-05-26 15:17", "user": "Fenikkusu", "body": "nimomo, let me ask this then. What is [$scope.]model.sharedImage() doing?"}, {"timstamp": "2016-05-26 15:18", "user": "nimomo", "body": "Fenikkusu: returns a value from backend server (through API)"}, {"timstamp": "2016-05-26 15:18", "user": "Fenikkusu", "body": "nimomo, through a promise I presume?"}, {"timstamp": "2016-05-26 15:19", "user": "nimomo", "body": "Fenikkusu: yes, but the value is stored before the function is running.. it's settled on the bootstrapping."}, {"timstamp": "2016-05-26 15:24", "user": "nimomo", "body": "Fenikkusu: ?"}, {"timstamp": "2016-05-26 15:24", "user": "icebox", "body": "nimomo: don't break the reference and don't use primitives... otherwise automagically the two way data binding is gone"}, {"timstamp": "2016-05-26 15:24", "user": "nimomo", "body": "icebox: so what would you suggest to do?"}, {"timstamp": "2016-05-26 15:25", "user": "icebox", "body": "nimomo: if you provide a very minimal plunker reproducing the issue, we may give a look at it with a concrete suggestion..."}, {"timstamp": "2016-05-26 15:26", "user": "nimomo", "body": "icebox: okay I'm doing this now."}, {"timstamp": "2016-05-26 15:26", "user": "nimomo", "body": "icebox: will create dpaste"}, {"timstamp": "2016-05-26 15:26", "user": "icebox", "body": "nimomo: otherwise we may talk here for hours suggesting not to break references, using .extend, or how to pass data between services and controllers without any result"}, {"timstamp": "2016-05-26 15:27", "user": "icebox", "body": "nimomo: well.. with dpaste we should debug that in out minds... a plunker is better"}, {"timstamp": "2016-05-26 15:29", "user": "icebox", "body": "nimomo: a working and minimal plunker reproducing the issue... many times, in the attempt to create the plunker, the user resolves the issue :) because it narrowed the issue in a simplified context"}, {"timstamp": "2016-05-26 15:29", "user": "Fenikkusu", "body": "nimomo, I believe I have a proper idea of what is going. What you should likely be doing is this: Move your API call to a service. Have the service return a promise similar to this -"}, {"timstamp": "2016-05-26 15:29", "user": "Fenikkusu", "body": "after the initial promise resolves. After this, you update sharedImage to call the api via the promise and set your variable on the local scope. Then set your image ng-src to be that variable and call sharedImage on the load instead of via ng-src."}, {"timstamp": "2016-05-26 15:29", "user": "icebox", "body": "nimomo: *because he narrowed"}, {"timstamp": "2016-05-26 15:31", "user": "Fenikkusu", "body": "Opps...line 14 should have an additional line above it that says tThis._data[imageId] = response.data and line 8 should have an additional variable of tThis = this."}], "label": "other"}
{"id": "93d594ff", "body": "", "comments": [{"timstamp": "2018-01-05 09:25", "user": "davidmihov", "body": "hi everyone"}, {"timstamp": "2018-01-05 09:27", "user": "davidmihov", "body": "I have a question. I need to go through the nested object with ngFor. But not sure how to do it right because i need to use it within selected option element. Now i need to go deep inside array of objects, but not sure how. I put ngFor='let item of items' on the optgroup. But in general i need to go deeper. Something like item of items[index] would work, but not sure how to get that :/"}, {"timstamp": "2018-01-05 09:27", "user": "davidmihov", "body": "Where index is the index of the current array"}, {"timstamp": "2018-01-05 11:19", "user": "roach", "body": "davidmihov: write a custom pipe to get what you want from your object and"}, {"timstamp": "2018-01-05 11:19", "user": "roach", "body": "use it in your *ngFor to access the deeply nested or computed value within the object"}], "label": "other"}
{"id": "93d594a1", "body": "", "comments": [{"timstamp": "2016-08-23 20:14", "user": "rohit", "body": "hello"}, {"timstamp": "2016-08-23 20:15", "user": "rohit", "body": "please help me"}, {"timstamp": "2016-08-23 20:15", "user": "rohit", "body": "i want to run anjular js code"}, {"timstamp": "2016-08-23 20:15", "user": "rohit", "body": "please tell me the tool name"}, {"timstamp": "2016-08-23 20:16", "user": "rohit", "body": "hello"}, {"timstamp": "2016-08-23 20:21", "user": "aniasis", "body": "rohit, try this."}, {"timstamp": "2016-08-23 20:21", "user": "aniasis", "body": "rohit."}, {"timstamp": "2016-08-23 20:24", "user": "rohit", "body": "thanks"}, {"timstamp": "2016-08-23 20:27", "user": "rohit", "body": "how to i get the toolbox of anjular js"}, {"timstamp": "2016-08-23 20:30", "user": "myghty", "body": "rohit: angularjs 1 or 2"}, {"timstamp": "2016-08-23 20:30", "user": "myghty", "body": "?"}, {"timstamp": "2016-08-23 20:30", "user": "rohit", "body": "anjular js 1"}, {"timstamp": "2016-08-23 20:30", "user": "myghty", "body": "run it in your browser"}, {"timstamp": "2016-08-23 20:30", "user": "myghty", "body": "as the name states: it is javascript"}, {"timstamp": "2016-08-23 20:31", "user": "myghty", "body": "just open the corresponding html..."}, {"timstamp": "2016-08-23 20:31", "user": "rohit", "body": "yes"}, {"timstamp": "2016-08-23 20:31", "user": "rohit", "body": "i have that broswe"}, {"timstamp": "2016-08-23 20:31", "user": "rohit", "body": "any other tools"}, {"timstamp": "2016-08-23 20:31", "user": "myghty", "body": "no"}, {"timstamp": "2016-08-23 20:31", "user": "myghty", "body": "editor+browser"}, {"timstamp": "2016-08-23 20:31", "user": "myghty", "body": "nothing else"}, {"timstamp": "2016-08-23 20:31", "user": "rohit", "body": "es"}, {"timstamp": "2016-08-23 20:31", "user": "rohit", "body": "yes"}, {"timstamp": "2016-08-23 20:31", "user": "rohit", "body": "But i need editor"}, {"timstamp": "2016-08-23 20:31", "user": "rohit", "body": "for download"}, {"timstamp": "2016-08-23 20:32", "user": "aniasis", "body": "try webstorm"}, {"timstamp": "2016-08-23 20:32", "user": "aniasis", "body": "rohit"}, {"timstamp": "2016-08-23 20:33", "user": "rohit", "body": "ok"}, {"timstamp": "2016-08-23 20:34", "user": "rohit", "body": "ok"}, {"timstamp": "2016-08-23 20:36", "user": "rohit", "body": "this is try version for 30 days"}, {"timstamp": "2016-08-23 20:36", "user": "myghty", "body": "rohit: you are on windows?"}, {"timstamp": "2016-08-23 20:36", "user": "myghty", "body": "use notepad, editor, atom..."}, {"timstamp": "2016-08-23 20:36", "user": "myghty", "body": "mostly every editor which is capable editing textfiles will work"}, {"timstamp": "2016-08-23 20:37", "user": "rohit", "body": "ok"}, {"timstamp": "2016-08-23 20:37", "user": "aniasis", "body": "rohit, use WebStorm it has more features than any random text editor"}, {"timstamp": "2016-08-23 20:37", "user": "myghty", "body": "aniasis: vi!"}, {"timstamp": "2016-08-23 20:38", "user": "myghty", "body": ";)"}, {"timstamp": "2016-08-23 20:38", "user": "rohit", "body": "ok"}, {"timstamp": "2016-08-23 20:38", "user": "rohit", "body": "but this trial version 30 Days"}, {"timstamp": "2016-08-23 20:39", "user": "myghty", "body": "yes, good software costs some euros"}, {"timstamp": "2016-08-23 20:39", "user": "myghty", "body": "so buy it then"}, {"timstamp": "2016-08-23 20:39", "user": "myghty", "body": "otherwise use something with less features"}, {"timstamp": "2016-08-23 20:40", "user": "rohit", "body": "ok"}, {"timstamp": "2016-08-23 21:20", "user": "aniasis", "body": "rohit, Eclipse is free."}, {"timstamp": "2016-08-23 21:21", "user": "aniasis", "body": "Eclipse has some of the basic javascript tools"}], "label": "other"}
{"id": "93d594a2", "body": "", "comments": [{"timstamp": "2016-06-21 21:45", "user": "Chuckles1313", "body": "Here's my issue. I want to create a service that holds reference tables to be used in dropdowns and lookups. I have a REST service that returns all the different [id, value]. Right now, my service just moves and doesn't wait for the data to complete. Ideas?"}, {"timstamp": "2016-06-21 21:46", "user": "juro", "body": "Chuckles1313, where does your service \"move\" to?"}, {"timstamp": "2016-06-21 21:46", "user": "juro", "body": "... the Outback? ... (sorry, couldn't resist)"}, {"timstamp": "2016-06-21 21:47", "user": "Chuckles1313", "body": "Moves on..."}, {"timstamp": "2016-06-21 21:47", "user": "Chuckles1313", "body": "hehe."}, {"timstamp": "2016-06-21 21:47", "user": "juro", "body": "Chuckles1313, any code you can share?"}, {"timstamp": "2016-06-21 21:47", "user": "Chuckles1313", "body": "'use strict'; angular.module('refPayApp.constants.constantsService',[]); angular.module('refPayApp.constants.constantsService').service('constants', ['$http', '$q', constants]); //var AllVals= new Array(); function constants($http,$q){ var self = this; var sports; self.sports=sports; $http.get('services/getAllConstants') .success(function(data){ self.sports = data; }) .error(function(){ console.log('There was an err"}, {"timstamp": "2016-06-21 21:49", "user": "Chuckles1313", "body": "If I do a console.log on the data it's fine."}, {"timstamp": "2016-06-21 21:51", "user": "Chuckles1313", "body": "function RefViewController(RefService, constants, $mdMedia, $mdDialog, $log, $scope, $http, $q, document) {var sports = {}; sports = constants.sports;}"}, {"timstamp": "2016-06-21 21:52", "user": "Chuckles1313", "body": "will produce a result if I put a static value in the service for sports, but not from the $http call."}, {"timstamp": "2016-06-21 21:54", "user": "juro", "body": "Chuckles1313, please use an online editor."}, {"timstamp": "2016-06-21 21:55", "user": "Chuckles1313", "body": "Ij,"}, {"timstamp": "2016-06-21 21:55", "user": "Chuckles1313", "body": "ok"}, {"timstamp": "2016-06-21 22:10", "user": "Chuckles1313", "body": ""}], "label": "other"}
{"id": "93d59513", "body": "", "comments": [{"timstamp": "2016-09-22 00:39", "user": "Artis", "body": ""}, {"timstamp": "2016-09-22 00:39", "user": "grizzm0", "body": "Artis, If you want to be future save go with angular2. If you want jobs in the comming year but still have to learn angular2 in 2-3 years learn angular1. ;)"}, {"timstamp": "2016-09-22 00:41", "user": "Artis", "body": "Ok so back to the tutorial choice... would you say this is really good and all I need so I can then work on my own project?"}, {"timstamp": "2016-09-22 00:41", "user": "Artis", "body": "the previous link seems just explanations"}, {"timstamp": "2016-09-22 00:41", "user": "snurfery", "body": "heh"}, {"timstamp": "2016-09-22 00:42", "user": "snurfery", "body": "Artis:"}, {"timstamp": "2016-09-22 00:42", "user": "snurfery", "body": "kind of overwhelming at first but a nice point of reference"}, {"timstamp": "2016-09-22 00:43", "user": "grizzm0", "body": "snurfery, I feel like you're an angel on his left shoulder and I'm a devil at this right shoulder."}, {"timstamp": "2016-09-22 00:43", "user": "snurfery", "body": "heh"}, {"timstamp": "2016-09-22 00:44", "user": "snurfery", "body": "I'm definitely looking forward to getting deep into ng2"}, {"timstamp": "2016-09-22 00:44", "user": "grizzm0", "body": "Good. :)"}, {"timstamp": "2016-09-22 00:44", "user": "grizzm0", "body": "It's awesome"}, {"timstamp": "2016-09-22 00:45", "user": "snurfery", "body": "yeah it's like a million times better no doubt"}, {"timstamp": "2016-09-22 00:45", "user": "grizzm0", "body": "Coding our new warehouse managemnt system in angualar2"}, {"timstamp": "2016-09-22 00:45", "user": "Artis", "body": "I don't want to dive deep into angular1, just enough to have a basic understanding so I can do things by looking up docs and solutions - then I'd be ready to learn more fast if I need, and can focus on angular2 if I don't"}, {"timstamp": "2016-09-22 00:45", "user": "snurfery", "body": "Artis: sounds legit. go through one or two of the tutorials on that page (there's a table of contents) and you should be comfy enough"}, {"timstamp": "2016-09-22 00:46", "user": "snurfery", "body": "haven't heard great things about the official angular one, but then again it's been a couple years since I looked"}, {"timstamp": "2016-09-22 00:48", "user": "Artis", "body": "ooh might this be just what I'm looking for? (if you guys can tell at a glance what a tutorial would bring to a newb)"}], "label": "other"}
{"id": "93d59495", "body": "", "comments": [{"timstamp": "2017-07-28 22:11", "user": "damian__", "body": "hi"}, {"timstamp": "2017-07-28 22:11", "user": "damian__", "body": "please can anyone answer me this scope question: does a function create a closed scope \"only\" if you pass it a value in form of arg ?"}, {"timstamp": "2017-07-28 22:11", "user": "zomg_", "body": "can you actually cancel an http request when it's done using an observable?"}, {"timstamp": "2017-07-28 22:12", "user": "zomg_", "body": "if I just stop observing that doesn't seem to be a guarantee of it getting canceled"}, {"timstamp": "2017-07-28 22:13", "user": "zomg_", "body": "damian__: that kind of depends on the engine level implementation"}, {"timstamp": "2017-07-28 22:13", "user": "sadme", "body": "in ng2+ if you unsubscribe to an observable for which the source was an Http method, the underlying request is cancelled"}, {"timstamp": "2017-07-28 22:13", "user": "zomg_", "body": "damian__: if the function could access values outside of it, then it seems that it would generate a closure"}, {"timstamp": "2017-07-28 22:14", "user": "zomg_", "body": "sadme: but I assume only if every single subscriber is unsubscribed?"}, {"timstamp": "2017-07-28 22:14", "user": "sadme", "body": "that's right"}, {"timstamp": "2017-07-28 22:14", "user": "zomg_", "body": "yes so technically it doesn't actually offer you a way to cancel the request"}, {"timstamp": "2017-07-28 22:15", "user": "zomg_", "body": "it simply happens to cancel it when it sees that it's not needed to finish it"}, {"timstamp": "2017-07-28 22:15", "user": "sadme", "body": "that's an odd way of looking at it given that the subscription is completely under your control"}, {"timstamp": "2017-07-28 22:16", "user": "damian__", "body": "zomg in a browser: x = 1; function change (x) { x = 2; }; <-- this change the value of x only \"in\" the function"}, {"timstamp": "2017-07-28 22:16", "user": "damian__", "body": "x = 1; function change () { x = 2; }; <-- but this changes the value of x \"out\" the function too"}, {"timstamp": "2017-07-28 22:16", "user": "damian__", "body": "is it correct ?"}, {"timstamp": "2017-07-28 22:18", "user": "zomg_", "body": "sadme: not necessarily if you were to pass the observable out of a function"}, {"timstamp": "2017-07-28 22:19", "user": "sadme", "body": "you've lost me"}, {"timstamp": "2017-07-28 22:19", "user": "damian__", "body": "this is to say: if you doesn't pass \"x\" as an arg, the function doesn't create any own scope ??"}, {"timstamp": "2017-07-28 22:20", "user": "zomg_", "body": "sadme: well similar to how you would return a promise from a function and you don't know what happens to it after that"}, {"timstamp": "2017-07-28 22:20", "user": "zomg_", "body": "(well obviously you do if you wrote the whole app, but your other functions shouldn't necessarily be aware of the fact that this promise was infact generated from an http request)"}, {"timstamp": "2017-07-28 22:20", "user": "sadme", "body": "not so with an observable, because observables can have disposers"}, {"timstamp": "2017-07-28 22:21", "user": "sadme", "body": "(a disposer is just something that cleans up when there are no subscribes to the observable)"}, {"timstamp": "2017-07-28 22:21", "user": "zomg_", "body": "damian__: correct"}, {"timstamp": "2017-07-28 22:22", "user": "zomg_", "body": "damian__: in your second example the function has a closure which refers to the variable outside of it, it doesn't have a variable x in its own scope"}, {"timstamp": "2017-07-28 22:22", "user": "zomg_", "body": "sadme: that makes a bit more sense then, but I'm still not convinced that observables are the right solution to things which return a single value =)"}, {"timstamp": "2017-07-28 22:23", "user": "sadme", "body": "i just think of them as promises but better"}, {"timstamp": "2017-07-28 22:23", "user": "zomg_", "body": "sadme: kinda thinking about how Haskell deals with things like this, where you can easily make certain judgements about functions purely based on their types"}, {"timstamp": "2017-07-28 22:23", "user": "zomg_", "body": "if I have a TChan I know it'll give me values over time but if I have a TVar I know it won't etc."}, {"timstamp": "2017-07-28 22:24", "user": "sadme", "body": "i see what you mean, it might be nice to have an ObservableSingle or some such"}, {"timstamp": "2017-07-28 22:24", "user": "zomg_", "body": "yeah"}, {"timstamp": "2017-07-28 22:25", "user": "zomg_", "body": "Haskell's just very good at this style of high level abstraction so it makes sense to do stuff like this with types in it"}, {"timstamp": "2017-07-28 22:25", "user": "zomg_", "body": "I can see it being a bit more annoying to deal with in JS due to how everything has its own way of doing things"}, {"timstamp": "2017-07-28 22:26", "user": "damian__", "body": "zomg_ one last question then, please: if I'd declare \"var x =2\" (instead of \"x=2) whithin the function, had it the same effect than passing \"x\" as an arg ?? (create a variable x in its own scope)"}, {"timstamp": "2017-07-28 22:26", "user": "zomg_", "body": "damian__: yes"}, {"timstamp": "2017-07-28 22:26", "user": "zomg_", "body": "it's then said that the local variable `x` \"shadows\" the outer variable `x`"}, {"timstamp": "2017-07-28 22:27", "user": "zomg_", "body": "kinda like you can't \"see\" the outer variable because it's in the shadow of the local one :)"}, {"timstamp": "2017-07-28 22:27", "user": "damian__", "body": "zomg_ you've clarified me a lot of things with that, thanks a lot :)"}, {"timstamp": "2017-07-28 22:28", "user": "zomg_", "body": "np"}], "label": "other"}
{"id": "8addb25c", "body": "", "comments": [{"timstamp": "2017-02-24 18:05", "user": "merpnderp", "body": "Is there a way for a service to call a method in a controller when a value is updated?"}, {"timstamp": "2017-02-24 18:05", "user": "merpnderp", "body": "I'm trying ot move all my business logic into services and finding it incredibly complicated."}, {"timstamp": "2017-02-24 18:06", "user": "uru", "body": "merpnderp: angular or angularjs?"}, {"timstamp": "2017-02-24 18:06", "user": "merpnderp", "body": "angar 1.5"}, {"timstamp": "2017-02-24 18:06", "user": "merpnderp", "body": "angular"}, {"timstamp": "2017-02-24 18:06", "user": "merpnderp", "body": "uru"}, {"timstamp": "2017-02-24 18:07", "user": "uru", "body": "merpnderp: So angularjs then? ;) \"Angular\" is v2+ In that case I've no clue. I guess you could pass a callback to the service from the controller that the service can call on update"}, {"timstamp": "2017-02-24 18:07", "user": "merpnderp", "body": "uru: yes either a callback which will have to be cleaned up when it exits or a $watch which will have to be cleaned up when it exits."}, {"timstamp": "2017-02-24 18:08", "user": "merpnderp", "body": "This is a mess."}, {"timstamp": "2017-02-24 18:08", "user": "uru", "body": "merpnderp: Alternatly you could look at using rxjs if you are that worried about the code"}, {"timstamp": "2017-02-24 18:08", "user": "merpnderp", "body": "rxjs?"}, {"timstamp": "2017-02-24 18:08", "user": "uru", "body": "Google it"}, {"timstamp": "2017-02-24 18:09", "user": "merpnderp", "body": "uru: just did. No way in the world this would be allowed by management."}, {"timstamp": "2017-02-24 18:09", "user": "merpnderp", "body": "oh well, back to writing shitty code."}], "label": "feature"}
{"id": "93d594ca", "body": "", "comments": [{"timstamp": "2016-09-22 13:37", "user": "coder_2014", "body": "I'm getting this error in the browser console after updating angular to the latest version 2.0.0 and the angular-cli too -> decorators.js:242Uncaught TypeError: Reflect.getMetadata is not a function - anyone can help me please?"}, {"timstamp": "2016-09-22 13:43", "user": "icebox", "body": "coder_2014: missing reflect dep?"}, {"timstamp": "2016-09-22 13:43", "user": "icebox", "body": "coder_2014: \"reflect-metadata\": \"~0.1.8\""}, {"timstamp": "2016-09-22 13:44", "user": "coder_2014", "body": "icebox: under dependencies or devDependencies?"}, {"timstamp": "2016-09-22 13:44", "user": "icebox", "body": "coder_2014: dep"}, {"timstamp": "2016-09-22 13:44", "user": "icebox", "body": "coder_2014: it would be the same... you need to load it :)"}, {"timstamp": "2016-09-22 13:45", "user": "coder_2014", "body": "icebox: I added it using npm install reflect-metadata --save"}, {"timstamp": "2016-09-22 13:45", "user": "coder_2014", "body": "icebox: do i need to do anything else?"}, {"timstamp": "2016-09-22 13:45", "user": "icebox", "body": "coder_2014: yes... you need to load it"}, {"timstamp": "2016-09-22 13:45", "user": "icebox", "body": "coder_2014: 0.1.8?"}, {"timstamp": "2016-09-22 13:45", "user": "coder_2014", "body": "it automatically added \"reflect-metadata\": \"^0.1.8\", to my package.json"}, {"timstamp": "2016-09-22 13:46", "user": "coder_2014", "body": "icebox: how do I load it?"}, {"timstamp": "2016-09-22 13:49", "user": "Elarcis", "body": "coder_2014: you need to import it somewhere in your files.."}, {"timstamp": "2016-09-22 13:49", "user": "Elarcis", "body": "coder_2014: like showcased in the ng2 tutorial"}, {"timstamp": "2016-09-22 13:50", "user": "Elarcis", "body": "coder_2014:"}, {"timstamp": "2016-09-22 13:51", "user": "icebox", "body": "coder_2014: when you add something to the package.json (dep or devDep), it means only npm downloads those packages when you executed \"npm install\"... then you need to \"use\" them"}, {"timstamp": "2016-09-22 13:51", "user": "coder_2014", "body": "icebox: ok, I've added the .js files to my index.html but they're not found GET"}, {"timstamp": "2016-09-22 13:52", "user": "Elarcis", "body": "coder_2014: is it the same issue you had yesterday?"}, {"timstamp": "2016-09-22 13:52", "user": "Elarcis", "body": "coder_2014: are you using SystemJS?"}, {"timstamp": "2016-09-22 13:52", "user": "coder_2014", "body": "icebox: it sounds like it is ..."}, {"timstamp": "2016-09-22 13:52", "user": "icebox", "body": "sigh!"}, {"timstamp": "2016-09-22 13:52", "user": "Elarcis", "body": "coder_2014: great, you know how to solve it then!"}, {"timstamp": "2016-09-22 13:53", "user": "coder_2014", "body": "icebox: I'm now using webpack as apparently the new version of angular-cli uses webpack"}, {"timstamp": "2016-09-22 13:54", "user": "coder_2014", "body": "Elarcis: sure :) great for your answer! :)"}, {"timstamp": "2016-09-22 13:54", "user": "icebox", "body": "coder_2014: I see... but I don't use that setup"}, {"timstamp": "2016-09-22 13:54", "user": "Elarcis", "body": "coder_2014: then you don't need to import it in a script tag, but just with import 'reflect-metadata' in your vendor.ts file"}, {"timstamp": "2016-09-22 13:55", "user": "Elarcis", "body": "coder_2014: same for core-js, etc., every npm package can be simply imported like that"}, {"timstamp": "2016-09-22 13:55", "user": "Elarcis", "body": "coder_2014: thought you were using systemJS"}, {"timstamp": "2016-09-22 13:55", "user": "coder_2014", "body": "Elarcis: thanks, I don't have vendor.ts, could be called polyfills.js ?"}, {"timstamp": "2016-09-22 13:55", "user": "coder_2014", "body": "instead?"}, {"timstamp": "2016-09-22 13:56", "user": "coder_2014", "body": "Elarcis: as I said before, I was - I've upgraded the angular-cli"}, {"timstamp": "2016-09-22 13:56", "user": "Elarcis", "body": "coder_2014: yes, sorry"}, {"timstamp": "2016-09-22 13:56", "user": "Elarcis", "body": "coder_2014: I always mistake one for another"}, {"timstamp": "2016-09-22 13:56", "user": "coder_2014", "body": "import 'core-js/es6/symbol';"}, {"timstamp": "2016-09-22 13:56", "user": "coder_2014", "body": "import 'core-js/es6/object';"}, {"timstamp": "2016-09-22 13:56", "user": "coder_2014", "body": "import 'core-js/es6/function';"}, {"timstamp": "2016-09-22 13:56", "user": "coder_2014", "body": "import 'core-js/es6/parse-int';"}, {"timstamp": "2016-09-22 13:56", "user": "coder_2014", "body": "import 'core-js/es6/parse-float';"}, {"timstamp": "2016-09-22 13:56", "user": "coder_2014", "body": "import 'core-js/es6/number';"}, {"timstamp": "2016-09-22 13:56", "user": "coder_2014", "body": "import 'core-js/es6/math';"}, {"timstamp": "2016-09-22 13:56", "user": "coder_2014", "body": "import 'core-js/es6/string';"}, {"timstamp": "2016-09-22 13:56", "user": "coder_2014", "body": "import 'core-js/es6/date';"}, {"timstamp": "2016-09-22 13:56", "user": "Elarcis", "body": "coder_2014:"}, {"timstamp": "2016-09-22 13:56", "user": "icebox", "body": "argh!"}, {"timstamp": "2016-09-22 13:56", "user": "coder_2014", "body": "import 'core-js/es6/array';"}, {"timstamp": "2016-09-22 13:56", "user": "Pyrrhus666", "body": "yes, please stop...."}, {"timstamp": "2016-09-22 13:56", "user": "coder_2014", "body": "import 'core-js/es6/regexp';"}, {"timstamp": "2016-09-22 13:56", "user": "coder_2014", "body": "import 'core-js/es6/map';"}, {"timstamp": "2016-09-22 13:56", "user": "coder_2014", "body": "import 'core-js/es6/set';"}, {"timstamp": "2016-09-22 13:56", "user": "Pyrrhus666", "body": "STAHP !"}, {"timstamp": "2016-09-22 13:56", "user": "coder_2014", "body": "import 'core-js/es6/reflect';"}, {"timstamp": "2016-09-22 13:56", "user": "coder_2014", "body": "import 'core-js/es7/reflect';"}, {"timstamp": "2016-09-22 13:56", "user": "coder_2014", "body": "import 'zone.js/dist/zone';"}, {"timstamp": "2016-09-22 13:56", "user": "coder_2014", "body": "sorry for the bunch of text guys :)"}, {"timstamp": "2016-09-22 13:57", "user": "icebox", "body": "violating first rule! :) call swat team"}, {"timstamp": "2016-09-22 13:57", "user": "Pyrrhus666", "body": "use a goddamn fiddle..."}, {"timstamp": "2016-09-22 13:57", "user": "Elarcis", "body": "coder_2014: Never. NEVER paste code in the chat like that"}, {"timstamp": "2016-09-22 13:57", "user": "coder_2014", "body": "sorry, it was a mistake"}, {"timstamp": "2016-09-22 13:57", "user": "coder_2014", "body": "it won't happen again guys"}, {"timstamp": "2016-09-22 13:58", "user": "Pyrrhus666", "body": "as penance you must remove the ctrl, c and v keys from your keyboard"}, {"timstamp": "2016-09-22 13:58", "user": "coder_2014", "body": "it looks like I already have them imported in the polyfills.ts"}, {"timstamp": "2016-09-22 13:58", "user": "coder_2014", "body": "might be that this file is not getting loaded?"}, {"timstamp": "2016-09-22 13:58", "user": "Clovenhoof", "body": "@Pyrrhus666 =D"}, {"timstamp": "2016-09-22 13:59", "user": "icebox", "body": "coder_2014: why do you use that setup? what is your aim?"}, {"timstamp": "2016-09-22 13:59", "user": "icebox", "body": "coder_2014: learning? developing an app?"}, {"timstamp": "2016-09-22 13:59", "user": "coder_2014", "body": "developing an app icebox"}, {"timstamp": "2016-09-22 13:59", "user": "icebox", "body": "coder_2014: ok... so why don't you follow the old scholl at the beginning?"}, {"timstamp": "2016-09-22 14:00", "user": "icebox", "body": "coder_2014: loading js files via script tags"}, {"timstamp": "2016-09-22 14:00", "user": "coder_2014", "body": "icebox: I though using anuglar-cli to create the fresh project was a good idea...."}, {"timstamp": "2016-09-22 14:00", "user": "icebox", "body": "coder_2014: focusing more on the app and less on machinery behind the tools"}, {"timstamp": "2016-09-22 14:01", "user": "icebox", "body": "coder_2014: cli is beta... and you should know what you are doing to use it"}, {"timstamp": "2016-09-22 14:01", "user": "Elarcis", "body": "coder_2014: angular-cli is still in alpha"}, {"timstamp": "2016-09-22 14:01", "user": "icebox", "body": "Elarcis: 1.0.0-beta.15"}, {"timstamp": "2016-09-22 14:02", "user": "Elarcis", "body": "icebox: wow, they've made progress"}, {"timstamp": "2016-09-22 14:02", "user": "Elarcis", "body": "THEY'VE GONE PLAID"}, {"timstamp": "2016-09-22 14:02", "user": "icebox", "body": "Elarcis: :P"}, {"timstamp": "2016-09-22 14:02", "user": "icebox", "body": "Elarcis: sure with 932 packages and 300+MB"}, {"timstamp": "2016-09-22 14:03", "user": "Pyrrhus666", "body": "let us not forget that rc==alpha, so beta==pre-alpha"}, {"timstamp": "2016-09-22 14:03", "user": "icebox", "body": "Pyrrhus666: agreed :)"}, {"timstamp": "2016-09-22 14:03", "user": "Pyrrhus666", "body": "and ember-cli ffs"}, {"timstamp": "2016-09-22 14:14", "user": "icebox", "body": "see coder_2014 what you did... a simple question in the channel and you broke it :)"}, {"timstamp": "2016-09-22 14:18", "user": "icebox", "body": "well... genetic editing can resolve it"}], "label": "other"}
{"id": "93d5951f", "body": "", "comments": [{"timstamp": "2017-05-23 19:00", "user": "htd", "body": "right now I have the header of my aircon component visible, so a quick hack would be removing the h1 tags ;)"}, {"timstamp": "2017-05-23 19:00", "user": "htd", "body": "I am writing a little gui to remote control my and my dads house. his house has airconditions (extra component in angular code) and mine doesn't. the backend is the same in both buildings"}, {"timstamp": "2017-05-23 19:00", "user": "htd", "body": "what is the angular way to only show the aircondition component when run in my dads house (backend sends a list of aircons, list in my house is empty)"}, {"timstamp": "2017-05-23 19:03", "user": "htd", "body": "should I wrap the whole template for the component in a big (pseudocode) ng-if=\"aircon.length()\" tag?"}], "label": "other"}
{"id": "0ec1e366", "body": "", "comments": [{"timstamp": "13:26", "user": "Paradisee", "body": "is there anything in angular that allows you to load more and more items more you go down on the page?"}, {"timstamp": "13:27", "user": "Paradisee", "body": "i have tons of items to load, and i'd like to return just a portion of them"}, {"timstamp": "13:27", "user": "Paradisee", "body": "so that if the user goes down on the page, i give him more items to load"}, {"timstamp": "13:27", "user": "Paradisee", "body": "sort of pagination"}, {"timstamp": "13:28", "user": "Paradisee", "body": "i prefer to check the number of elements"}], "label": "feature"}
{"id": "73af7cec", "body": "", "comments": [{"timstamp": "10:38", "user": "jlebrech", "body": "another day another meeting another pivot"}], "label": "other"}
{"id": "93d59552", "body": "", "comments": [{"timstamp": "2016-10-28 14:20", "user": "arlekin", "body": "can i somehow manage to make transclusion without this pesky ng-transclude tag ?"}, {"timstamp": "2016-10-28 14:20", "user": "arlekin", "body": "it fucks up my responsive design"}, {"timstamp": "2016-10-28 14:20", "user": "arlekin", "body": "*dont remember when was the last time i had actual angular question, wow!*"}, {"timstamp": "2016-10-28 14:22", "user": "arlekin", "body": "maybe if i used it as an attribute..."}, {"timstamp": "2016-10-28 14:24", "user": "Elarcis", "body": "^"}, {"timstamp": "2016-10-28 14:24", "user": "Elarcis", "body": "though JWT are only a way to convey the authentication iirc"}, {"timstamp": "2016-10-28 14:25", "user": "Pyrrhus666", "body": "Elarcis: they can have payload too. and they can self-expire and all that."}, {"timstamp": "2016-10-28 14:25", "user": "Elarcis", "body": "Pyrrhus666: yeah right"}, {"timstamp": "2016-10-28 14:25", "user": "Elarcis", "body": "Pyrrhus666: but the payload is just a token the server can use to see if the user is authenticated right?"}, {"timstamp": "2016-10-28 14:26", "user": "Elarcis", "body": "Pyrrhus666: well *can contain"}, {"timstamp": "2016-10-28 14:26", "user": "Elarcis", "body": "Pyrrhus666: I know you can put anything in it"}, {"timstamp": "2016-10-28 14:28", "user": "wafflejock", "body": "arlekin, you don't have to use ng-transclude you can manage it yourself"}, {"timstamp": "2016-10-28 14:29", "user": "wafflejock", "body": "arlekin, when you have something transcluded you can have a transclude function as a param to your link function and can use it to create/insert the transcluded stuff"}, {"timstamp": "2016-10-28 14:29", "user": "arlekin", "body": "wafflejock: prolly, anyways i did use it as attribute and it solved my issue"}, {"timstamp": "2016-10-28 14:29", "user": "arlekin", "body": "wafflejock: that was response to your first line"}, {"timstamp": "2016-10-28 14:30", "user": "arlekin", "body": "to second i need to tell you i was talking about the transclusion directive and NOT about transcluding in custom directive"}, {"timstamp": "2016-10-28 14:30", "user": "wafflejock", "body": "arlekin, hmm never used transclusion outside of custom directives didn't realize there was really a use case for it on it's own"}, {"timstamp": "2016-10-28 14:30", "user": "Pyrrhus666", "body": "Elarcis: it contains claims that should be trustworthy because they're signed and verifyable. apart from that, it could be anything yes :)"}, {"timstamp": "2016-10-28 14:31", "user": "Elarcis", "body": "Pyrrhus666: so basically only the server can generate a JWT, but everybody can read it and verify the JWT has been emitted by the server?"}, {"timstamp": "2016-10-28 14:31", "user": "wafflejock", "body": "arlekin, details on doing it in your own component are in here in case you need it"}, {"timstamp": "2016-10-28 14:31", "user": "wafflejock", "body": "er you're own directive.. have to be more specific I guess since there are also components"}, {"timstamp": "2016-10-28 14:32", "user": "Elarcis", "body": "god I can't work"}, {"timstamp": "2016-10-28 14:32", "user": "arlekin", "body": "wafflejock: i have a hang on things with components and directives, though thanks for concern :D"}, {"timstamp": "2016-10-28 14:32", "user": "Pyrrhus666", "body": "Elarcis: in some circumstances, yes (public/private keys). the way I use it (secret on the server) only my server can decode them and verify the claims."}, {"timstamp": "2016-10-28 14:33", "user": "Elarcis", "body": "Pyrrhus666: so you cipher it server-side?"}, {"timstamp": "2016-10-28 14:33", "user": "Pyrrhus666", "body": "Elarcis: the token as a whole could be hijacked though. so it's expiration is pretty short."}, {"timstamp": "2016-10-28 14:34", "user": "Pyrrhus666", "body": "Elarcis: yes. but you could also use private keys to sign them, so everybody having the public key could verify them."}, {"timstamp": "2016-10-28 14:34", "user": "Elarcis", "body": "Pyrrhus666: I guess so"}, {"timstamp": "2016-10-28 14:35", "user": "Elarcis", "body": "Pyrrhus666: except if a hacker replaces the client's public key with their own and generates a fake JWT with the corresponding private key"}, {"timstamp": "2016-10-28 14:35", "user": "Elarcis", "body": "HA!"}, {"timstamp": "2016-10-28 14:35", "user": "Elarcis", "body": "except it would be useless"}, {"timstamp": "2016-10-28 14:35", "user": "Elarcis", "body": "but HA!"}, {"timstamp": "2016-10-28 14:36", "user": "Pyrrhus666", "body": "Elarcis: that's the same with ssl. if your keys are hijacked, you're fucked."}, {"timstamp": "2016-10-28 14:36", "user": "Pyrrhus666", "body": "which is why CA's exist and key-revocation is a thing..."}, {"timstamp": "2016-10-28 14:37", "user": "arlekin", "body": "i'll tell y'all - some day we need to do something about the whole security thing, because current status quo is unsustainable"}, {"timstamp": "2016-10-28 14:37", "user": "Pyrrhus666", "body": "arlekin: is it ? how so ?"}, {"timstamp": "2016-10-28 14:37", "user": "arlekin", "body": "Pyrrhus666: there is planty of things where you need to make an account, right ?"}, {"timstamp": "2016-10-28 14:38", "user": "arlekin", "body": "and its a big no-no to use the same password everywhere, right ?"}, {"timstamp": "2016-10-28 14:38", "user": "arlekin", "body": "and being hostage to some google or other facebook with access to all the other things isn't such a great situation either"}, {"timstamp": "2016-10-28 14:38", "user": "arlekin", "body": "same goes with password managers"}, {"timstamp": "2016-10-28 14:39", "user": "arlekin", "body": "the \"password notebooks\" (like the old, paper ones) are insecure by design and nature pretty much"}, {"timstamp": "2016-10-28 14:39", "user": "arlekin", "body": "so the only solution is to remember everincreasing amount of passwords"}, {"timstamp": "2016-10-28 14:39", "user": "Pyrrhus666", "body": "arlekin: in a sense, it's always the human that's the weakest link ;)"}, {"timstamp": "2016-10-28 14:39", "user": "arlekin", "body": "and not only remember the password itself, but also to which service it relates"}, {"timstamp": "2016-10-28 14:40", "user": "wafflejock", "body": "arlekin, use a password manager"}, {"timstamp": "2016-10-28 14:40", "user": "wafflejock", "body": "arlekin, I use keepass"}, {"timstamp": "2016-10-28 14:40", "user": "arlekin", "body": "therefore we either need to be really good at that, which for some people is plainly impossible, or something needs to change"}, {"timstamp": "2016-10-28 14:40", "user": "arlekin", "body": "wafflejock: and it certainly simplifies things, but you know - single point of failure yada yada"}, {"timstamp": "2016-10-28 14:41", "user": "wafflejock", "body": "arlekin, yeah only downside I see really with keepass is having to manually sync or trusting some syncing solution or rolling your own... basically not convenient"}, {"timstamp": "2016-10-28 14:41", "user": "arlekin", "body": "wafflejock: there you go"}, {"timstamp": "2016-10-28 14:41", "user": "wafflejock", "body": "but someone would have to steal my db file steal my key and know my password"}, {"timstamp": "2016-10-28 14:42", "user": "wafflejock", "body": "lastpass or onepassword or the like seem decent too"}, {"timstamp": "2016-10-28 14:42", "user": "Pyrrhus666", "body": "2FA for your db"}, {"timstamp": "2016-10-28 14:42", "user": "wafflejock", "body": "so long as it does the encrypt/decrypt locally I feel mostly okay about it"}, {"timstamp": "2016-10-28 14:42", "user": "Elarcis", "body": "arlekin: use a mnemotechnic you keep to yourself to find any password with any service ;)"}, {"timstamp": "2016-10-28 14:43", "user": "arlekin", "body": "well of course it always question of \"how paranoid you are today\""}, {"timstamp": "2016-10-28 14:43", "user": "Elarcis", "body": "arlekin: even if I don't have an account for a service, I know exactly which will be my email address and my password"}, {"timstamp": "2016-10-28 14:43", "user": "arlekin", "body": "because for the most part prolly you couls use one password for everything and be fine with it"}, {"timstamp": "2016-10-28 14:43", "user": "Elarcis", "body": "arlekin: and only someone in my head will be able to find it"}, {"timstamp": "2016-10-28 14:43", "user": "arlekin", "body": "but you know... if someone would like to approach things really \"right way\" there is none i guess"}, {"timstamp": "2016-10-28 14:43", "user": "Elarcis", "body": "arlekin: (without hacking it, I mean)"}, {"timstamp": "2016-10-28 14:44", "user": "Pyrrhus666", "body": "Elarcis: and when your algorithm is hacked or forced from you, you're totally fucked. like with any other means :)"}, {"timstamp": "2016-10-28 14:44", "user": "wafflejock", "body": "arlekin, eh I wouldn't do that places lose them all the time, LinkedIn OPM hack Sony hack and on and on"}, {"timstamp": "2016-10-28 14:44", "user": "Elarcis", "body": "Pyrrhus666: hacked, there would be very fat chances, forced from you, probably"}, {"timstamp": "2016-10-28 14:44", "user": "wafflejock", "body": "arlekin, I have credit monitoring forever at this point with all the letters they send me about systems that have been compromised :)"}, {"timstamp": "2016-10-28 14:45", "user": "arlekin", "body": "wafflejock: credit what ??"}, {"timstamp": "2016-10-28 14:46", "user": "wafflejock", "body": "arlekin, every time one of these places gets hacked they say you can sign up for free credit monitoring for a year or whatever where a company will let you know if someone is stealing your identity or opening accounts in your name"}, {"timstamp": "2016-10-28 14:46", "user": "wafflejock", "body": "arlekin, happened to me with the OPM and I think Adobe before that"}, {"timstamp": "2016-10-28 14:46", "user": "arlekin", "body": "wafflejock: lol"}, {"timstamp": "2016-10-28 14:46", "user": "wafflejock", "body": "yah super reassuring :)"}, {"timstamp": "2016-10-28 14:48", "user": "wafflejock", "body": "arlekin, I'm mostly paranoid about bank accounts or any finance stuff always use keepass for those things"}, {"timstamp": "2016-10-28 14:48", "user": "Elarcis", "body": "Pyrrhus666: I wonder if you manage to have a random book, being able to define your password where each letter is picked from a specific page, specific line number and specific index"}, {"timstamp": "2016-10-28 14:49", "user": "Pyrrhus666", "body": "Elarcis: that's just a single level of obfuscation. would that really get you any extra security ?"}, {"timstamp": "2016-10-28 14:49", "user": "Elarcis", "body": "Pyrrhus666: I mean for finding out my algorithm"}, {"timstamp": "2016-10-28 14:50", "user": "Elarcis", "body": "Pyrrhus666: nothing is secure, we're all beings made of energy and the universe is finite"}, {"timstamp": "2016-10-28 14:50", "user": "Elarcis", "body": "what's the point of security"}, {"timstamp": "2016-10-28 14:50", "user": "Pyrrhus666", "body": "ah ok. that could work :)"}, {"timstamp": "2016-10-28 14:51", "user": "Pyrrhus666", "body": "dunno, I don't really care apart from my bank and paypal I use the same pws everywhere."}, {"timstamp": "2016-10-28 14:51", "user": "Pyrrhus666", "body": "most accounts have no or a fake identity. I don't do social media."}, {"timstamp": "2016-10-28 14:51", "user": "Pyrrhus666", "body": "I vpn everywhere. my mobile is anonymous."}, {"timstamp": "2016-10-28 14:52", "user": "arlekin", "body": "Pyrrhus666: there aint no thing as fake account on fb"}, {"timstamp": "2016-10-28 14:52", "user": "Pyrrhus666", "body": "arlekin: sure. I have two."}, {"timstamp": "2016-10-28 14:52", "user": "Pyrrhus666", "body": "both in names of dead celebrities"}, {"timstamp": "2016-10-28 14:52", "user": "arlekin", "body": "Pyrrhus666: well you gotta know that your personal details like birthdate and name are the least interesing information about you"}, {"timstamp": "2016-10-28 14:53", "user": "Pyrrhus666", "body": "fb : \"are you sure you are 104 years old ?\" me : \"sure\""}, {"timstamp": "2016-10-28 14:53", "user": "Preuk", "body": "arlekin: the point of a fake account is to be short-lived"}, {"timstamp": "2016-10-28 14:54", "user": "Pyrrhus666", "body": "those accounts have no identifiable data whatsoever."}, {"timstamp": "2016-10-28 14:54", "user": "arlekin", "body": "Preuk: didn't no that"}, {"timstamp": "2016-10-28 14:54", "user": "Pyrrhus666", "body": "and also that, yes."}, {"timstamp": "2016-10-28 14:55", "user": "Elarcis", "body": "I want to be in week-end"}, {"timstamp": "2016-10-28 14:55", "user": "Elarcis", "body": "4 days, geez"}, {"timstamp": "2016-10-28 14:55", "user": "Pyrrhus666", "body": "I'm already there, I feel."}, {"timstamp": "2016-10-28 14:55", "user": "arlekin", "body": "Elarcis: w00t ?"}, {"timstamp": "2016-10-28 14:55", "user": "arlekin", "body": "its friday brah"}, {"timstamp": "2016-10-28 14:55", "user": "Elarcis", "body": "arlekin: no, we're tuesday"}, {"timstamp": "2016-10-28 14:56", "user": "arlekin", "body": "does France have some other weekday system than the rest of the wordl ?"}, {"timstamp": "2016-10-28 14:56", "user": "Pyrrhus666", "body": ""}, {"timstamp": "2016-10-28 14:56", "user": "Preuk", "body": "nov 1st is a holiday in some parts"}, {"timstamp": "2016-10-28 14:56", "user": "Elarcis", "body": "anyway, my week-end is 4 days long"}, {"timstamp": "2016-10-28 14:56", "user": "Elarcis", "body": "not my week"}, {"timstamp": "2016-10-28 14:57", "user": "arlekin", "body": "Elarcis: that explains why you are such a prick"}], "label": "other"}
{"id": "73af7d03", "body": "", "comments": [{"timstamp": "10:54", "user": "storkme", "body": "i've never heard of turbo, which isn't a great sign since it's from 2017"}, {"timstamp": "11:15", "user": "Eugene_", "body": "never heard of turbo as well"}, {"timstamp": "11:15", "user": "Eugene_", "body": "I'd say we all need to wait for github to become full fledged package manager and feel a breath of fresh air coming towards us :)"}], "label": "feature"}
{"id": "93d594ef", "body": "", "comments": [{"timstamp": "2016-07-12 10:07", "user": "Pyrrhus", "body": "still trying to follow toddmotos guide. I see in his guide he uses one-way binding and evvents to do communication (in this case an addTodo example). but where does the event actually originate from (where and how is it fired ?). any insights ?"}, {"timstamp": "2016-07-12 10:12", "user": "icebox", "body": "Pyrrhus:"}, {"timstamp": "2016-07-12 10:13", "user": "icebox", "body": "Pyrrhus: .value('EventEmitter', payload => ({ $event: payload});"}, {"timstamp": "2016-07-12 10:14", "user": "icebox", "body": "Pyrrhus: here it is explained better"}, {"timstamp": "2016-07-12 10:14", "user": "Pyrrhus", "body": "hmm... I mustve glanced over that like a 100 times... but I have no eventemitter (or I dont know where to get it)"}, {"timstamp": "2016-07-12 10:14", "user": "Pyrrhus", "body": "he suggests you can do without though."}, {"timstamp": "2016-07-12 10:15", "user": "icebox", "body": "Pyrrhus: yep"}, {"timstamp": "2016-07-12 10:15", "user": "icebox", "body": "Pyrrhus: with EventEmitter... TodoFormController.$inject = ['EventEmitter'];"}, {"timstamp": "2016-07-12 10:16", "user": "icebox", "body": "Pyrrhus: without one... see // without EventEmitter wrapper"}, {"timstamp": "2016-07-12 10:17", "user": "icebox", "body": "Pyrrhus:"}, {"timstamp": "2016-07-12 10:18", "user": "Pyrrhus", "body": "Im 100% sure I tried to inject the EventEmitter and got an error... but now it seems to work..."}, {"timstamp": "2016-07-12 10:19", "user": "Pyrrhus", "body": "oh well :) now to try and get this to work between a component that communicates via a service..."}, {"timstamp": "2016-07-12 10:19", "user": "Pyrrhus", "body": "thanks for the pointers icebox :)"}, {"timstamp": "2016-07-12 10:20", "user": "icebox", "body": "Pyrrhus: you are welcome :P... it would be nice if you provide a public repo when you finished it :)"}, {"timstamp": "2016-07-12 10:20", "user": "Pyrrhus", "body": "(ng 1.5 eith es6 feels so alien when coming from my old ng 1.2 code it sometimes drives me insane :))"}, {"timstamp": "2016-07-12 10:21", "user": "Pyrrhus", "body": "icebox: sure. Im gunning for some kind of fully functional plunk first, makes communicating with you guys easier ;)"}, {"timstamp": "2016-07-12 10:31", "user": "Elarcis", "body": "Pyrrhus: haha, when I look at angular 1.x ES6 code, it looks like a weird code-behind syntax in C# :D"}, {"timstamp": "2016-07-12 10:32", "user": "Elarcis", "body": "('reminds me' would be a better term)"}, {"timstamp": "2016-07-12 10:32", "user": "Pyrrhus", "body": "Elarcis: why not .pop() ?"}, {"timstamp": "2016-07-12 10:32", "user": "Pyrrhus", "body": "Elarcis: hehe, I can imagine :)"}, {"timstamp": "2016-07-12 10:33", "user": "Elarcis", "body": "Pyrrhus: so trying to remove an item that didn't exist just removed the last element of the list, and it took me half an hour to find out"}, {"timstamp": "2016-07-12 10:33", "user": "Pyrrhus", "body": "Elarcis: haha, so actually splice(-1,1) is fine, its your code.. :P"}, {"timstamp": "2016-07-12 10:33", "user": "icebox", "body": "Elarcis: ah nice catch :)"}, {"timstamp": "2016-07-12 10:33", "user": "Elarcis", "body": "Pyrrhus: wusun't muh code dfkhgdkfds"}, {"timstamp": "2016-07-12 10:33", "user": "Elarcis", "body": "Pyrrhus: well the code did a splice(myArray.indexOf(...), 1), but without checking that the desired index wasn't -1"}, {"timstamp": "2016-07-12 10:34", "user": "icebox", "body": "Elarcis: that is a good example concise syntax sometimes doesn't pay :)"}, {"timstamp": "2016-07-12 10:34", "user": "Pyrrhus", "body": "Elarcis: you fiddled with it, so imho its yours ;)"}, {"timstamp": "2016-07-12 10:34", "user": "Elarcis", "body": "Pyrrhus: but I'll take the blame, since it's the only thing I didn't change XDD"}, {"timstamp": "2016-07-12 10:35", "user": "Elarcis", "body": "icebox: default value for splice's second parameter is 1?"}, {"timstamp": "2016-07-12 10:37", "user": "icebox", "body": "Elarcis: when I was used to contribute to Yahoo User Interface (YUI) lib, I was wondering the massive use of temp vars... at the beginning I thought it was only a matter of style... then I understood the real advantage: debugging and readability"}, {"timstamp": "2016-07-12 10:37", "user": "Elarcis", "body": "icebox: oh no, it actually takes the necessary value to remove everything until the end,; noted"}, {"timstamp": "2016-07-12 10:37", "user": "Elarcis", "body": "icebox: yeah. now I declare any temp variable I'd possibly need at the beginning of the function, so at any time I know what I'm dealing with :D"}, {"timstamp": "2016-07-12 10:40", "user": "Elarcis", "body": "icebox: my biggest issue with code yet is consistency"}, {"timstamp": "2016-07-12 10:40", "user": "icebox", "body": "Elarcis: agreed... not easy to achieve it"}, {"timstamp": "2016-07-12 10:41", "user": "Elarcis", "body": "my remote colleague is currently applying huge pressure for me writting unit tests on my new features... I'm ashamed to say that I just don't have the time right now, although I have to do it"}, {"timstamp": "2016-07-12 10:41", "user": "icebox", "body": "Elarcis: only recently there are good tools to check it (eslint) and only recently a few good practices became quite common thru the devs"}, {"timstamp": "2016-07-12 10:42", "user": "icebox", "body": "Elarcis: about TDD and unit tests : )"}, {"timstamp": "2016-07-12 10:42", "user": "Elarcis", "body": "icebox: eslint's not perfect though, even with specific angularjs rules, I get lost in namings, IIFE or not (no longer necessary since we're using webpack), etc."}, {"timstamp": "2016-07-12 10:43", "user": "Elarcis", "body": "icebox: I know"}, {"timstamp": "2016-07-12 10:43", "user": "Elarcis", "body": "icebox: it just annoys me, because (and although it's true) he doesn't consider any work done if there aren't unit tests behind it"}, {"timstamp": "2016-07-12 10:43", "user": "icebox", "body": "Elarcis: I see"}, {"timstamp": "2016-07-12 10:44", "user": "icebox", "body": "Elarcis: in a team we need to be pragmatic and to achieve a tradeoff"}, {"timstamp": "2016-07-12 10:44", "user": "Elarcis", "body": "icebox: I just have a tight schedule, and I'd have to implement a new testing structure and test code that is yet to be proven testable, until tomorrow"}, {"timstamp": "2016-07-12 10:45", "user": "icebox", "body": "Elarcis: There is a time for everything, and a season for every activity under the heaven (Ecclesiastes 3) :)"}, {"timstamp": "2016-07-12 10:46", "user": "Elarcis", "body": "It's infuriating, because when I have time to write tests I do, but then everytime, tasks take time because tests have to be accounted for, so yeah 'do dirty instead, we don't have time for this yet'"}], "label": "other"}
{"id": "93d594bd", "body": "", "comments": [{"timstamp": "2018-05-18 09:24", "user": "torbjorn", "body": "I have an angularjs app with a directive to create a d3.js chart , I have the d3.js setup code in the link function of that directive. That directive has a template: '<div class=\"myChart\"></div>' - now how do I access that div, which is the template, in the link function? I will create all sorts of svg related elements under that div"}, {"timstamp": "2018-05-18 09:25", "user": "torbjorn", "body": "oh this is a restrict: 'E', directive, so that <div> would be the first child under the 'element' argument of the function(scope,element,attrs) link function I suppose"}, {"timstamp": "2018-05-18 09:27", "user": "Elarcis", "body": "torbjorn: 'element' is always the html element the directive is tied to, be it A, E or C."}, {"timstamp": "2018-05-18 09:27", "user": "torbjorn", "body": "yes"}, {"timstamp": "2018-05-18 09:29", "user": "torbjorn", "body": "Elarcis: element.children is empty in my link function"}, {"timstamp": "2018-05-18 09:29", "user": "torbjorn", "body": "as I said I want to access the html element that is set upas the template of this directive, which when the coed has run, seems to be the first child of 'element', but it isnt as the link cod eis run"}, {"timstamp": "2018-05-18 09:31", "user": "icebox", "body": "torbjorn: \"element.children is empty\"... and? \"element is always the html element the directive is tied to\"..."}, {"timstamp": "2018-05-18 09:32", "user": "icebox", "body": "torbjorn: you have any d3 code working? is it working? :) cool... copy and paste in the link method and it continues to work :)"}, {"timstamp": "2018-05-18 09:32", "user": "torbjorn", "body": "did you see my question to the channel?"}, {"timstamp": "2018-05-18 09:32", "user": "torbjorn", "body": "its 7 minutes back"}, {"timstamp": "2018-05-18 09:32", "user": "Elarcis", "body": "torbjorn: its very hard to troubleshoot your issue without any code... can you please setup a SB?"}, {"timstamp": "2018-05-18 09:33", "user": "torbjorn", "body": "I need to acecss the directive template"}, {"timstamp": "2018-05-18 09:33", "user": "icebox", "body": "torbjorn: sure... and \"here it works\""}, {"timstamp": "2018-05-18 09:33", "user": "torbjorn", "body": "It's a gadzillion lines long, and I have narrowed my issue down to not being able to access the template elements"}, {"timstamp": "2018-05-18 09:34", "user": "torbjorn", "body": "I have this in my directive definition: template: '<div class=\"myChart\"></div>',"}, {"timstamp": "2018-05-18 09:34", "user": "icebox", "body": "torbjorn: sorry? nah... you need only three lines to reproduce your use case :)"}, {"timstamp": "2018-05-18 09:34", "user": "torbjorn", "body": "that <div> there is what I need to access in my link function"}, {"timstamp": "2018-05-18 09:34", "user": "torbjorn", "body": "however link functions element has no children, so I'm at a loss"}, {"timstamp": "2018-05-18 09:34", "user": "torbjorn", "body": "and that template will indeed be that directives elements child when all is said and done"}, {"timstamp": "2018-05-18 09:35", "user": "icebox", "body": "torbjorn: getting element and element with no children are different issue... no idea what you are experimenting"}, {"timstamp": "2018-05-18 09:35", "user": "torbjorn", "body": "I have the element, its right there as an argument to the link function, thats not an issue of mine. My issue is accessing the <div> that is my template"}, {"timstamp": "2018-05-18 09:35", "user": "torbjorn", "body": "which eventually aparently will become a child of that element, but now then the link function executes"}, {"timstamp": "2018-05-18 09:36", "user": "icebox", "body": "torbjorn: please, if you provide a minimal working reproducing your use case, we may give a look at it"}, {"timstamp": "2018-05-18 09:36", "user": "torbjorn", "body": "cant i just pastebin the top 20 lines of my directive?"}, {"timstamp": "2018-05-18 09:36", "user": "icebox", "body": "torbjorn: no text... we need code to debug"}, {"timstamp": "2018-05-18 09:36", "user": "Elarcis", "body": "torbjorn: no, because we cant test it"}, {"timstamp": "2018-05-18 09:37", "user": "torbjorn", "body": "its probably just something easy that the template is not parsed into the DOM until after the link function has run or something, i jstu cant seem to google to get that answer"}, {"timstamp": "2018-05-18 09:37", "user": "icebox", "body": "torbjorn: more you explain it, more you are confusing me what is your problem :)"}, {"timstamp": "2018-05-18 09:38", "user": "icebox", "body": "code to debug is worthy one thousand of words :)"}, {"timstamp": "2018-05-18 09:38", "user": "Peppa_Swine", "body": "torbjorn: it's element[0] where your div is."}, {"timstamp": "2018-05-18 09:38", "user": "torbjorn", "body": "icebox: really? 2 things, the 'template' string, and the link function? 2 things"}, {"timstamp": "2018-05-18 09:39", "user": "icebox", "body": "torbjorn: really? \"here it works\""}, {"timstamp": "2018-05-18 09:39", "user": "icebox", "body": "no stackblitz, no party"}, {"timstamp": "2018-05-18 09:39", "user": "torbjorn", "body": "this ok?"}, {"timstamp": "2018-05-18 09:39", "user": "Elarcis", "body": "torbjorn: its very easy to develop quiproquos over issue descriptions."}, {"timstamp": "2018-05-18 09:40", "user": "torbjorn", "body": "ive never worked with stackblitz, seemed like a big things with lots of levers and buttons for a simple quetsion"}, {"timstamp": "2018-05-18 09:41", "user": "Elarcis", "body": "torbjorn: if it were a simple question it would have been resolved already."}, {"timstamp": "2018-05-18 09:41", "user": "Peppa_Swine", "body": "torbjorn: at #14, add [0] after `element`"}, {"timstamp": "2018-05-18 09:41", "user": "Elarcis", "body": "torbjorn: element.children is a function."}, {"timstamp": "2018-05-18 09:42", "user": "Peppa_Swine", "body": "that'll give you direct reference to the root node (the div you are after)"}, {"timstamp": "2018-05-18 09:43", "user": "torbjorn", "body": "Peppa_Swine: I'm after the first (and only) element is the template to the directive"}, {"timstamp": "2018-05-18 09:43", "user": "torbjorn", "body": "as defined by the 'template' attribute"}, {"timstamp": "2018-05-18 09:44", "user": "Peppa_Swine", "body": "yes, it is available from element[0]"}, {"timstamp": "2018-05-18 09:44", "user": "torbjorn", "body": "Peppa_Swine: that gives me the element that the 'E' points to, ie the element that the directive.. attaches(?) to"}, {"timstamp": "2018-05-18 09:44", "user": "icebox", "body": "torbjorn: from docs example -"}, {"timstamp": "2018-05-18 09:45", "user": "icebox", "body": "torbjorn:"}, {"timstamp": "2018-05-18 09:45", "user": "icebox", "body": "torbjorn:"}, {"timstamp": "2018-05-18 09:45", "user": "torbjorn", "body": "Elarcis: indeed, calling it as a function gives me the template node"}, {"timstamp": "2018-05-18 09:45", "user": "torbjorn", "body": "thanks"}, {"timstamp": "2018-05-18 09:46", "user": "torbjorn", "body": "I can swear I got undefined at one point for .children"}, {"timstamp": "2018-05-18 09:46", "user": "torbjorn", "body": "though swearing seldom did much good"}, {"timstamp": "2018-05-18 09:47", "user": "Elarcis", "body": "torbjorn: just so you know, if you had spent like 5 minutes setting up your example, we would have been able to come up with a runnable answer in matters of seconds, rather than you getting frustrated for 15 minutes over describing your issue then judging StackBlitz as \"lots of levers and buttons\""}, {"timstamp": "2018-05-18 09:47", "user": "Peppa_Swine", "body": "i see, you don't use replace: true, so it gives you the wrong node indeed"}, {"timstamp": "2018-05-18 09:47", "user": "Elarcis", "body": "torbjorn: (especially since our template just requires you to basically paste what you sent us and call it from the template)"}, {"timstamp": "2018-05-18 09:47", "user": "Peppa_Swine", "body": "well, it's either what Elarcis said, or just get that element[0] thing and .querySelector() the shit outta it."}, {"timstamp": "2018-05-18 09:47", "user": "Peppa_Swine", "body": "the latter is more flexible i reckon."}, {"timstamp": "2018-05-18 09:49", "user": "Peppa_Swine", "body": "Elarcis: tell me as an experienced french person. camembert mold should smell like wet paper or something similiar, not like smegma, right?"}, {"timstamp": "2018-05-18 09:49", "user": "Peppa_Swine", "body": "i think i've got a spoiled one."}, {"timstamp": "2018-05-18 09:50", "user": "torbjorn", "body": "Elarcis: that may or may not have been the case, I had already narrowed the problem down to element.children not being what it should have been, stepping back to take in a web js frameowrk to start over would certainly have bene 2 steps back to go 2.1 steps forward at that point"}, {"timstamp": "2018-05-18 09:50", "user": "Peppa_Swine", "body": "it's also weird yellowish colour, not white, nor fluffy."}, {"timstamp": "2018-05-18 09:54", "user": "Peppa_Swine", "body": "aye, i'll better throw it away."}, {"timstamp": "2018-05-18 09:54", "user": "Elarcis", "body": "torbjorn: ...heh?"}, {"timstamp": "2018-05-18 09:55", "user": "Elarcis", "body": "Peppa_Swine: camembert doesnt smell much"}, {"timstamp": "2018-05-18 09:55", "user": "Peppa_Swine", "body": "yea that's what i was thinking too."}, {"timstamp": "2018-05-18 09:55", "user": "Peppa_Swine", "body": "thanks for confirming."}, {"timstamp": "2018-05-18 09:55", "user": "Elarcis", "body": "Peppa_Swine: its a subtle scent close to a variant of old milk, but its ok if its got lots of mold on it"}, {"timstamp": "2018-05-18 09:55", "user": "Peppa_Swine", "body": "yes."}, {"timstamp": "2018-05-18 09:56", "user": "Peppa_Swine", "body": "i've had it before, it's my favourite after brie. just got this one, kinda weird looking."}, {"timstamp": "2018-05-18 09:56", "user": "Peppa_Swine", "body": "into the trash it goes."}, {"timstamp": "2018-05-18 09:56", "user": "Peppa_Swine", "body": ":("}, {"timstamp": "2018-05-18 09:56", "user": "Elarcis", "body": "Peppa_Swine: nooo"}, {"timstamp": "2018-05-18 09:57", "user": "Elarcis", "body": "Peppa_Swine: its fine!"}, {"timstamp": "2018-05-18 09:57", "user": "Elarcis", "body": "Peppa_Swine: Im sure of it!"}, {"timstamp": "2018-05-18 09:57", "user": "Elarcis", "body": "Peppa_Swine: worst case scenario, you wont be here to bother us anymore."}, {"timstamp": "2018-05-18 09:58", "user": "Peppa_Swine", "body": "oh honey."}, {"timstamp": "2018-05-18 09:58", "user": "Elarcis", "body": "Peppa_Swine: I prefer Rocamadour or Munster, honestly."}, {"timstamp": "2018-05-18 09:58", "user": "icebox", "body": ":P"}, {"timstamp": "2018-05-18 09:58", "user": "Elarcis", "body": "Peppa_Swine: once I had some very strong camembert, and it was divinely good."}, {"timstamp": "2018-05-18 09:59", "user": "Peppa_Swine", "body": "strong as in?"}, {"timstamp": "2018-05-18 10:00", "user": "Elarcis", "body": "as in almost liquid, tasting like some old goat cheese."}, {"timstamp": "2018-05-18 10:00", "user": "Peppa_Swine", "body": "did is smell like 3 days old smegma?"}, {"timstamp": "2018-05-18 10:00", "user": "Peppa_Swine", "body": "ah."}, {"timstamp": "2018-05-18 10:00", "user": "Peppa_Swine", "body": "so the opposite of my case."}, {"timstamp": "2018-05-18 10:00", "user": "Elarcis", "body": "Peppa_Swine: ew"}, {"timstamp": "2018-05-18 10:00", "user": "Peppa_Swine", "body": "exactly"}, {"timstamp": "2018-05-18 10:01", "user": "Elarcis", "body": "Peppa_Swine: camembert should not be solid, what kind of monstruosity have you got?"}, {"timstamp": "2018-05-18 10:02", "user": "Peppa_Swine", "body": "it's not solid tho. the insides are nice and goopy, it's just the smell/colour that got me concerned."}, {"timstamp": "2018-05-18 10:03", "user": "Elarcis", "body": "Peppa_Swine: did you taste it?"}, {"timstamp": "2018-05-18 10:03", "user": "Peppa_Swine", "body": "hadn't had a chance, no"}, {"timstamp": "2018-05-18 10:03", "user": "Elarcis", "body": "Peppa_Swine: afaik, youd have to get a cheese rot for a very very long time for it to be unedible."}, {"timstamp": "2018-05-18 10:03", "user": "Elarcis", "body": "Peppa_Swine: but again, Ive got a strong stomach."}, {"timstamp": "2018-05-18 10:04", "user": "icebox", "body": "cheese molds are very powerful and dangerous"}, {"timstamp": "2018-05-18 10:04", "user": "icebox", "body": "(as Dr House teaches) :)"}, {"timstamp": "2018-05-18 10:09", "user": "Elarcis", "body": "icebox: yup. fermented cheese, along with eggs, is also one of the best non-meat sources of B12 vitamins."}, {"timstamp": "2018-05-18 10:10", "user": "Elarcis", "body": "icebox: (but eggs are often cooked, which denatures vitamins)"}], "label": "other"}
{"id": "93d59517", "body": "", "comments": [{"timstamp": "2019-04-17 15:13", "user": "Siecje", "body": "To translate the value of an input. Is it correct to use the i18n-value attribute? Since I want to translate the value attribute value."}], "label": "other"}
{"id": "93d5948e", "body": "", "comments": [{"timstamp": "2017-04-04 14:49", "user": "anotheryou", "body": "hi. how do I make a boolean of of a statement? I want to do something like ng-class=\"{isOne: (mightBeOne == 1)}\""}, {"timstamp": "2017-04-04 14:51", "user": "icebox", "body": "anotheryou:"}, {"timstamp": "2017-04-04 14:56", "user": "anotheryou", "body": "icebox, so when is an expression \"truthy\" ?"}, {"timstamp": "2017-04-04 14:57", "user": "icebox", "body": "anotheryou: true is true"}, {"timstamp": "2017-04-04 14:58", "user": "Pyrrhus666", "body": "truthy is also true though..."}, {"timstamp": "2017-04-04 14:58", "user": "Pyrrhus666", "body": "as is 42."}, {"timstamp": "2017-04-04 14:58", "user": "icebox", "body": "always 42"}, {"timstamp": "2017-04-04 14:58", "user": "icebox", "body": "it is the root object"}, {"timstamp": "2017-04-04 14:59", "user": "Pyrrhus666", "body": "so console.log(42) would expose all methods... hmmm, cool :)"}, {"timstamp": "2017-04-04 15:00", "user": "icebox", "body": "Pyrrhus666: no... being the root of universe, object type system, that would be infinite"}, {"timstamp": "2017-04-04 15:01", "user": "Pyrrhus666", "body": "icebox, also : console.log(42) would recurse somewhere down the line, I guess :)"}, {"timstamp": "2017-04-04 15:01", "user": "icebox", "body": "Pyrrhus666: yep :P"}, {"timstamp": "2017-04-04 15:03", "user": "anotheryou", "body": "icebox, so there is no build in thing like isTrue(2>1); //returns true"}, {"timstamp": "2017-04-04 15:04", "user": "icebox", "body": "anotheryou: I am afraid you are overengineering there :)"}, {"timstamp": "2017-04-04 15:04", "user": "icebox", "body": "anotheryou: what is the issue?"}, {"timstamp": "2017-04-04 15:05", "user": "icebox", "body": "anotheryou: \"it doesn't work\" is not an issue"}, {"timstamp": "2017-04-04 15:05", "user": "Pyrrhus666", "body": "uh-oh... icebox is in strict mode..."}, {"timstamp": "2017-04-04 15:05", "user": "icebox", "body": "Pyrrhus666: well... I provided a complete example afew hours ago :)"}, {"timstamp": "2017-04-04 15:06", "user": "anotheryou", "body": "isValid() maybe? I'll try"}, {"timstamp": "2017-04-04 15:06", "user": "anotheryou", "body": "icebox, I want to toggle a class depending on whether \"myVar > 0\" or not. The ng-class uses the array format because I got a bunch of classes to toggle."}], "label": "other"}
{"id": "93d5947f", "body": "", "comments": [{"timstamp": "2018-08-09 16:23", "user": "jlebrech", "body": "why is angularjs so bad at forms?"}, {"timstamp": "2018-08-09 16:49", "user": "jlebrech", "body": "why doesn't this ng-change do anything to the form"}, {"timstamp": "2018-08-09 16:51", "user": "Pyrrhus666", "body": "jlebrech, if the function is invoked, ng-change did its job, right ?"}, {"timstamp": "2018-08-09 16:52", "user": "jlebrech", "body": "i want to adjust the inputed value to the closest value in that array"}, {"timstamp": "2018-08-09 16:53", "user": "jlebrech", "body": "doesn't ng-change fire it's if it did that or is that just user-change?"}, {"timstamp": "2018-08-09 16:53", "user": "Pyrrhus666", "body": "but p is not a reference, right ?"}, {"timstamp": "2018-08-09 16:53", "user": "jlebrech", "body": "how to make it a ref?"}, {"timstamp": "2018-08-09 16:53", "user": "jlebrech", "body": "function(ref p){} ?"}, {"timstamp": "2018-08-09 16:54", "user": "jlebrech", "body": "how can i make it pass by ref then?"}, {"timstamp": "2018-08-09 16:55", "user": "jlebrech", "body": "cya"}, {"timstamp": "2018-08-09 16:55", "user": "Pyrrhus666", "body": "normally Id wrap it in an object, dunno if that applies here. my angularjs is rusty af"}, {"timstamp": "2018-08-09 16:55", "user": "Pyrrhus666", "body": "and Im off, later folks !"}], "label": "other"}
{"id": "93d59540", "body": "", "comments": [{"timstamp": "2016-08-23 13:35", "user": "Elarcis", "body": "I piss on 42, Epitech and their so-called revolutionary learning techniques."}, {"timstamp": "2016-08-23 13:37", "user": "Elarcis", "body": "Every damn people I've met who came from these schools was just an asocial prick persuaded they were the best coders on Earth, and let's not talk about their 'adapt or drown' swimming pool system that's just a condensed version of their whole education cycle"}, {"timstamp": "2016-08-23 13:38", "user": "ngboy", "body": "is it bad that i never heard of 42?"}, {"timstamp": "2016-08-23 13:38", "user": "Elarcis", "body": "ngboy: french IT school, opened a few years ago"}, {"timstamp": "2016-08-23 13:38", "user": "Elarcis", "body": "ngboy: it is theoretically a free school, but every expense is at your own"}, {"timstamp": "2016-08-23 13:39", "user": "ngboy", "body": "Elarcis, so, it's like teaching your self at home, but in a public building?"}, {"timstamp": "2016-08-23 13:39", "user": "ngboy", "body": "or do you have teachers?"}, {"timstamp": "2016-08-23 13:39", "user": "Elarcis", "body": "ngboy: not really, it gives a diploma at the end, and it's been created by a french billionaire, so it has some reputation"}, {"timstamp": "2016-08-23 13:39", "user": "ngboy", "body": "42 has no teachers, books, curriculum or grades and is absolutely free of charge to attend"}, {"timstamp": "2016-08-23 13:39", "user": "ngboy", "body": "eh.. oke"}, {"timstamp": "2016-08-23 13:40", "user": "Elarcis", "body": "ngboy: but well, they're using a swimming pool system, which is one month of intense work at the beginning of the school, to see who can learn and work, and who just gives up"}, {"timstamp": "2016-08-23 13:41", "user": "ngboy", "body": "how's that without a curriculum"}, {"timstamp": "2016-08-23 13:41", "user": "ngboy", "body": "what's there to give up on?"}, {"timstamp": "2016-08-23 13:41", "user": "Elarcis", "body": "ngboy: and everything about that school just screams 'we make code-vomiting machines'"}, {"timstamp": "2016-08-23 13:41", "user": "Elarcis", "body": "ngboy: there are grades. they're just not your usual grades"}, {"timstamp": "2016-08-23 13:42", "user": "Elarcis", "body": "ngboy: it's the group that's rated. if one member of the group fucks up, the whole group does"}, {"timstamp": "2016-08-23 13:42", "user": "Elarcis", "body": "ngboy: I speak from memory, I don't like them, so I don't have a very precise knowledge of their whereabouts"}, {"timstamp": "2016-08-23 13:44", "user": "ngboy", "body": "Elarcis, interesting, but never heard of it tbh, my colleagues neither (located in the netherlands)"}, {"timstamp": "2016-08-23 13:44", "user": "Elarcis", "body": "ngboy: it's free, alright"}, {"timstamp": "2016-08-23 13:45", "user": "ngboy", "body": "and the statemet was 'you cant learn programming at a \"normal\" school', a normal school being a non-42 school.. ?"}, {"timstamp": "2016-08-23 13:45", "user": "ngboy", "body": "i beg to differ :p"}, {"timstamp": "2016-08-23 13:45", "user": "ngboy", "body": "i piss on them too! elitist bastards!"}, {"timstamp": "2016-08-23 13:45", "user": "Elarcis", "body": "ngboy: approximately, yes"}, {"timstamp": "2016-08-23 13:46", "user": "Elarcis", "body": "ngboy: 'we're the only school that really teaches to code!'"}, {"timstamp": "2016-08-23 13:46", "user": "ngboy", "body": "all the software in the world must suck then.."}, {"timstamp": "2016-08-23 13:46", "user": "ngboy", "body": "(not saying alot of it doesnt)"}, {"timstamp": "2016-08-23 13:47", "user": "Elarcis", "body": "ngboy: >yeah, and when we get a 42er in a job interview, they're a big sweating pile of mess that can't align two sentences without stammering"}], "label": "other"}
{"id": "93d5953b", "body": "", "comments": [{"timstamp": "2017-02-16 17:21", "user": "bpinto", "body": "does anyone know if it's possible to access bound parameters (using binding) inside the `template` function on angular 1.5+?"}, {"timstamp": "2017-02-16 17:22", "user": "bpinto", "body": "if I access theme via $attrs.attributeName they have not been compiled yet"}, {"timstamp": "2017-02-16 17:22", "user": "cerebraldad", "body": "bpinto: are you using $observe?"}, {"timstamp": "2017-02-16 17:22", "user": "bpinto", "body": "I'm not, haven't heard of this before"}, {"timstamp": "2017-02-16 17:24", "user": "cerebraldad", "body": "bpinto: attrs.$observe(\"file\",function(v){}); will init once detected"}, {"timstamp": "2017-02-16 17:24", "user": "cerebraldad", "body": "inside this function you can manipulate the template"}, {"timstamp": "2017-02-16 17:25", "user": "cerebraldad", "body": "bpinto:"}, {"timstamp": "2017-02-16 17:26", "user": "bpinto", "body": "cerebraldad: that means the component would have to start with an empty template"}, {"timstamp": "2017-02-16 17:27", "user": "cerebraldad", "body": "bpinto: no it would be referenced as an attribute \"file\""}, {"timstamp": "2017-02-16 17:29", "user": "cerebraldad", "body": "bpinto:"}, {"timstamp": "2017-02-16 17:33", "user": "cerebraldad", "body": "bpinto: so the directive would be called <something file=\"templateHTML\"></something> then the directive \"something\" would look for the file \"templateHTML.html\" in the \"templates/directives\" directory"}, {"timstamp": "2017-02-16 17:33", "user": "cerebraldad", "body": "bpinto: and replace it with the contentURL var"}, {"timstamp": "2017-02-16 17:34", "user": "bpinto", "body": "cerebraldad: I could go with directive I was hoping I was going to continue using component"}, {"timstamp": "2017-02-16 17:35", "user": "cerebraldad", "body": "bpinto: components have link functions"}, {"timstamp": "2017-02-16 17:37", "user": "cerebraldad", "body": "im sorry i ment to say dont"}, {"timstamp": "2017-02-16 17:37", "user": "bpinto", "body": "cerebraldad: I guess I will need to use directive, might not be able to do what I want with components"}, {"timstamp": "2017-02-16 17:38", "user": "bpinto", "body": "I'm using webpack features, so it's not that simple:"}, {"timstamp": "2017-02-16 17:39", "user": "cerebraldad", "body": "bpinto: you can use the same sort of template logic - but its injectable"}, {"timstamp": "2017-02-16 17:40", "user": "cerebraldad", "body": "what are you trying to template?"}, {"timstamp": "2017-02-16 17:40", "user": "cerebraldad", "body": "the icon"}, {"timstamp": "2017-02-16 17:40", "user": "bpinto", "body": "yes"}, {"timstamp": "2017-02-16 17:41", "user": "cerebraldad", "body": "what about it?"}, {"timstamp": "2017-02-16 17:41", "user": "bpinto", "body": "there is no ng-include support or templateCache"}, {"timstamp": "2017-02-16 17:41", "user": "cerebraldad", "body": "you would use ng-bind-html"}, {"timstamp": "2017-02-16 17:42", "user": "cerebraldad", "body": "what about this icon component isnt working...looks ok"}, {"timstamp": "2017-02-16 17:42", "user": "bpinto", "body": "it doesnt work when the attribute is sent as {{flash.icon}} for instance"}, {"timstamp": "2017-02-16 17:43", "user": "cerebraldad", "body": "might just be your syntax"}, {"timstamp": "2017-02-16 17:43", "user": "cerebraldad", "body": "{{}}"}, {"timstamp": "2017-02-16 17:44", "user": "cerebraldad", "body": "a type error?"}, {"timstamp": "2017-02-16 17:44", "user": "bpinto", "body": "we use that for a separate reason"}, {"timstamp": "2017-02-16 17:44", "user": "bpinto", "body": "it doesnt work because by the time the template function is executed the parameters have not been compiled yet"}, {"timstamp": "2017-02-16 17:45", "user": "bpinto", "body": "I think we use double { for a conflict with anothe rlibrary, can't remember now"}, {"timstamp": "2017-02-16 17:45", "user": "cerebraldad", "body": "might need to bind a promise"}, {"timstamp": "2017-02-16 17:46", "user": "bpinto", "body": "promise?"}, {"timstamp": "2017-02-16 17:47", "user": "cerebraldad", "body": "yup either that or a broadcast event - but i would suggest using a service that returns a promise when the parameters have been compiled"}, {"timstamp": "2017-02-16 17:51", "user": "cerebraldad", "body": "bpinto: .map(params => {something}).toPromise();"}, {"timstamp": "2017-02-16 17:51", "user": "bpinto", "body": "I'm really confused with the promise coming into this"}, {"timstamp": "2017-02-16 17:51", "user": "bpinto", "body": "there is no request involved"}, {"timstamp": "2017-02-16 17:52", "user": "cerebraldad", "body": "you need a way to wait for the parameters before init your component or map the template to the params result"}, {"timstamp": "2017-02-16 17:55", "user": "cerebraldad", "body": "bpinto: or use the handlebars package"}, {"timstamp": "2017-02-16 17:57", "user": "cerebraldad", "body": "bpinto: or Mustache"}, {"timstamp": "2017-02-16 17:57", "user": "bpinto", "body": "right"}, {"timstamp": "2017-02-16 17:58", "user": "cerebraldad", "body": "bpinto: or configure your webpack.config.js to look for it"}, {"timstamp": "2017-02-16 17:58", "user": "cerebraldad", "body": "bpinto:"}, {"timstamp": "2017-02-16 17:59", "user": "bpinto", "body": "cerebraldad: thanks, I'll try those things here"}, {"timstamp": "2017-02-16 17:59", "user": "cerebraldad", "body": "bpinto: hope i helped"}, {"timstamp": "2017-02-16 18:01", "user": "bpinto", "body": "for sure!"}, {"timstamp": "2017-02-16 18:10", "user": "bpinto", "body": "cerebraldad: I have fixed it, thanks"}], "label": "other"}
{"id": "93d5953e", "body": "", "comments": [{"timstamp": "2016-11-17 02:05", "user": "ruurd", "body": "get a username"}, {"timstamp": "2016-11-17 02:05", "user": "ruurd", "body": "maybe people are sleeping?"}], "label": "other"}
{"id": "73af7cd6", "body": "", "comments": [{"timstamp": "10:08", "user": "storkme", "body": "hi"}], "label": "other"}
{"id": "93d594d1", "body": "", "comments": [{"timstamp": "2016-10-06 06:59", "user": "maybefbi", "body": "I heard here from core developers that Angular 3 will be released next year. And that Angular 2.1 will have another router."}, {"timstamp": "2016-10-06 07:06", "user": "heartburn", "body": "lol what?"}, {"timstamp": "2016-10-06 07:06", "user": "maybefbi", "body": "heartburn, yeah he said he isnt joking"}, {"timstamp": "2016-10-06 07:06", "user": "heartburn", "body": "who's he tho?"}, {"timstamp": "2016-10-06 07:07", "user": "maybefbi", "body": "couldn't disntinguish from the voices. i dont know them that well"}, {"timstamp": "2016-10-06 07:07", "user": "maybefbi", "body": "a lot of core devs on that episode"}, {"timstamp": "2016-10-06 07:08", "user": "heartburn", "body": "alright, considering that one ng year equals 3 normal years, that might indeed be legit."}, {"timstamp": "2016-10-06 07:11", "user": "maybefbi", "body": "heartburn, but shouldn't we build the tooling for angular 2 first"}, {"timstamp": "2016-10-06 07:11", "user": "maybefbi", "body": "i also am waiting for the version 2.1 router"}, {"timstamp": "2016-10-06 07:11", "user": "maybefbi", "body": "i only learned angular 1 after the controllerAs syntax came out"}, {"timstamp": "2016-10-06 07:13", "user": "heartburn", "body": "i personally can't take ng2 seriously because of how long it took to release it and how convoluted it eventually turned out to be. moving from ng to something simple and straight-forward myself."}, {"timstamp": "2016-10-06 07:15", "user": "heartburn", "body": "ng2 is an epitome of fucking around with tools."}, {"timstamp": "2016-10-06 07:17", "user": "heartburn", "body": "it even has a cli, ffs."}, {"timstamp": "2016-10-06 07:17", "user": "maybefbi", "body": "heartburn, i have the same sentiments. ive seen 200+ controller SPAs in ng1, something doesnt feel write about ng2. when i imagine how it would be like to write 200+ controllers in it, i can't imagine how it will workout in a huge team"}, {"timstamp": "2016-10-06 07:18", "user": "maybefbi", "body": "it feels like everyone in the team will have to know ng2 including the artists and the designers, and the CSS guys"}, {"timstamp": "2016-10-06 07:18", "user": "maybefbi", "body": "because ng2 is opinionated about how CSS is structured in the project"}, {"timstamp": "2016-10-06 07:18", "user": "maybefbi", "body": "so CSS guys can't just use their philosophy to structure CSS"}, {"timstamp": "2016-10-06 07:19", "user": "maybefbi", "body": "plus google has a history of just shutting things down"}, {"timstamp": "2016-10-06 07:19", "user": "maybefbi", "body": "e.g. GWT. i dont hear about it anymore. there was time when everything gmail, adsense was written in GWT"}, {"timstamp": "2016-10-06 07:20", "user": "maybefbi", "body": "now i hear everything is written in ng2"}], "label": "other"}
{"id": "93d59481", "body": "", "comments": [{"timstamp": "2018-11-14 18:54", "user": "rc96", "body": "Is there a way to stub out a new component on the command line?"}], "label": "other"}
{"id": "8addb26d", "body": "", "comments": [{"timstamp": "2017-12-01 12:07", "user": "joakimk", "body": "We have an app interfacing a backend/API. app.component.onNgInit() calls up a service, to get some data from the backend, and subscribes to this. Before authentication, this would return the data from the API at app start and we'd be done. However, now, onNgInit fails to get data because the user is not logged in (authenticated) in the backend. So after logging in, I have to reload the app (client) to call the API again to get the"}, {"timstamp": "2017-12-01 12:07", "user": "joakimk", "body": "I'm wondering, now that we've got authentication in place, maybe AppComponent should no longer set up the subscriptions to get the initial data?"}, {"timstamp": "2017-12-01 12:09", "user": "joakimk", "body": "... since AppComponent is the component loaded *before* authentication (when the user is met with the login form) every time. Guess we should set up a new \"StartComponent\" or \"WelcomeComponent\" or something, which takes over this functionality. The user is redirected to StartComponent after logging in"}, {"timstamp": "2017-12-01 12:13", "user": "joakimk", "body": "in any case, after logging in, the user hits path '' (empty path) which currently invokes the Module1Component. Until now, this component has been able to assume that the *previous* module (i.e. AppComponent) has already got data from the backend, but this no longer holds. So, all the while Module1Component is the \"landing pad\" after login, then I guess this component could/should take over the responsibility of getting the initia"}, {"timstamp": "2017-12-01 12:14", "user": "joakimk", "body": "At least if it finds that data has indeed *not* been resolved"}, {"timstamp": "2017-12-01 12:14", "user": "joakimk", "body": "any input on this ? :)"}, {"timstamp": "2017-12-01 12:18", "user": "joakimk", "body": "I guess, alternatively, I could just do a reload() after successful login....."}, {"timstamp": "2017-12-01 12:20", "user": "joakimk", "body": "so, either App handles login/auth, and redirects to Module1, which reloads page if data is \"missing\". Or, App redirects to Welcome after login, which talks to backend and gets data, and then redirects to Module1 (which then has data as before)"}], "label": "feature"}
{"id": "73af7d27", "body": "", "comments": [{"timstamp": "08:37", "user": "trampi", "body": "morning everyone!"}], "label": "other"}
{"id": "8addb26b", "body": "", "comments": [{"timstamp": "2018-10-29 13:13", "user": "berz3rk", "body": "hello guys, im wondering how to realize a collapsible area at the end of my angular app and when I open it angular should jump to the content you know?"}, {"timstamp": "2018-10-29 13:13", "user": "berz3rk", "body": "actual scrolling"}, {"timstamp": "2018-10-29 13:15", "user": "berz3rk", "body": "I tried to do this with viewport scroller , but it didnt realy work out :("}, {"timstamp": "2018-10-29 13:15", "user": "berz3rk", "body": "I tried to place an element in the html after the collapsible area and used viewportScroller.scrollToAnchor to that element, it works the second time, but the first time it doesnt do anything"}, {"timstamp": "2018-10-29 13:16", "user": "berz3rk", "body": "maybe its because angular first has to build the DOM content of that collapsible area? no idea"}, {"timstamp": "2018-10-29 13:18", "user": "Pyrrhus666", "body": "berz3rk, make sure the anchor exists, at least, even if the collapsible is still collapsed ?"}, {"timstamp": "2018-10-29 13:19", "user": "berz3rk", "body": "the anchor is always there, its behind the collapsible div"}, {"timstamp": "2018-10-29 13:19", "user": "berz3rk", "body": "not inside"}, {"timstamp": "2018-10-29 13:19", "user": "Pyrrhus666", "body": "so it does scroll, but not far enough ?"}, {"timstamp": "2018-10-29 13:20", "user": "Pyrrhus666", "body": "personally, I feel this is bad ux, and I wouldnt even try to do it, but ok..."}, {"timstamp": "2018-10-29 13:21", "user": "pupskuchen", "body": "let's not speak about a11y"}, {"timstamp": "2018-10-29 13:22", "user": "Pyrrhus666", "body": "not even thinking about accessibility, it just feels wrong to me :)"}, {"timstamp": "2018-10-29 13:23", "user": "berz3rk", "body": "eh"}, {"timstamp": "2018-10-29 13:23", "user": "berz3rk", "body": "it doesnt do anything at first klick"}, {"timstamp": "2018-10-29 13:23", "user": "berz3rk", "body": "at second it works"}, {"timstamp": "2018-10-29 13:24", "user": "pupskuchen", "body": "Pyrrhus666: probably because it is"}, {"timstamp": "2018-10-29 13:26", "user": "Pyrrhus666", "body": "berz3rk, probably because the 2nd time the content is already there or smt. I think you cant really solve this cleanly."}, {"timstamp": "2018-10-29 13:32", "user": "berz3rk", "body": "what should I do then?"}, {"timstamp": "2018-10-29 13:34", "user": "Pyrrhus666", "body": "dunno. what are you trying to achieve ? cant you use a popover ? or display the content in some other fashion ?"}, {"timstamp": "2018-10-29 13:37", "user": "berz3rk", "body": "i have a collapsible area at the end of the page"}, {"timstamp": "2018-10-29 13:37", "user": "berz3rk", "body": "think about a link or something"}, {"timstamp": "2018-10-29 13:37", "user": "berz3rk", "body": "you click on it, a text area expands"}, {"timstamp": "2018-10-29 13:37", "user": "berz3rk", "body": "you read stuff"}, {"timstamp": "2018-10-29 13:37", "user": "berz3rk", "body": "now the issue is the thing is at the end of the page"}, {"timstamp": "2018-10-29 13:37", "user": "berz3rk", "body": "so if you click the content that is revealing is under your current view position"}, {"timstamp": "2018-10-29 13:37", "user": "berz3rk", "body": "you have to scroll to the new content you know?"}, {"timstamp": "2018-10-29 13:37", "user": "berz3rk", "body": "or else you have to scroll then yourself afterwords"}, {"timstamp": "2018-10-29 13:38", "user": "Pyrrhus666", "body": "why not click on the collapse directly ? like its meant to be used ?"}, {"timstamp": "2018-10-29 13:38", "user": "berz3rk", "body": "what do you mean"}, {"timstamp": "2018-10-29 13:38", "user": "berz3rk", "body": "the user clicks on the collapse"}, {"timstamp": "2018-10-29 13:38", "user": "Pyrrhus666", "body": "yes."}, {"timstamp": "2018-10-29 13:38", "user": "berz3rk", "body": "but angular doesnt jump to the revealing content"}, {"timstamp": "2018-10-29 13:38", "user": "Pyrrhus666", "body": "no need if the user clicks on the collapse itself."}, {"timstamp": "2018-10-29 13:38", "user": "berz3rk", "body": "what do you mean"}, {"timstamp": "2018-10-29 13:39", "user": "berz3rk", "body": "i want that the content reveals"}, {"timstamp": "2018-10-29 13:39", "user": "berz3rk", "body": "and that the user sees it without scrolling"}, {"timstamp": "2018-10-29 13:39", "user": "Pyrrhus666", "body": "we just established that that is not going to work."}, {"timstamp": "2018-10-29 13:40", "user": "Pyrrhus666", "body": "this is the way a collapse is normally used :"}, {"timstamp": "2018-10-29 13:40", "user": "Pyrrhus666", "body": "you click on the thing, it expands _in_place_"}, {"timstamp": "2018-10-29 13:41", "user": "pupskuchen", "body": "yeah it does that in berz3rk's case too"}, {"timstamp": "2018-10-29 13:41", "user": "pupskuchen", "body": "you just don't see it because the toggle is at the end of the page"}, {"timstamp": "2018-10-29 13:41", "user": "pupskuchen", "body": "so the content is expanding beyond the visible part of the page"}, {"timstamp": "2018-10-29 13:42", "user": "Pyrrhus666", "body": "ah ok. then dont use a collapse, imho."}, {"timstamp": "2018-10-29 13:42", "user": "Pyrrhus666", "body": "or accept that the user must scroll."}, {"timstamp": "2018-10-29 13:44", "user": "Pyrrhus666", "body": "(I was under the impression the click was somewhere else, and the collapse was expanded programmatically)"}], "label": "feature"}
{"id": "0ec1e46e", "body": "", "comments": [{"timstamp": "09:50", "user": "Ben_1", "body": "hi"}, {"timstamp": "09:51", "user": "Ben_1", "body": "if I compile a subproject, is its output copied to the dist directory of the main application?"}, {"timstamp": "09:59", "user": "Pyrrhus666", "body": "Ben_1, afaik yes"}, {"timstamp": "09:59", "user": "Ben_1", "body": "Pyrrhus666: thx :)"}, {"timstamp": "09:59", "user": "Pyrrhus666", "body": "but you can set any output folder in the config for each project"}], "label": "other"}
{"id": "93d594d5", "body": "", "comments": [{"timstamp": "2018-02-23 10:23", "user": "Elarcis", "body": "OT: Zeldas Breath of the Wild OST is really great for a relaxing work session :D"}, {"timstamp": "2018-02-23 10:33", "user": "ray02", "body": "Elarcis: i love to use this"}, {"timstamp": "2018-02-23 12:56", "user": "Elarcis", "body": "ray02: I listened to some of the tracks you sent this morning, I cant say Im a fan, sorry :P"}, {"timstamp": "2018-02-23 14:33", "user": "ray02", "body": "Elarcis no problem :) it's just a quetion of taste :)"}, {"timstamp": "2018-02-23 14:50", "user": "icebox", "body": "OT:"}, {"timstamp": "2018-02-23 14:51", "user": "Pyrrhus666", "body": "icebox, Ill believe it when we see the first OS whatsapp-compatible client."}, {"timstamp": "2018-02-23 14:58", "user": "icebox", "body": "Pyrrhus666: yep... really hard"}, {"timstamp": "2018-02-23 14:59", "user": "icebox", "body": "Pyrrhus666: I would change immediately, but the rest of the world is using whatsapp"}, {"timstamp": "2018-02-23 15:01", "user": "Pyrrhus666", "body": "icebox, and whatsapp uses signal (the protocol), so it should be possible."}, {"timstamp": "2018-02-23 15:01", "user": "Pyrrhus666", "body": "unless of course they dont use signal, since nobody can verify the source anyway."}, {"timstamp": "2018-02-23 15:01", "user": "Pyrrhus666", "body": "(and yes, I do believe they dont use signal, or at least a back-doored version)"}, {"timstamp": "2018-02-23 15:50", "user": "icebox", "body": "Pyrrhus666: yesterday not a nice experience when your laptop is blocked after bios post with a cursor blinking at top-left... :) hard shutdown, crossing fingers, reboot... it was ok :) maybe a glitch with the ssd"}, {"timstamp": "2018-02-23 15:52", "user": "Elarcis", "body": "outch"}, {"timstamp": "2018-02-23 15:52", "user": "Pyrrhus666", "body": "icebox, ha, recognizable... I have that too sometimes :) my desktop has this all the time nowadays, so I rarely reboot it. new pc is ordered though :)"}, {"timstamp": "2018-02-23 15:53", "user": "icebox", "body": ":P yeah"}, {"timstamp": "2018-02-23 15:53", "user": "Pyrrhus666", "body": "(went with intel again, since linux support for ryzen G is, well, severely lacking)"}, {"timstamp": "2018-02-23 15:53", "user": "icebox", "body": "sigh"}, {"timstamp": "2018-02-23 15:53", "user": "icebox", "body": "(anyway it is a relief doing daily backups) :)"}, {"timstamp": "2018-02-23 15:54", "user": "Pyrrhus666", "body": "icebox, well, theyre trying, at least, but as for now, its too new to be reliable"}, {"timstamp": "2018-02-23 15:54", "user": "Pyrrhus666", "body": "icebox, a good backup regime is always nice ;)"}, {"timstamp": "2018-02-23 15:55", "user": "icebox", "body": "a classical rsync on two different sdhc cards :)"}, {"timstamp": "2018-02-23 15:55", "user": "Pyrrhus666", "body": "haha, thats oldskool :)"}, {"timstamp": "2018-02-23 15:56", "user": "Pyrrhus666", "body": "work-pc uses rsnapshot (built on rsync), home-pc uses deltacopy (windows rsync to obsd box)"}, {"timstamp": "2018-02-23 15:56", "user": "Pyrrhus666", "body": "laptop isnt backed up, but thats not needed"}, {"timstamp": "2018-02-23 16:04", "user": "icebox", "body": "ok :P"}, {"timstamp": "2018-02-23 16:21", "user": "Pyrrhus666", "body": "30 minutes and counting..."}, {"timstamp": "2018-02-23 16:26", "user": "icebox", "body": "less :)"}, {"timstamp": "2018-02-23 16:28", "user": "Pyrrhus666", "body": "^^"}, {"timstamp": "2018-02-23 16:29", "user": "Pyrrhus666", "body": "except no css per component, of course :P"}], "label": "other"}
{"id": "8addb262", "body": "", "comments": [{"timstamp": "2017-04-07 11:37", "user": "phx", "body": "is there a way to tell \"ng serve\" what files to ignore? something like adding stuff to .gitignore"}, {"timstamp": "2017-04-07 11:37", "user": "icebox", "body": "phx: no idea about \"moving out\" action... I am not behind your shoulders and I don't know anything of your box"}, {"timstamp": "2017-04-07 11:38", "user": "phx", "body": "icebox, mv app ~/tmp/, \"moving out\""}, {"timstamp": "2017-04-07 11:39", "user": "icebox", "body": "phx: about ng serve, I don't think so..."}, {"timstamp": "2017-04-07 11:39", "user": "icebox", "body": "phx:"}, {"timstamp": "2017-04-07 11:40", "user": "icebox", "body": "phx: if you need to ignore something, that is done in the build phase"}, {"timstamp": "2017-04-07 11:43", "user": "icebox", "body": "phx: I insist with my suggestion... no idea because you are spending so many time with angular cli... if you need to develop an app, you should focus on app details :)"}, {"timstamp": "2017-04-07 11:43", "user": "icebox", "body": "phx: it is not mandatory using angular cli to develop angular apps :)"}, {"timstamp": "2017-04-07 11:44", "user": "phx", "body": ""}, {"timstamp": "2017-04-07 11:44", "user": "phx", "body": "most probably"}, {"timstamp": "2017-04-07 11:44", "user": "icebox", "body": "phx: yep"}, {"timstamp": "2017-04-07 11:46", "user": "icebox", "body": "phx: but that depends on your setup"}, {"timstamp": "2017-04-07 11:46", "user": "icebox", "body": "phx: using webpack as bundler is only an option... there are different bundlers"}, {"timstamp": "2017-04-07 11:56", "user": "icebox", "body": "phx: if you think it is a mess, you are right, but it is not matter of angular... :)"}, {"timstamp": "2017-04-07 12:00", "user": "phx", "body": "icebox, in my opinion, in IT, everything is an utter crap, until proven otherwise, so no surprise here :)"}, {"timstamp": "2017-04-07 12:03", "user": "phx", "body": "those are the \"enterprise\" applocations, usually"}, {"timstamp": "2017-04-07 12:03", "user": "phx", "body": "and that proving never gets past the sales guy"}], "label": "feature"}
{"id": "93d594f6", "body": "", "comments": [{"timstamp": "2018-04-27 01:02", "user": "danger89", "body": "Hi folks. I'm using Angular material table + navigator, and I subscribe to my HttpClient (service) and sets MatTableDataSource after the http get call."}, {"timstamp": "2018-04-27 01:03", "user": "danger89", "body": "But I want to make sure to not have any memory leaks due to missing/wrong unsubscribes in my app.."}, {"timstamp": "2018-04-27 01:03", "user": "danger89", "body": "So is this the right way?"}, {"timstamp": "2018-04-27 01:03", "user": "danger89", "body": "thanks in advance!"}, {"timstamp": "2018-04-27 01:04", "user": "danger89", "body": "using Angular material data table + paginator I should have said*"}, {"timstamp": "2018-04-27 01:04", "user": "RhinoLance", "body": "danger89, a common pattern is to make sure your component/class implements the onDestroy interface. bah, hang on, I'll find an example"}, {"timstamp": "2018-04-27 01:05", "user": "RhinoLance", "body": "here's a nice explanation..."}, {"timstamp": "2018-04-27 01:07", "user": "danger89", "body": "RhinoLance: Thanks for your reply, but did you take a look at my snippet?"}, {"timstamp": "2018-04-27 01:07", "user": "RhinoLance", "body": "oops, nissed it."}, {"timstamp": "2018-04-27 01:07", "user": "danger89", "body": ";)"}, {"timstamp": "2018-04-27 01:07", "user": "danger89", "body": "my example is a bit more complicated namely"}, {"timstamp": "2018-04-27 01:08", "user": "danger89", "body": "RhinoLance: yes I'm also using onDestroy already.."}, {"timstamp": "2018-04-27 01:09", "user": "RhinoLance", "body": "that will do what you want too. You will need to add a check to verify that the subsctiption is actually subscribed."}, {"timstamp": "2018-04-27 01:09", "user": "danger89", "body": "aah you mean it can auto unsubscribe still? Eg. when the http request is finished or?"}, {"timstamp": "2018-04-27 01:10", "user": "danger89", "body": "notice that: I'm not using async pipe"}, {"timstamp": "2018-04-27 01:10", "user": "danger89", "body": "*NOT*"}, {"timstamp": "2018-04-27 01:10", "user": "RhinoLance", "body": "The benifit of adopting an auto unsubscribe pattern is that no matter how simple or complicated your classes get, there a single consistent way to manage it."}, {"timstamp": "2018-04-27 01:11", "user": "RhinoLance", "body": "When a subscription completes, it automatically closes the subscription."}, {"timstamp": "2018-04-27 01:11", "user": "RhinoLance", "body": "So manually trying to close subscriptions really takes you down a rabbit warren."}, {"timstamp": "2018-04-27 01:12", "user": "RhinoLance", "body": "That pattern will also take no more effort if you have 20 subsctiptions going."}, {"timstamp": "2018-04-27 01:13", "user": "RhinoLance", "body": "... and it's quite common, so other devs will know what's going on, rather than trying to work out how your unsubscribe logic is working"}, {"timstamp": "2018-04-27 01:13", "user": "RhinoLance", "body": ";)"}, {"timstamp": "2018-04-27 01:13", "user": "danger89", "body": "\"this\" pattern you talk about is about.. async pipe or which one in particular?"}, {"timstamp": "2018-04-27 01:13", "user": "RhinoLance", "body": "that example I sent. Hang on, I'll double check."}, {"timstamp": "2018-04-27 01:14", "user": "RhinoLance", "body": "yes, the takeWhile/takeUntil unsubscribe pattern."}, {"timstamp": "2018-04-27 01:14", "user": "danger89", "body": "uhh I'm now using the unsubscribe example from your link afaik"}, {"timstamp": "2018-04-27 01:14", "user": "danger89", "body": "ah the takewhile/takeuntil"}, {"timstamp": "2018-04-27 01:16", "user": "RhinoLance", "body": "Sorry, I didn't realise that article ran though a bunch of not great ways to unsibscribe before landing on the takeWhile/Until"}, {"timstamp": "2018-04-27 01:16", "user": "danger89", "body": ";) yes it did"}, {"timstamp": "2018-04-27 01:16", "user": "danger89", "body": "np"}, {"timstamp": "2018-04-27 01:20", "user": "danger89", "body": "takeWhile() is actually the same I think. In that case I need to set this alive boolean to false.. Meaning my code even become more messy. Since I everytime the paginator changes (like going to the next page), I need to set the alive to false.."}, {"timstamp": "2018-04-27 01:20", "user": "danger89", "body": "Well my point is.. this article is great if you only subscribe once to an Observable."}, {"timstamp": "2018-04-27 01:21", "user": "danger89", "body": "but in my case I'm constantly requesting new data whenever the user makes changes in the paginator (like going to a next page) --> new HTTP request"}, {"timstamp": "2018-04-27 01:22", "user": "danger89", "body": "Looking at me code. this.ledgerService.getAll(..) does a HTTP Get request."}, {"timstamp": "2018-04-27 01:23", "user": "danger89", "body": "my*"}, {"timstamp": "2018-04-27 01:23", "user": "RhinoLance", "body": "In that case, the HTTP request will either have finished, in which case the observable will be unsubscribed, caused an error, in which case it will be unsubscribed, or still waiting, in which case you cancel by unsubscribing it."}, {"timstamp": "2018-04-27 01:24", "user": "danger89", "body": "yes it will be finished indeed (mostliky), does in that case does it automatically unsubscribe? I'm confused now"}, {"timstamp": "2018-04-27 01:24", "user": "danger89", "body": "confused about rxjs WoW together with Angular"}, {"timstamp": "2018-04-27 01:24", "user": "RhinoLance", "body": "Yes. Once an observable has completed, it is automatically unsubscribed."}, {"timstamp": "2018-04-27 01:25", "user": "RhinoLance", "body": "World of Warcraft (WoW)?"}, {"timstamp": "2018-04-27 01:25", "user": "danger89", "body": "meaning .. I don't need to unsubscribe I suppose :) Since my http request is just 'finished'"}, {"timstamp": "2018-04-27 01:25", "user": "danger89", "body": "haha no"}, {"timstamp": "2018-04-27 01:25", "user": "danger89", "body": "Way of Working ;)"}, {"timstamp": "2018-04-27 01:25", "user": "RhinoLance", "body": ";)"}, {"timstamp": "2018-04-27 01:26", "user": "danger89", "body": ""}, {"timstamp": "2018-04-27 01:26", "user": "RhinoLance", "body": "The issue comes in where your component/page whatever is terminated for whatever reason while a subscription is still running. This will cause horrible errors (people may even die). That's why the onDestroy with takeWhile will automatically clean up any observables that are still active."}, {"timstamp": "2018-04-27 01:27", "user": "RhinoLance", "body": "...and you don't have to worry about tracking if they're running or not."}, {"timstamp": "2018-04-27 01:28", "user": "RhinoLance", "body": "Haha, I feel \"down with it\" by having guessed the first definition :D"}, {"timstamp": "2018-04-27 01:28", "user": "danger89", "body": "so ok I get it, onDestroy with takeWhile is a good practise the other cases I programmed is overkill imo (In My Opinion)"}, {"timstamp": "2018-04-27 01:28", "user": "danger89", "body": "lol:"}, {"timstamp": "2018-04-27 01:29", "user": "RhinoLance", "body": "yes."}, {"timstamp": "2018-04-27 01:31", "user": "RhinoLance", "body": "anyway, coffee time, biab (back in a bit) ;)"}, {"timstamp": "2018-04-27 01:32", "user": "danger89", "body": "RhinoLance: have fune!"}, {"timstamp": "2018-04-27 01:32", "user": "danger89", "body": "Ps. I noticed I also forgot to unsubscribe from this.paginatorService.pageChange ..."}, {"timstamp": "2018-04-27 01:35", "user": "danger89", "body": "owhnoo"}, {"timstamp": "2018-04-27 01:42", "user": "danger89", "body": "well in both changes takeWhile does not exists on type (in case of ledgerService:) 'Obervable<any[] | Ledger[]> (in case of of my own pageChange:) 'EventEmitter<PageEventData>' (in the last case, I may need to use another method of triggering an event?)"}, {"timstamp": "2018-04-27 01:44", "user": "danger89", "body": "Maybe an EventEmitter always finishes"}, {"timstamp": "2018-04-27 01:48", "user": "danger89", "body": "I think I need to use Subject iso (In Stead Of) EventEmitter. Regarding HttpClient Observable<..> I don't know"}, {"timstamp": "2018-04-27 01:53", "user": "danger89", "body": "ps. If I mot the takeWhile on top on my rxjs chain, it will say takeWhile does not exists on type 'Obserable<HttpResponse<Ledger[]>>'"}, {"timstamp": "2018-04-27 01:53", "user": "danger89", "body": "put*"}, {"timstamp": "2018-04-27 02:01", "user": "danger89", "body": "I try to use BehaviorSubject iso the anti-pattern of using EventEmitter"}], "label": "other"}
{"id": "93d594ee", "body": "", "comments": [{"timstamp": "2016-11-22 09:32", "user": "k200", "body": "how can I change a variable on model change, in controller?"}, {"timstamp": "2016-11-22 09:33", "user": "zomg", "body": "use ng-change"}, {"timstamp": "2016-11-22 09:33", "user": "k200", "body": "in controller."}, {"timstamp": "2016-11-22 09:33", "user": "zomg", "body": "yes, use ng-change"}, {"timstamp": "2016-11-22 09:34", "user": "k200", "body": "ok. checking."}, {"timstamp": "2016-11-22 09:34", "user": "zomg", "body": "(assuming you want to do something when the data changes because of a user changed it)"}, {"timstamp": "2016-11-22 09:34", "user": "k200", "body": "zomg: user is changing the data. but i want to change another variable which is not part of this creation flow."}, {"timstamp": "2016-11-22 09:36", "user": "zomg", "body": "yeah you can use ng-change to trigger some function in the controller as a result of user changing some value"}, {"timstamp": "2016-11-22 09:36", "user": "k200", "body": "zomg: i dont want to add ng-change on my view on create button of that another flow!"}, {"timstamp": "2016-11-22 09:37", "user": "icebox", "body": "k200: do you mean to show a part of template due to a constraint?"}, {"timstamp": "2016-11-22 09:38", "user": "k200", "body": "nvm."}, {"timstamp": "2016-11-22 09:38", "user": "k200", "body": "i will change edit that another flow only."}, {"timstamp": "2016-11-22 09:38", "user": "k200", "body": "icebox: no."}, {"timstamp": "2016-11-22 09:38", "user": "icebox", "body": "k200: do you mean to \"inject\" a new partial?"}, {"timstamp": "2016-11-22 09:41", "user": "k200", "body": "icebox: no. it just concers one scope variable. i thought that variable is not part of my control flow."}, {"timstamp": "2016-11-22 09:41", "user": "icebox", "body": "ok"}, {"timstamp": "2016-11-22 09:41", "user": "k200", "body": "can I do += in js / Angular?"}, {"timstamp": "2016-11-22 09:44", "user": "icebox", "body": "yes"}, {"timstamp": "2016-11-22 09:45", "user": "k200", "body": "icebox: zomg i have two different controllers in module and its submodel. i want to change $scope.var of submodule on a function call of module. how can I do that?"}, {"timstamp": "2016-11-22 09:45", "user": "k200", "body": "ok"}, {"timstamp": "2016-11-22 09:45", "user": "icebox", "body": "k200: use service to share info"}, {"timstamp": "2016-11-22 09:45", "user": "k200", "body": "just for this one variable?"}, {"timstamp": "2016-11-22 09:48", "user": "icebox", "body": "k200: that is the approach... we don't know how you designed your models :)"}, {"timstamp": "2016-11-22 09:49", "user": "k200", "body": "ok"}, {"timstamp": "2016-11-22 09:54", "user": "Elarcis", "body": "k200: also a service isn't just for one variable... but you gotta start somewhere"}, {"timstamp": "2016-11-22 09:54", "user": "Elarcis", "body": "k200: not creating a service 'just for one variable' is a good way to end up with too few services and lots of 'just one variable' :P"}, {"timstamp": "2016-11-22 09:55", "user": "k200", "body": "ok."}, {"timstamp": "2016-11-22 10:12", "user": "Elarcis", "body": "27 'replace: true' left in the code"}], "label": "other"}
{"id": "8addb273", "body": "", "comments": [{"timstamp": "2017-04-27 20:50", "user": "wooster", "body": "question: i'm trying to make a chrome extension that happens to use angular. the page context contains some areas that have user-generated content that i do not want angular to parse, in case it contains malicious code or things that will break the parser. i don't really have much control over the user-generated part of the page. is there some way to run angular.bootstrap() on the page, excluding a"}, {"timstamp": "2017-04-27 20:50", "user": "wooster", "body": "certain part?"}, {"timstamp": "2017-04-27 20:53", "user": "wooster", "body": "i want to avoid any parsing/interpolation on parts of the page"}], "label": "feature"}
{"id": "73af7d0d", "body": "", "comments": [{"timstamp": "15:33", "user": "Pyrrhus666", "body": ".ao .many .tlds .now .crazy :)"}], "label": "other"}
{"id": "73af7d25", "body": "", "comments": [{"timstamp": "03:11", "user": "yakiza", "body": "Would you say angularjs is hard? if i have no knowledge what so ever how long would you guys say it can take me to learn the basics?"}], "label": "other"}
{"id": "93d5949b", "body": "", "comments": [{"timstamp": "2016-08-29 13:15", "user": "lalu", "body": "which technology is used to save the data taken from user?"}, {"timstamp": "2016-08-29 13:20", "user": "lalu", "body": "which technology is used to save the data taken from user?"}, {"timstamp": "2016-08-29 13:22", "user": "Pyrrhus666", "body": "lalu: that questions makes no sense without context."}, {"timstamp": "2016-08-29 13:23", "user": "lalu", "body": "like uploaded images by user, text etc"}, {"timstamp": "2016-08-29 13:25", "user": "Pyrrhus666", "body": "lalu: Ive got no idea what you want to know."}, {"timstamp": "2016-08-29 13:28", "user": "lalu", "body": "Pyrrhus666 like i made one web page in angular 1 which contains a Register form,now the client will add his details in that form,and will the click submit button,now i want to know that which technology i must use to store that information taken from user?"}, {"timstamp": "2016-08-29 13:29", "user": "z3r0_", "body": "lalu: Is that an exemple or a question? Have trouble following you"}, {"timstamp": "2016-08-29 13:29", "user": "Pyrrhus666", "body": "lalu: you mean server-side ? it doesnt matter what you use for a backend, as long as it can respond to http requests."}, {"timstamp": "2016-08-29 13:30", "user": "lalu", "body": "yes server side"}, {"timstamp": "2016-08-29 13:30", "user": "Pyrrhus666", "body": "lalu: php, java, perl, python, c#, node, take you pick."}, {"timstamp": "2016-08-29 13:30", "user": "lalu", "body": "ohh i know java"}, {"timstamp": "2016-08-29 13:30", "user": "Pyrrhus666", "body": "lalu: but thats completely unrelated to angular, since that is only front-end."}, {"timstamp": "2016-08-29 13:31", "user": "lalu", "body": "so is there any API which is to be used ?"}, {"timstamp": "2016-08-29 13:31", "user": "lalu", "body": "like how will i link by back end to front end?"}, {"timstamp": "2016-08-29 13:31", "user": "Pyrrhus666", "body": "with http requests."}, {"timstamp": "2016-08-29 13:32", "user": "lalu", "body": "ok thanks mate"}, {"timstamp": "2016-08-29 13:32", "user": "lalu", "body": ":)"}, {"timstamp": "2016-08-29 13:32", "user": "z3r0_", "body": "lalu: You could use Spring + Java to build a RESTful Webservice, which will respond to http requests."}, {"timstamp": "2016-08-29 13:32", "user": "lalu", "body": "i don't know spring"}, {"timstamp": "2016-08-29 13:32", "user": "lalu", "body": ":/"}, {"timstamp": "2016-08-29 13:32", "user": "z3r0_", "body": "PHP or Java ?"}, {"timstamp": "2016-08-29 13:32", "user": "lalu", "body": "yes java i know"}, {"timstamp": "2016-08-29 13:32", "user": "z3r0_", "body": "What are you more familiar with ?"}, {"timstamp": "2016-08-29 13:33", "user": "lalu", "body": "java"}, {"timstamp": "2016-08-29 13:33", "user": "z3r0_", "body": "And what are you serving your webpages with Java ?"}, {"timstamp": "2016-08-29 13:33", "user": "z3r0_", "body": "Tomcat server ? Glassfish ?"}, {"timstamp": "2016-08-29 13:33", "user": "lalu", "body": "tomcat"}, {"timstamp": "2016-08-29 13:37", "user": "z3r0_", "body": "lalu: Still there ?"}, {"timstamp": "2016-08-29 13:37", "user": "lalu", "body": "yes"}, {"timstamp": "2016-08-29 13:40", "user": "z3r0_", "body": "lalu: And you want to upload a form the user submitted to your backend ? Are you using any database system?"}, {"timstamp": "2016-08-29 13:40", "user": "lalu", "body": "yes"}, {"timstamp": "2016-08-29 13:51", "user": "z3r0_", "body": "lalu: Basically what you need to do, is use $http.post(..); of angular JS to against a URL of your Java Backend, were the data will be handled and insert in database or whatever..."}, {"timstamp": "2016-08-29 13:53", "user": "lalu", "body": "i think pyrr also means the same?"}, {"timstamp": "2016-08-29 13:54", "user": "z3r0_", "body": "cybebrai: insert this in your controller and run: console.log( angular.fromJson('{\"id\": 54, \"name\": \"sqdqsdqq\", \"numPattern\": \"sdqsdqs\", \"hasLogo\": false}'));"}, {"timstamp": "2016-08-29 13:54", "user": "cyberbrai", "body": "ok"}, {"timstamp": "2016-08-29 13:55", "user": "cyberbrai", "body": "this one is working."}, {"timstamp": "2016-08-29 13:55", "user": "cyberbrai", "body": "but not my one"}, {"timstamp": "2016-08-29 13:55", "user": "cyberbrai", "body": "it just give me error Unexpected token '"}, {"timstamp": "2016-08-29 13:55", "user": "z3r0_", "body": "Yes, yours is not a valid JSON String, so angular cannot deserialize it"}, {"timstamp": "2016-08-29 13:56", "user": "cyberbrai", "body": "ok"}, {"timstamp": "2016-08-29 13:56", "user": "z3r0_", "body": "I saw you tried to replace the ' by \" whit regexes, what does it give ?"}, {"timstamp": "2016-08-29 13:59", "user": "lalu", "body": "animation works in mozilla firefox?"}, {"timstamp": "2016-08-29 13:59", "user": "z3r0_", "body": "cyberbrai: I got you, you there ?"}, {"timstamp": "2016-08-29 14:01", "user": "cyberbrai", "body": "sorry for not reply"}, {"timstamp": "2016-08-29 14:01", "user": "z3r0_", "body": "cyberbrai: In your controller: var swz = \"{'UserStatus':null}\"; console.log( angular.fromJson( swz.replace( /\\'/g, \"\\\"\")));"}, {"timstamp": "2016-08-29 14:01", "user": "cyberbrai", "body": "it's return string"}, {"timstamp": "2016-08-29 14:01", "user": "cyberbrai", "body": "ok let me try"}, {"timstamp": "2016-08-29 14:03", "user": "cyberbrai", "body": ":.;"}, {"timstamp": "2016-08-29 14:03", "user": "cyberbrai", "body": "great it's work"}, {"timstamp": "2016-08-29 14:03", "user": "cyberbrai", "body": ":)"}, {"timstamp": "2016-08-29 14:04", "user": "cyberbrai", "body": "thank you so much"}, {"timstamp": "2016-08-29 14:05", "user": "z3r0_", "body": "Your API is not JSON compliant though. You should probably write a function that will do the replace stuff, and call it on every data the API returns though..."}, {"timstamp": "2016-08-29 14:05", "user": "z3r0_", "body": "Anyway, you're welcome"}, {"timstamp": "2016-08-29 14:05", "user": "senayar", "body": "and if you want to abstract angular you can use JSON.parse instead of angular.fromJson cyberbrai"}, {"timstamp": "2016-08-29 14:06", "user": "senayar", "body": "or eval :)"}, {"timstamp": "2016-08-29 14:06", "user": "senayar", "body": "eval(swz.replace....)"}, {"timstamp": "2016-08-29 14:06", "user": "senayar", "body": "oh eval does not work"}, {"timstamp": "2016-08-29 14:07", "user": "z3r0_", "body": "JSON.parse ++"}, {"timstamp": "2016-08-29 14:09", "user": "cyberbrai", "body": "got it"}, {"timstamp": "2016-08-29 14:11", "user": "lalu", "body": "zero well thanks!"}, {"timstamp": "2016-08-29 14:13", "user": "z3r0_", "body": "lalu: What's your backend? Are you using a database ? or files ?"}, {"timstamp": "2016-08-29 14:13", "user": "lalu", "body": "zero not now buddy"}, {"timstamp": "2016-08-29 14:13", "user": "z3r0_", "body": "lalu: ok"}, {"timstamp": "2016-08-29 14:14", "user": "lalu", "body": "aja sale kale kauve"}], "label": "other"}
{"id": "93d594f4", "body": "", "comments": [{"timstamp": "2017-04-18 11:46", "user": "teta", "body": "I have a list with a search box, when I put something in the search box it calls the method here"}, {"timstamp": "2017-04-18 11:50", "user": "teta", "body": "can I just add the $scope variable anywhere I want?"}, {"timstamp": "2017-04-18 11:51", "user": "icebox", "body": "teta:"}, {"timstamp": "2017-04-18 11:52", "user": "teta", "body": "so the answer to my question is yes?"}, {"timstamp": "2017-04-18 11:52", "user": "teta", "body": "icebox:"}, {"timstamp": "2017-04-18 11:53", "user": "icebox", "body": "teta: the answer is \"yes\", but you need to know what is $scope and how it works \"lexical scoping\" in js"}, {"timstamp": "2017-04-18 11:55", "user": "icebox", "body": "teta: what is your concern?"}, {"timstamp": "2017-04-18 12:07", "user": "teta", "body": "can I do something like this?"}, {"timstamp": "2017-04-18 12:12", "user": "teta", "body": "what if I'm doing internal call"}, {"timstamp": "2017-04-18 12:12", "user": "teta", "body": "let's say I create method method1($scope, param1, param2)"}, {"timstamp": "2017-04-18 12:13", "user": "teta", "body": "how do I call it? method1(\"p1\", \"p2\")"}, {"timstamp": "2017-04-18 12:13", "user": "teta", "body": "and the scope gets inserted there in the middle magically?"}, {"timstamp": "2017-04-18 12:22", "user": "oslobystorm", "body": "there are functions that do that, search for debounce"}, {"timstamp": "2017-04-18 12:22", "user": "oslobystorm", "body": "import debounceTime from RxJS"}, {"timstamp": "2017-04-18 12:24", "user": "teta", "body": "anyboody?"}, {"timstamp": "2017-04-18 12:31", "user": "anotheryou", "body": "oslobystorm, thank you. I only knew debounce from actual physical buttons, where you want to avoid a double-click when the button bottoms-out and actually bounces a little :)"}, {"timstamp": "2017-04-18 12:33", "user": "anotheryou", "body": "hm, maybe still simpler to check scope against cached scope for changes every second"}, {"timstamp": "2017-04-18 12:33", "user": "anotheryou", "body": "exact timing is not so crucial"}, {"timstamp": "2017-04-18 12:33", "user": "oslobystorm", "body": "whatever suits you/the project"}, {"timstamp": "2017-04-18 12:35", "user": "anotheryou", "body": ":)"}], "label": "other"}
{"id": "0edea425", "body": "", "comments": [{"timstamp": "19:04", "user": "Paradisee", "body": "got a question i have no answer at all"}, {"timstamp": "19:04", "user": "Paradisee", "body": "Error during WebSocket handshake: Unexpected response code: 200"}, {"timstamp": "19:04", "user": "Paradisee", "body": "got this response on a 401"}, {"timstamp": "19:05", "user": "Paradisee", "body": "sorry, i just got that response"}, {"timstamp": "19:05", "user": "Paradisee", "body": "remove the part i said 401"}, {"timstamp": "19:06", "user": "Paradisee", "body": "Firefox cant establish a connection to the server at wss://"}, {"timstamp": "19:06", "user": "Paradisee", "body": "this is with firefox obviously"}, {"timstamp": "19:06", "user": "Paradisee", "body": "the other using chrome"}], "label": "other"}
{"id": "93d594bf", "body": "", "comments": [{"timstamp": "2018-12-18 11:30", "user": "anli", "body": "When I have changed a scope variable of a directive, which is declared as scope: { idModel: \"=ngIdModel\"} and the directive has been instanced using <foobar ng-id-model=\"x\">, should I be able to read the change in $scope.x? (I am setting the variable in a function in the directive where scope.apply() would generate an error about the scope already being in progress)"}, {"timstamp": "2018-12-18 11:31", "user": "anli", "body": "Ah, I had =? before"}, {"timstamp": "2018-12-18 11:32", "user": "anli", "body": "When I use =, the parent scope actually gets updated despite the one-way binding, but afterwards"}, {"timstamp": "2018-12-18 11:32", "user": "anli", "body": "So in the moment I am reading $scope in the parent, it is having its old value"}, {"timstamp": "2018-12-18 11:34", "user": "anli", "body": "Its apparent that I am reading the value while the scope still is in apply"}, {"timstamp": "2018-12-18 11:35", "user": "anli", "body": "Should I call an event handler in a deferred way instead of directly maybe"}, {"timstamp": "2018-12-18 11:36", "user": "anli", "body": "Is that because I am not using the ng prefix of the event handler?"}, {"timstamp": "2018-12-18 11:37", "user": "anli", "body": "it made a difference"}, {"timstamp": "2018-12-18 11:37", "user": "anli", "body": "cool"}, {"timstamp": "2018-12-18 11:40", "user": "anli", "body": "nope..."}], "label": "other"}
{"id": "93d59557", "body": "", "comments": [{"timstamp": "2017-02-13 09:17", "user": "Elarcis", "body": "Hi. I hate you."}, {"timstamp": "2017-02-13 09:22", "user": "uru", "body": "Hate you too, Elarcis <3"}, {"timstamp": "2017-02-13 09:22", "user": "Elarcis", "body": ">:C"}, {"timstamp": "2017-02-13 09:23", "user": "uru", "body": ":D"}, {"timstamp": "2017-02-13 09:27", "user": "icebox", "body": "Elarcis: hey"}, {"timstamp": "2017-02-13 09:27", "user": "icebox", "body": "Pyrrhus666: hey"}, {"timstamp": "2017-02-13 09:28", "user": "Elarcis", "body": "icebox: hey"}, {"timstamp": "2017-02-13 09:28", "user": "Elarcis", "body": "Pyrrhus666: hey"}, {"timstamp": "2017-02-13 09:28", "user": "Elarcis", "body": "Elarcis: hey"}, {"timstamp": "2017-02-13 09:28", "user": "Pyrrhus666", "body": "morning icebox Elarcis"}, {"timstamp": "2017-02-13 09:28", "user": "Pyrrhus666", "body": "icebox, watched arrival saturday, very nice ;)"}, {"timstamp": "2017-02-13 09:29", "user": "icebox", "body": "Pyrrhus666: nice... in the meantime I read the novel... in the novel there is not any trace of military presence and there is more physics"}, {"timstamp": "2017-02-13 09:29", "user": "Pyrrhus666", "body": "icebox, hehe, just what you might expect from hollywood"}, {"timstamp": "2017-02-13 09:30", "user": "icebox", "body": "Pyrrhus666: so... there is not the time paradox created in the movie... but the movie creates more suspense"}, {"timstamp": "2017-02-13 09:30", "user": "Pyrrhus666", "body": "icebox, also, fits with the old <unconvertable> the book was better <unconvertable> ;)"}, {"timstamp": "2017-02-13 09:31", "user": "icebox", "body": "Pyrrhus666: well... Ted Chiang said the movie is very good"}, {"timstamp": "2017-02-13 09:31", "user": "Elarcis", "body": "you're speaking of time paradoxes"}, {"timstamp": "2017-02-13 09:31", "user": "Elarcis", "body": "this seems fun"}, {"timstamp": "2017-02-13 09:31", "user": "Pyrrhus666", "body": "icebox, oh, it was, esp. the looming paradox started from the intro of the movie :)"}, {"timstamp": "2017-02-13 09:32", "user": "icebox", "body": "Pyrrhus666: yep"}, {"timstamp": "2017-02-13 09:32", "user": "Pyrrhus666", "body": "pity well have to wait 3000 years to see where it all goes ;)"}, {"timstamp": "2017-02-13 09:33", "user": "icebox", "body": "Pyrrhus666: :P"}, {"timstamp": "2017-02-13 09:33", "user": "icebox", "body": "I spent the weekend giving a look at fuse-box, new bundler-loader on the block :)"}, {"timstamp": "2017-02-13 09:34", "user": "icebox", "body": "no way... it is very fast, but webpack covers more use cases"}, {"timstamp": "2017-02-13 09:34", "user": "Pyrrhus666", "body": "not another one..."}, {"timstamp": "2017-02-13 09:35", "user": "icebox", "body": "migration on the way... 50%... I think I complete the transition to webpack in these days... next jump angular 4 and material 2 :)"}, {"timstamp": "2017-02-13 09:36", "user": "icebox", "body": "WebPack is not the only way -"}, {"timstamp": "2017-02-13 09:37", "user": "Pyrrhus666", "body": "reads like its a case of NIH. and sure, theres _always_ another way."}, {"timstamp": "2017-02-13 09:39", "user": "icebox", "body": "in the last weeks I played a lot with ES2015, porting the code from ES5... I think it would be better for all js programmers starting to code in ES2015, otherwise in a few iterations ES2015+ may be alien..."}, {"timstamp": "2017-02-13 09:40", "user": "Elarcis", "body": "Pyrrhus666: nature... finds a way."}, {"timstamp": "2017-02-13 09:40", "user": "Pyrrhus666", "body": "Im already there, still stuck in js 1.4 land, so es is as alien as it gets :P"}, {"timstamp": "2017-02-13 09:41", "user": "icebox", "body": "at the moment a sort of new kind of mess is the chaintool expecting transpiled code..."}, {"timstamp": "2017-02-13 09:42", "user": "icebox", "body": "really it seems the developer is compelled to use \"babel\" everywhere..."}, {"timstamp": "2017-02-13 09:42", "user": "Pyrrhus666", "body": "icebox, that will not change I guess. when browsers catch up to es2015, youll be doing es2017 and still use babel."}, {"timstamp": "2017-02-13 09:42", "user": "icebox", "body": "but ES2015 has been finalized at June 2015... almost two years ago"}, {"timstamp": "2017-02-13 09:43", "user": "icebox", "body": "Pyrrhus666: browsers support ES2015... only \"import\" features is not supported"}, {"timstamp": "2017-02-13 09:43", "user": "icebox", "body": "*feature"}, {"timstamp": "2017-02-13 09:43", "user": "Pyrrhus666", "body": "and in a year it will be <unconvertable> only feature xy is not supported <unconvertable> :)"}, {"timstamp": "2017-02-13 09:44", "user": "icebox", "body": ":P"}, {"timstamp": "2017-02-13 09:44", "user": "Elarcis", "body": "icebox: It feels like babel and bundlers just slowed down the browsers' incentive to implement new JS standards"}, {"timstamp": "2017-02-13 09:44", "user": "icebox", "body": "Elarcis: exactly!"}, {"timstamp": "2017-02-13 09:44", "user": "Elarcis", "body": "\"what for? devs just transpile into existing JS\""}, {"timstamp": "2017-02-13 09:44", "user": "Pyrrhus666", "body": "maybe Im a cynic (wait, theres no maybe). I hope well get where youll expect us to be someday."}, {"timstamp": "2017-02-13 09:45", "user": "icebox", "body": "and those layers (transpilers and bundlers) add a lot of complexity to the porject"}, {"timstamp": "2017-02-13 09:45", "user": "Elarcis", "body": "Pyrrhus666: we get that JS is constantly evolving, but you gotta admit it's been a very long time since we've been told that browsers should 'soon' support ES6"}, {"timstamp": "2017-02-13 09:45", "user": "Elarcis", "body": "Pyrrhus666: same with CSS3, etc."}, {"timstamp": "2017-02-13 09:45", "user": "Elarcis", "body": "Pyrrhus666: at least we (most of us) don't have to worry about IE anymore"}, {"timstamp": "2017-02-13 09:45", "user": "Pyrrhus666", "body": "Elarcis, yup. thats why well probaby always work with transpilers and polyfills."}, {"timstamp": "2017-02-13 09:46", "user": "Pyrrhus666", "body": "Elarcis, btw, thats also our own fault for always wanting to use the latest and greatest in software."}, {"timstamp": "2017-02-13 09:47", "user": "Elarcis", "body": "Pyrrhus666: I've been enlightened two weeks ago, realizing that foxandxss's starter isn't using webpack 2.2.0 nor AoT: we're wayy too much on the edge of new tech"}, {"timstamp": "2017-02-13 09:47", "user": "icebox", "body": "Pyrrhus666: ok... sh what is the point of standards (meaning ES+)?"}, {"timstamp": "2017-02-13 09:47", "user": "Elarcis", "body": "Pyrrhus666: always expecting the latest version, day 0"}, {"timstamp": "2017-02-13 09:47", "user": "icebox", "body": "*so what"}, {"timstamp": "2017-02-13 09:47", "user": "Pyrrhus666", "body": "Elarcis, yup."}, {"timstamp": "2017-02-13 09:48", "user": "icebox", "body": "if we finalize a standard and then we don't use it... it is a bit dummy"}, {"timstamp": "2017-02-13 09:48", "user": "Pyrrhus666", "body": "icebox, those standards are the promised future, not the present reality. so stick with whatss reality, and thats es5 (I guess ?)"}, {"timstamp": "2017-02-13 09:48", "user": "Pyrrhus666", "body": "_or_ accept that you need tools like babel ;)"}, {"timstamp": "2017-02-13 09:48", "user": "icebox", "body": "I repeat... ES2015 - June 2015 :)"}, {"timstamp": "2017-02-13 09:49", "user": "Pyrrhus666", "body": "icebox, thats not important. whats in the field ? not es2015."}, {"timstamp": "2017-02-13 09:49", "user": "icebox", "body": "all the browsers support ES2015 unless \"import\"... ok... I got your point, but I think \"babel\" created a parallel reality :)"}, {"timstamp": "2017-02-13 09:50", "user": "Pyrrhus666", "body": "icebox, oh, I agree with you there ;) but thats partly our own doing for wanting the cake and eat it too..."}, {"timstamp": "2017-02-13 09:53", "user": "Elarcis", "body": "I'd like to travel between parallel realities"}, {"timstamp": "2017-02-13 09:53", "user": "Elarcis", "body": "too bad ours is such one, I guess"}, {"timstamp": "2017-02-13 09:54", "user": "icebox", "body": "at the moment the main problem is the coherence... tools and libs are not orthogonal to the standards (ES5, ES2015+) and modules (CJS, UMD, etc.)... and this is a mess to create a coherent chaintool"}, {"timstamp": "2017-02-13 09:54", "user": "Pyrrhus666", "body": "if the parallel worlds thing holds it at least suggests theres some good ones out there ;)"}, {"timstamp": "2017-02-13 09:55", "user": "icebox", "body": "and I am saying, more \"babel\" approach is used, more that problem is highlighted"}, {"timstamp": "2017-02-13 09:56", "user": "Pyrrhus666", "body": "icebox, so do vanilla es2015 minus imports and ditch babel ;)"}, {"timstamp": "2017-02-13 09:56", "user": "Pyrrhus666", "body": "oh, and ditch ts of course, it exists by the grace of the transpiler ;)"}, {"timstamp": "2017-02-13 09:56", "user": "icebox", "body": "Pyrrhus666: well... that was my position until 2016 :)"}, {"timstamp": "2017-02-13 09:57", "user": "icebox", "body": "Pyrrhus666: but if you want to use angular (not angularjs) that is not a great option, feasible, but not optimal"}, {"timstamp": "2017-02-13 09:57", "user": "Pyrrhus666", "body": "icebox, I know. being devils advocate and all ;)"}, {"timstamp": "2017-02-13 09:57", "user": "icebox", "body": "Pyrrhus666: :P"}, {"timstamp": "2017-02-13 09:58", "user": "icebox", "body": "and angular did a great work... indeed it works with ES5, ES2015+, umd, cjs and so on..."}, {"timstamp": "2017-02-13 09:58", "user": "icebox", "body": "*great job"}, {"timstamp": "2017-02-13 09:59", "user": "Pyrrhus666", "body": "thing is, Ive become very practical over the years, probably because of the ns4/ie5 days Ive lived through. so I use what works and let other people be bothered by future standards"}, {"timstamp": "2017-02-13 09:59", "user": "icebox", "body": "and it offers a very good alternate to \"babel\" issue... typescript chaintool"}, {"timstamp": "2017-02-13 09:59", "user": "Pyrrhus666", "body": "and for now, that means a black box named webpack contained another black box called babel."}, {"timstamp": "2017-02-13 10:00", "user": "Pyrrhus666", "body": "icebox, how is transpiling ts -> es5 different from es2015 -> es5 ?"}, {"timstamp": "2017-02-13 10:00", "user": "icebox", "body": "Pyrrhus666: agreed... but at the moment my app weights 1.5Mb (angularjs + material + d3 + something else)..."}, {"timstamp": "2017-02-13 10:01", "user": "Pyrrhus666", "body": "icebox, are you sure that would be much less without babel ?"}, {"timstamp": "2017-02-13 10:01", "user": "icebox", "body": "Pyrrhus666: ts is better than babel... because it gives a coherent chaintool (you don't need babel\""}, {"timstamp": "2017-02-13 10:02", "user": "icebox", "body": "Pyrrhus666: yep... because you import only what you are using (not with angularjs, but with angular)"}, {"timstamp": "2017-02-13 10:02", "user": "Pyrrhus666", "body": "potato/potato (that doesnt really work in text, does it ?). its still transpiling."}, {"timstamp": "2017-02-13 10:02", "user": "icebox", "body": "Pyrrhus666: I see a lot of difference between babel and ts transpilation :)"}, {"timstamp": "2017-02-13 10:03", "user": "icebox", "body": "Pyrrhus666: the result is the same... how not"}, {"timstamp": "2017-02-13 10:03", "user": "Pyrrhus666", "body": "icebox, how do you feel ts vs. babel are fundamentally different ? (aside from the fact that ts is nice and all)"}, {"timstamp": "2017-02-13 10:04", "user": "icebox", "body": "Pyrrhus666: because with ts I use only ts, while with babel I need to use babel and plugins... the complexity is very different"}, {"timstamp": "2017-02-13 10:06", "user": "icebox", "body": "maybe Elarcis may tell us if they considered babel in the chaintool... :)"}, {"timstamp": "2017-02-13 10:06", "user": "Pyrrhus666", "body": "icebox, so it boils down to the fact that tsc is an easier to use transpiler than babel. I can see that. but thats just a flaw of babel, not a fundamental difference."}, {"timstamp": "2017-02-13 10:07", "user": "icebox", "body": "Pyrrhus666: (an interesting project is lebab... from ES5 to ES2015+)"}, {"timstamp": "2017-02-13 10:08", "user": "Pyrrhus666", "body": "that does sound like a better option yes :)"}, {"timstamp": "2017-02-13 10:09", "user": "icebox", "body": "Pyrrhus666: the starting point is different... I would say that babel doesn't add anything, while ts adds types and annotations"}, {"timstamp": "2017-02-13 10:10", "user": "icebox", "body": "Pyrrhus666: I mean, babel is a pure transpiler, while ts is a language"}, {"timstamp": "2017-02-13 10:10", "user": "Pyrrhus666", "body": "icebox, agreed. but that also is not a fundamental difference. youre still using features not natively supported, and thus transpiling ;)"}, {"timstamp": "2017-02-13 10:11", "user": "Pyrrhus666", "body": "icebox, well, its es2015+++."}, {"timstamp": "2017-02-13 10:11", "user": "icebox", "body": "Pyrrhus666: indeed my point is transpiling is useless :)"}, {"timstamp": "2017-02-13 10:11", "user": "icebox", "body": "we should use ES2015 (apart import features)"}, {"timstamp": "2017-02-13 10:11", "user": "Pyrrhus666", "body": "aaaaaaand were back were we started ;)"}, {"timstamp": "2017-02-13 10:11", "user": "icebox", "body": ":P"}, {"timstamp": "2017-02-13 10:12", "user": "icebox", "body": "not my fault :) neither yours :)"}, {"timstamp": "2017-02-13 10:13", "user": "Pyrrhus666", "body": "I know. I too wish it were simpler, but we have to make do ;)"}, {"timstamp": "2017-02-13 10:13", "user": "icebox", "body": ":P"}, {"timstamp": "2017-02-13 10:13", "user": "Pyrrhus666", "body": "meanwhile, vue is still nice ;)"}, {"timstamp": "2017-02-13 10:14", "user": "Elarcis", "body": "icebox: not a single time. typescript was directly the choice, so we didn't even consider Babel"}, {"timstamp": "2017-02-13 10:15", "user": "Elarcis", "body": "also I was really bummed that async/await in TS pre 2.1 required you to use Babel as well, glad they fixed that"}, {"timstamp": "2017-02-13 10:15", "user": "Elarcis", "body": "even if I'm not using async/await, but good to know for the future"}, {"timstamp": "2017-02-13 10:16", "user": "icebox", "body": "Pyrrhus666: after porting the app to angular 4... maybe I will port it to vue :)"}, {"timstamp": "2017-02-13 10:17", "user": "icebox", "body": "Pyrrhus666: (I don't think so) :P"}, {"timstamp": "2017-02-13 10:17", "user": "Pyrrhus666", "body": "icebox, still waiting for better starter options for angular ;)"}], "label": "other"}
{"id": "93d5951e", "body": "", "comments": [{"timstamp": "2016-09-30 10:14", "user": "nondo", "body": "Guys n girls, can anybody suggest an alternative to using ng-init other than using Controllers?"}, {"timstamp": "2016-09-30 10:15", "user": "zomg", "body": "nondo: for the purpose of doing what?"}, {"timstamp": "2016-09-30 10:20", "user": "nondo", "body": "zomg: I'm trying to execute a function that initializes Medium editor plug-in in my app. The code now > ng-init=mediumInit() in a <div> and inside mediumInit() I'm using Medium editor's API."}, {"timstamp": "2016-09-30 10:24", "user": "nondo", "body": "zomg:"}, {"timstamp": "2016-09-30 10:25", "user": "nondo", "body": "zomg: Can you tell me what happens when we use 2 ng-init together in the way shown in the bpaste link?"}, {"timstamp": "2016-09-30 10:26", "user": "nondo", "body": "zomg: Somebody from this channel(can't recall nick) asked me to avoid ng-init and suggested using Controllers instead but I don't want to add another controller."}, {"timstamp": "2016-09-30 10:27", "user": "zomg", "body": "nondo: a directive would probably be the way to go then"}, {"timstamp": "2016-09-30 10:28", "user": "E1arcis", "body": "nondo, probablym"}, {"timstamp": "2016-09-30 10:28", "user": "E1arcis", "body": "me"}, {"timstamp": "2016-09-30 10:28", "user": "zomg", "body": "in general, if you want to initialize some sort of external JS lib which does something with an element - like an editor - then you would wrap it as a directive"}, {"timstamp": "2016-09-30 10:28", "user": "E1arcis", "body": "nondo, and the fact that you have issue with ngInit makes me believe my advice was justified :D"}, {"timstamp": "2016-09-30 10:31", "user": "nondo", "body": "zomg: So I need to make a custom directive right? Can I use something like >"}, {"timstamp": "2016-09-30 10:32", "user": "zomg", "body": "nondo: since I'm assuming you want the medium editor to be initialized into some specific element"}, {"timstamp": "2016-09-30 10:32", "user": "zomg", "body": "nondo: you could yes, but a directive would probably be more idiomatic in angular for that purpose"}, {"timstamp": "2016-09-30 10:32", "user": "zomg", "body": "so <medium-editor> or <textbox medium-editor> or whatever could be a quite nice way to do it"}, {"timstamp": "2016-09-30 10:35", "user": "nondo", "body": "E1arcis: The ng-init is working fine but the docs say nothing clearly about it. I checked some examples here >"}, {"timstamp": "2016-09-30 10:36", "user": "nondo", "body": "zomg: Ok ok. I'll look into what you just suggested. Thanks."}], "label": "other"}
{"id": "93d59503", "body": "", "comments": [{"timstamp": "2016-05-12 10:30", "user": "steven10172", "body": "What's the proper way to have multiple nested directives sharing the same scope, but having the shared scope isolated?"}, {"timstamp": "2016-05-12 10:31", "user": "arlekin", "body": "steven10172: well you could have top level directive with isolated scope, and pass its controller to lower level directives"}, {"timstamp": "2016-05-12 10:32", "user": "arlekin", "body": "steven10172: or if its only 'two-layer' then you don't even have to pass controller, since directive without isolated scope will use parent scope by default"}, {"timstamp": "2016-05-12 10:33", "user": "steven10172", "body": "arlekin: The problem I have is the isolated scope directive works properly, but the nested directives create a new one and all share that"}, {"timstamp": "2016-05-12 10:33", "user": "arlekin", "body": "steven10172: could you shortly describe me how many directives you have, in what relation to eachother and what is desired result ?"}, {"timstamp": "2016-05-12 10:35", "user": "steven10172", "body": "arlekin:"}, {"timstamp": "2016-05-12 10:37", "user": "arlekin", "body": "steven10172: and you want your container directive to have isolated scope, no ?"}, {"timstamp": "2016-05-12 10:37", "user": "steven10172", "body": "arlekin: Yes. The rest are free to inherit, but they keep trying to being siblings not children"}, {"timstamp": "2016-05-12 10:37", "user": "arlekin", "body": "being siblings with eachother or container ?"}, {"timstamp": "2016-05-12 10:38", "user": "steven10172", "body": "arlekin: The container makes an isolated scope as it's supposed to, but all the nested need to share or be a child scope"}, {"timstamp": "2016-05-12 10:38", "user": "steven10172", "body": "but they keep making sibling scopes"}, {"timstamp": "2016-05-12 10:39", "user": "arlekin", "body": "steven10172: and transclusion works properly html-wise ?"}, {"timstamp": "2016-05-12 10:40", "user": "steven10172", "body": "Yep"}, {"timstamp": "2016-05-12 10:40", "user": "steven10172", "body": "arlekin: I removed the transclude: true statement and everything still renders find"}, {"timstamp": "2016-05-12 10:40", "user": "steven10172", "body": "fine*"}, {"timstamp": "2016-05-12 10:41", "user": "arlekin", "body": "steven10172: two things - first remove controller property in your child directive -it may resolve issue"}, {"timstamp": "2016-05-12 10:41", "user": "steven10172", "body": "arlekin: How can I make sure they're nested properly? require only looks for controller"}, {"timstamp": "2016-05-12 10:41", "user": "arlekin", "body": "steven10172: second which _should_ resolve issue is to add second '^' in require"}, {"timstamp": "2016-05-12 10:42", "user": "arlekin", "body": "steven10172: with only one '^' directive looks for controller on its own element or parent (hence i advise to remove controller to remove possible clash)"}, {"timstamp": "2016-05-12 10:43", "user": "arlekin", "body": "but with '^^' directive looks for controller on its parents"}, {"timstamp": "2016-05-12 10:43", "user": "arlekin", "body": "ideally combining both changes should resolve your issue"}, {"timstamp": "2016-05-12 10:43", "user": "arlekin", "body": "as per docs:"}, {"timstamp": "2016-05-12 10:45", "user": "steven10172", "body": "arlekin: Thanks. Let me test it"}, {"timstamp": "2016-05-12 10:49", "user": "steven10172", "body": "arlekin: I don't think it worked. Let me make a plnkr"}, {"timstamp": "2016-05-12 10:51", "user": "arlekin", "body": "steven10172: well i think i know why"}, {"timstamp": "2016-05-12 10:52", "user": "arlekin", "body": "in your parent directive set bindToController : true - that way your options object will bind to controller function"}, {"timstamp": "2016-05-12 10:53", "user": "arlekin", "body": "then in link function of your child directive you can assign options object to your scope like scope.options = ctrl.options"}, {"timstamp": "2016-05-12 10:53", "user": "arlekin", "body": "it won't be two-way binding tho im afraid"}, {"timstamp": "2016-05-12 10:54", "user": "steven10172", "body": "arlekin: options doesn't have to be 2-way binding. Only the stuff from the provider"}, {"timstamp": "2016-05-12 10:54", "user": "arlekin", "body": "steven10172: then that should work"}, {"timstamp": "2016-05-12 10:55", "user": "arlekin", "body": "steven10172: although if you would make semi-working fiddle or plnkr, i would be able to tinker with stuff and make sure my proposals are viable"}, {"timstamp": "2016-05-12 10:55", "user": "steven10172", "body": "arlekin:"}, {"timstamp": "2016-05-12 10:55", "user": "steven10172", "body": "There are no styles. So inspect and console are friends here"}, {"timstamp": "2016-05-12 10:55", "user": "arlekin", "body": "steven10172: sure thing"}, {"timstamp": "2016-05-12 10:59", "user": "steven10172", "body": "arlekin: I've thought about it a little more and if everything could inherit scope in the way the html is structure it would be best. So container is isolated, canvas and controls are siblings and inherit from container, and the pen-color is sibling to pen-size and inherit from controls"}, {"timstamp": "2016-05-12 11:00", "user": "steven10172", "body": "And when I removed the controllers ^^drawingControls was causing a problem as it couldn't find it"}, {"timstamp": "2016-05-12 11:03", "user": "arlekin", "body": "steven10172:"}, {"timstamp": "2016-05-12 11:04", "user": "arlekin", "body": "alrighty, so in console you'll see that controller is logged"}, {"timstamp": "2016-05-12 11:04", "user": "arlekin", "body": "and its controller of your parent directive"}, {"timstamp": "2016-05-12 11:04", "user": "arlekin", "body": "take notice that this logging takes place in child directive link function"}, {"timstamp": "2016-05-12 11:04", "user": "arlekin", "body": "so i'd say mission accomplished"}, {"timstamp": "2016-05-12 11:05", "user": "arlekin", "body": "the essential changes are made in container directive"}, {"timstamp": "2016-05-12 11:05", "user": "arlekin", "body": "in the rest i just mainly commented out other console.log's"}, {"timstamp": "2016-05-12 11:06", "user": "arlekin", "body": "steven10172: if you have questions: shoto"}, {"timstamp": "2016-05-12 11:06", "user": "arlekin", "body": "*shoot"}, {"timstamp": "2016-05-12 11:06", "user": "steven10172", "body": "arlekin: That gets options passed down, but what about scope.config that gets set in the container?"}, {"timstamp": "2016-05-12 11:07", "user": "arlekin", "body": "steven10172: set config object on ctrl instead of scope"}, {"timstamp": "2016-05-12 11:08", "user": "steven10172", "body": "arlekin: Ahhh. Thanks! :D"}, {"timstamp": "2016-05-12 11:08", "user": "arlekin", "body": "the solution is exactly what i mentioned before (the link to docs)"}, {"timstamp": "2016-05-12 11:08", "user": "arlekin", "body": "so basically the job is done by require: '^^controller'"}, {"timstamp": "2016-05-12 11:09", "user": "arlekin", "body": "and then in each link function you can have controller object to bind to your directive scope"}, {"timstamp": "2016-05-12 11:10", "user": "arlekin", "body": "and to enable parent directive scope to be \"shared\" we simply setup dummy controller function, set controllerAs to mitigate error related to identification of controller (dont know whats going on with that)"}, {"timstamp": "2016-05-12 11:10", "user": "steven10172", "body": "Ok. Makes sense"}, {"timstamp": "2016-05-12 11:11", "user": "arlekin", "body": "and then with bindToController: true (introduced in angular 1.4) angular takes all things from scope and binds them to controller which is mostly convenience thing"}, {"timstamp": "2016-05-12 11:11", "user": "arlekin", "body": "that way controller of your parent directive (which is required by child directives and put in their link functions) gets all the scope of your parent directive"}, {"timstamp": "2016-05-12 11:12", "user": "arlekin", "body": "boom! done"}, {"timstamp": "2016-05-12 11:12", "user": "arlekin", "body": ";)"}, {"timstamp": "2016-05-12 11:13", "user": "steven10172", "body": "arlekin: One more question. What exactly does transclude do? My initial thought was that it was required if you have innerhtml on the directive. But that doesn't seem to be the case. Is it only required when you want to put it in a specific spot?"}, {"timstamp": "2016-05-12 11:14", "user": "steven10172", "body": "specific spot in the template*"}, {"timstamp": "2016-05-12 11:14", "user": "arlekin", "body": "steven10172: yeah well it basically allows to put your innerhtml somewhere specific in your template"}, {"timstamp": "2016-05-12 11:15", "user": "arlekin", "body": "frankly i didn't know that it isn't absolutely required approach"}, {"timstamp": "2016-05-12 11:15", "user": "arlekin", "body": "although i guess that depends on case"}, {"timstamp": "2016-05-12 11:15", "user": "arlekin", "body": "i think the cleaner, and maybe safer approach would be to use transclude as God intended it to be used"}, {"timstamp": "2016-05-12 11:16", "user": "arlekin", "body": "just in case, you know"}, {"timstamp": "2016-05-12 11:16", "user": "steven10172", "body": "arlekin: Yea. I'll look into it further"}, {"timstamp": "2016-05-12 11:16", "user": "arlekin", "body": "because i think you could run in weird things down the road"}, {"timstamp": "2016-05-12 11:16", "user": "arlekin", "body": "either way im glad we figured it out"}, {"timstamp": "2016-05-12 11:17", "user": "steven10172", "body": "arlekin: Yea. Glad we figure it out. One of the first time I'm writing a directive that isn't super simple"}, {"timstamp": "2016-05-12 11:18", "user": "arlekin", "body": "steven10172: heh, i actually have funny story with that"}, {"timstamp": "2016-05-12 11:19", "user": "arlekin", "body": "one of the first directives i ever made, was this bitchin lookup thing - basically you are specifing input fields, bind them with fields, and then it displays elegant widget allowing to search by this fields on the server"}, {"timstamp": "2016-05-12 11:19", "user": "arlekin", "body": "lots of weird things and bending myself backwards (my first directive mind you)"}, {"timstamp": "2016-05-12 11:20", "user": "steven10172", "body": "Tough first directive"}, {"timstamp": "2016-05-12 11:20", "user": "arlekin", "body": "im stubborn mind"}, {"timstamp": "2016-05-12 11:20", "user": "arlekin", "body": "and - funnily enough - totally absurd"}, {"timstamp": "2016-05-12 11:20", "user": "steven10172", "body": "I've been using angular for ~6-7mo, but everything was basically pull data from api and display"}, {"timstamp": "2016-05-12 11:21", "user": "arlekin", "body": "recently i came to conclusion that, both implementation-wise and user experience, would be to do lookup by a fulltext search based on single input field"}, {"timstamp": "2016-05-12 11:21", "user": "arlekin", "body": "and all my hard work with templating, binding, chaining django filters on backend and so on"}, {"timstamp": "2016-05-12 11:21", "user": "arlekin", "body": "having custom dropdowns"}, {"timstamp": "2016-05-12 11:21", "user": "arlekin", "body": "and so on"}, {"timstamp": "2016-05-12 11:22", "user": "arlekin", "body": "i'll have to throw it away and redo"}, {"timstamp": "2016-05-12 11:22", "user": "arlekin", "body": ":D"}, {"timstamp": "2016-05-12 11:22", "user": "steven10172", "body": "fulltext using angular's filter?"}, {"timstamp": "2016-05-12 11:22", "user": "steven10172", "body": "or something better"}, {"timstamp": "2016-05-12 11:22", "user": "arlekin", "body": "(i mean i don't _have_ to, but i want)"}, {"timstamp": "2016-05-12 11:23", "user": "arlekin", "body": "steven10172: well, i guess i would just send the input string to server, with assumption that spaces delimits fields, and then try to figure out which part goes into which field"}, {"timstamp": "2016-05-12 11:23", "user": "arlekin", "body": "at least till i come up with better approach"}, {"timstamp": "2016-05-12 11:23", "user": "steven10172", "body": "arlekin: I do have one more design style question. As you can probably tell this is going to be a canvas application that allows you to draw on the page. I want the provider to do most of the heavy lifting and be a library to handle the socket connections and handle what needs to be done. The directives for the UI will 2-way bind specific settings you can change on the fly. And the canvas directive will have basic"}, {"timstamp": "2016-05-12 11:23", "user": "steven10172", "body": "controller to handle drawing logic"}, {"timstamp": "2016-05-12 11:24", "user": "arlekin", "body": "steven10172: err... i just realised i should mention this earlier"}, {"timstamp": "2016-05-12 11:24", "user": "arlekin", "body": "if you wanna to have some object (say this conf) shared between your directives"}, {"timstamp": "2016-05-12 11:25", "user": "arlekin", "body": "then you really should put it in some service"}, {"timstamp": "2016-05-12 11:25", "user": "arlekin", "body": "and don't bother with neck-breaking, fire-circle hooping with scopes"}, {"timstamp": "2016-05-12 11:26", "user": "steven10172", "body": "And I guess the main question I have is should the provider do memory canvas or would a simple emit be ok? Is there a lot of overhead of emiting 100's of times a second?"}, {"timstamp": "2016-05-12 11:27", "user": "arlekin", "body": "steven10172: i have no idea frankly, maybe icebox would know - he is like one of the most knowledgable guys here i guess"}, {"timstamp": "2016-05-12 11:27", "user": "steven10172", "body": "arlekin: From my understanding is the Factory, Service, and Provider are basically the same thing. Went with provider so config can access it and set a few things."}, {"timstamp": "2016-05-12 11:27", "user": "icebox", "body": "arlekin: thanks... but sorry folks... a bit busy... maybe later"}, {"timstamp": "2016-05-12 11:27", "user": "arlekin", "body": "with my daily work i really am dumb when it comes to performance and test (i have no need for it)"}, {"timstamp": "2016-05-12 11:28", "user": "arlekin", "body": "icebox: sorry"}, {"timstamp": "2016-05-12 11:28", "user": "steven10172", "body": "icebox: it's all good"}, {"timstamp": "2016-05-12 11:28", "user": "arlekin", "body": "steven10172: they are exactly the same thing"}, {"timstamp": "2016-05-12 11:28", "user": "steven10172", "body": "arlekin: And the reason I didn't have each directive access the provider is that I wanted the parent directive to be able to do a few things as necessary (if it applied)"}, {"timstamp": "2016-05-12 11:28", "user": "arlekin", "body": "steven10172: its just one thing, and two wrappers hiding some things which aren't always relevant"}, {"timstamp": "2016-05-12 11:29", "user": "arlekin", "body": "steven10172: inheritance and modularization brah"}, {"timstamp": "2016-05-12 11:30", "user": "steven10172", "body": "arlekin: Was most recently at a job interview and they asked the difference between them and I stated basically the same and the guy was confused slightly. He swore there some small differences between factory and service, but service just calls factory for you in the backend."}, {"timstamp": "2016-05-12 11:31", "user": "steven10172", "body": "Then he started talking about how one used 'this'. But just semantics"}, {"timstamp": "2016-05-12 11:32", "user": "arlekin", "body": "steven10172: im pretty sure that they are like wrappers for each other even implementation-wise, but i'd have to check before i'd argue"}], "label": "other"}
{"id": "93d59483", "body": "", "comments": [{"timstamp": "2018-10-22 12:09", "user": "Pyrrhus666", "body": "just adding charcodes doesnt make a unique enough number to identify anagrams ?"}, {"timstamp": "2018-10-22 12:10", "user": "Pyrrhus666", "body": "cant do that streaming though, but yes."}, {"timstamp": "2018-10-22 12:11", "user": "Pyrrhus666", "body": "streaming by character, I meant"}, {"timstamp": "2018-10-22 12:11", "user": "Pyrrhus666", "body": "for multi gigabyte length words :)"}, {"timstamp": "2018-10-22 12:14", "user": "Pyrrhus666", "body": "yeah, Ive seen that one. pretty cool indeed. integer overflows might be a bitch though"}, {"timstamp": "2018-10-22 12:14", "user": "Pyrrhus666", "body": "use unicode character points ?"}, {"timstamp": "2018-10-22 12:46", "user": "Pyrrhus666", "body": "easier to use utf-32 then, every char would be 4 bytes."}, {"timstamp": "2018-10-22 14:17", "user": "Pyrrhus666", "body": "window.scrollTo(0,document.body.scrollHeight);"}, {"timstamp": "2018-10-22 14:17", "user": "Pyrrhus666", "body": "should do the trick I guess ?"}, {"timstamp": "2018-10-22 14:35", "user": "berz3rk", "body": "Pyrrhus666: I tried this but it doesnt seem to work. the content is not there yet tho when I execute it. like i said the workflow is: click button, area expands, jump to end of page (to see the expanded content)"}, {"timstamp": "2018-10-22 14:36", "user": "berz3rk", "body": "but the first time it doesnt work"}, {"timstamp": "2018-10-22 14:36", "user": "berz3rk", "body": "if it opened one time it works the second time"}, {"timstamp": "2018-10-22 14:37", "user": "Pyrrhus666", "body": "have you tried using a viewportscroller ? :"}, {"timstamp": "2018-10-22 14:37", "user": "Pyrrhus666", "body": "Ive never used it, but it seems applicable in your case"}, {"timstamp": "2018-10-22 14:38", "user": "berz3rk", "body": "i take a look :) thanks"}, {"timstamp": "2018-10-22 14:39", "user": "Pyrrhus666", "body": "let us know if it works ;)"}], "label": "other"}
{"id": "93d594fd", "body": "", "comments": [{"timstamp": "2018-09-17 11:22", "user": "Nipple_Ice", "body": ""}, {"timstamp": "2018-09-17 11:25", "user": "SuperTyp", "body": "Nipple_Ice: use OT prefix please"}, {"timstamp": "2018-09-17 11:25", "user": "Nipple_Ice", "body": "SuperTyp:"}, {"timstamp": "2018-09-17 11:26", "user": "SuperTyp", "body": "xD"}, {"timstamp": "2018-09-17 11:26", "user": "SuperTyp", "body": "Peppa swine is it you?"}, {"timstamp": "2018-09-17 11:27", "user": "Pyrrhus666", "body": "yes, it is."}, {"timstamp": "2018-09-17 11:28", "user": "Pyrrhus666", "body": "Heartburn -> Peppa_Swine -> BONE_JELLY -> DOOR_LADDER -> Nipple_Ice"}, {"timstamp": "2018-09-17 11:30", "user": "SuperTyp", "body": "damn I'm good"}, {"timstamp": "2018-09-17 11:33", "user": "Elarcis", "body": "SuperTyp: you can tell it is because he always has a two-parts pseudo."}, {"timstamp": "2018-09-17 11:33", "user": "Nipple_Ice", "body": "you can tell it by /whoising actually"}, {"timstamp": "2018-09-17 11:33", "user": "Elarcis", "body": "SuperTyp: ...in a few minutes he might change it to contradict me, though."}, {"timstamp": "2018-09-17 11:34", "user": "Elarcis", "body": "Nipple_Ice: well I sure dont cheat."}, {"timstamp": "2018-09-17 11:35", "user": "Nipple_Ice", "body": "Elarcis:"}, {"timstamp": "2018-09-17 11:36", "user": "Elarcis", "body": ":|"}, {"timstamp": "2018-09-17 11:44", "user": "icebox", "body": "Elarcis: hey"}, {"timstamp": "2018-09-17 13:15", "user": "Elarcis", "body": "hi icebox."}, {"timstamp": "2018-09-17 13:31", "user": "Tazmain", "body": "o/ Elarcis"}, {"timstamp": "2018-09-17 13:53", "user": "Elarcis", "body": "Hello Tazmain."}, {"timstamp": "2018-09-17 14:34", "user": "SuperTyp", "body": "fml"}, {"timstamp": "2018-09-17 14:34", "user": "SuperTyp", "body": "timed out"}, {"timstamp": "2018-09-17 14:35", "user": "SuperTyp", "body": "I need some help"}, {"timstamp": "2018-09-17 14:35", "user": "SuperTyp", "body": "I don't understand this behaviour:"}, {"timstamp": "2018-09-17 14:35", "user": "SuperTyp", "body": "I want to show the more events div when clickin on show more events"}, {"timstamp": "2018-09-17 14:36", "user": "SuperTyp", "body": "why"}, {"timstamp": "2018-09-17 14:37", "user": "SuperTyp", "body": "is it because of the nested loops?"}, {"timstamp": "2018-09-17 14:37", "user": "SuperTyp", "body": "or is ngTemplate messing things up?"}, {"timstamp": "2018-09-17 14:41", "user": "Pyrrhus666", "body": "SuperTyp, I dont understand your code, but thats probably me. why the complicated solution if (in essence) you want to render items 1-3 when showMore = false and 1-n when showMore = true ? or am I missing something"}, {"timstamp": "2018-09-17 14:41", "user": "SuperTyp", "body": "no"}, {"timstamp": "2018-09-17 14:41", "user": "SuperTyp", "body": "I want to show 2 items max"}, {"timstamp": "2018-09-17 14:41", "user": "SuperTyp", "body": "and show the showMore container with the other items on click"}, {"timstamp": "2018-09-17 14:42", "user": "Pyrrhus666", "body": "so two containers. 1 visible if showMore is false, the other when showMore is true ?"}, {"timstamp": "2018-09-17 14:42", "user": "SuperTyp", "body": "the ng template with the outlet-template-comp is a premise"}, {"timstamp": "2018-09-17 14:42", "user": "Pyrrhus666", "body": "why so difficult ?"}, {"timstamp": "2018-09-17 14:42", "user": "SuperTyp", "body": "(I am using a third party lib that has an component like the outlet-template-comp that I can't extend)"}, {"timstamp": "2018-09-17 14:43", "user": "SuperTyp", "body": "^ thats why :)+"}, {"timstamp": "2018-09-17 14:43", "user": "Pyrrhus666", "body": "ah, that explain something :)"}, {"timstamp": "2018-09-17 14:43", "user": "SuperTyp", "body": "usually I would extend the component there and add the logic there to the lowest level"}, {"timstamp": "2018-09-17 14:47", "user": "Pyrrhus666", "body": "SuperTyp, but your second level is called shows, not events, right ?"}, {"timstamp": "2018-09-17 14:48", "user": "SuperTyp", "body": "yes but thats irrelevant"}, {"timstamp": "2018-09-17 14:49", "user": "Pyrrhus666", "body": "is it ? because now you have a double loop over events, which is bonkers ?"}, {"timstamp": "2018-09-17 14:51", "user": "SuperTyp", "body": "bonkers means crazy?"}, {"timstamp": "2018-09-17 14:51", "user": "Pyrrhus666", "body": "yes"}, {"timstamp": "2018-09-17 14:52", "user": "SuperTyp", "body": "why is it?"}, {"timstamp": "2018-09-17 14:52", "user": "Pyrrhus666", "body": "why would I want to see every event as a child of itself ?"}, {"timstamp": "2018-09-17 14:52", "user": "SuperTyp", "body": "yes thats true its wrong"}, {"timstamp": "2018-09-17 14:59", "user": "SuperTyp", "body": "Pyrrhus666:"}, {"timstamp": "2018-09-17 14:59", "user": "SuperTyp", "body": "this should be more correct"}, {"timstamp": "2018-09-17 15:00", "user": "Pyrrhus666", "body": "ah yes, that looks more logical :)"}, {"timstamp": "2018-09-17 15:02", "user": "SuperTyp", "body": "now I know that the boolean is always overwritten"}, {"timstamp": "2018-09-17 15:02", "user": "SuperTyp", "body": "(if you set the *ngIf to true the more shows container will show) but how can I solve this?"}, {"timstamp": "2018-09-17 15:02", "user": "Pyrrhus666", "body": "SuperTyp, it still renders the wrong things in the more-shows div if I force it to be rendered. it renders the high level things (events)"}, {"timstamp": "2018-09-17 15:03", "user": "Pyrrhus666", "body": "seems it would be better if you update the slice when boolean is true: 0-2 -> 0-5."}, {"timstamp": "2018-09-17 15:04", "user": "SuperTyp", "body": "fixed"}, {"timstamp": "2018-09-17 15:05", "user": "Pyrrhus666", "body": "well, the switch still doesnt work. also : it would probably toggle all show-mores are once (there is only one boolean)"}, {"timstamp": "2018-09-17 15:06", "user": "Pyrrhus666", "body": "you want a boolean per Event"}, {"timstamp": "2018-09-17 15:06", "user": "SuperTyp", "body": "exactly ;)"}, {"timstamp": "2018-09-17 15:06", "user": "SuperTyp", "body": "how??!"}, {"timstamp": "2018-09-17 15:06", "user": "SuperTyp", "body": "I have no idea"}, {"timstamp": "2018-09-17 15:06", "user": "SuperTyp", "body": "not possible with that structure?"}, {"timstamp": "2018-09-17 15:09", "user": "Pyrrhus666", "body": "SuperTyp,"}, {"timstamp": "2018-09-17 15:10", "user": "Pyrrhus666", "body": "I still feel you should simply adjust the slice-size"}, {"timstamp": "2018-09-17 15:12", "user": "Pyrrhus666", "body": "SuperTyp,"}, {"timstamp": "2018-09-17 15:13", "user": "Pyrrhus666", "body": "SuperTyp, updated, wrong slice initialization"}, {"timstamp": "2018-09-17 15:29", "user": "SuperTyp", "body": "Pyrrhus666: thx but the problem is"}, {"timstamp": "2018-09-17 15:29", "user": "SuperTyp", "body": ""}, {"timstamp": "2018-09-17 15:29", "user": "SuperTyp", "body": "this needs to be in an extra panel..."}, {"timstamp": "2018-09-17 15:30", "user": "Pyrrhus666", "body": "SuperTyp, weird, but ok. then use this version :"}, {"timstamp": "2018-09-17 15:32", "user": "SuperTyp", "body": "I love you"}, {"timstamp": "2018-09-17 15:32", "user": "Pyrrhus666", "body": "SuperTyp, so buy me beer :P"}, {"timstamp": "2018-09-17 15:32", "user": "SuperTyp", "body": "gimme link"}, {"timstamp": "2018-09-17 15:33", "user": "Pyrrhus666", "body": "SuperTyp,"}, {"timstamp": "2018-09-17 15:36", "user": "SuperTyp", "body": "Pyrrhus666: you want a whole festival?"}, {"timstamp": "2018-09-17 15:37", "user": "Pyrrhus666", "body": "SuperTyp, nah, Im already going. so buy me a beer there ;)"}, {"timstamp": "2018-09-17 15:37", "user": "SuperTyp", "body": "ah :)"}], "label": "other"}
{"id": "8addb25e", "body": "", "comments": [{"timstamp": "2017-03-15 10:08", "user": "arussel", "body": "is there a way, when doing an $http.get on a basic auth protected resource, to not have the basic prompt pop up ?"}, {"timstamp": "2017-03-15 10:08", "user": "icebox", "body": "arussel: no"}, {"timstamp": "2017-03-15 10:09", "user": "icebox", "body": "arussel: bypassing the security? :)"}, {"timstamp": "2017-03-15 10:09", "user": "arussel", "body": "not bypassing it, just getting an 401 and not doing anything with it"}, {"timstamp": "2017-03-15 10:10", "user": "Elarcis", "body": "arussel: browser-level security, you can't autofill it code-side"}, {"timstamp": "2017-03-15 10:17", "user": "arussel", "body": "I don't want to auto-fill, I just want a 401 and no prompt"}, {"timstamp": "2017-03-15 10:17", "user": "arussel", "body": "I tried passing an authorization header, but I still get a prompt"}, {"timstamp": "2017-03-15 10:19", "user": "icebox", "body": "arussel: that is how basic authentication works"}, {"timstamp": "2017-03-15 10:19", "user": "Elarcis", "body": "arussel: 401 is for when authentication fails, not when it is asked"}, {"timstamp": "2017-03-15 10:20", "user": "icebox", "body": "arussel: it is between web server and browser, it is not at the application level"}, {"timstamp": "2017-03-15 10:20", "user": "Elarcis", "body": "arussel: when the prompt shows up, it's before your request returns any error"}, {"timstamp": "2017-03-15 10:20", "user": "Pyrrhus666", "body": "Elarcis, technically, a 401 just says youre not authorized, not that authorization failed ;"}, {"timstamp": "2017-03-15 10:21", "user": "Elarcis", "body": "Pyrrhus666: yeah, right"}, {"timstamp": "2017-03-15 10:21", "user": "arussel", "body": "so there is no way to know if a resource is Auth protected client side, so no way to protect against Authentication injection client side. Isn't it."}, {"timstamp": "2017-03-15 10:22", "user": "Elarcis", "body": "arussel: heeeeeh, not that I know"}], "label": "feature"}
{"id": "93d594ea", "body": "", "comments": [{"timstamp": "2016-06-07 11:07", "user": "Bent0", "body": "I'm trying to get the date in my view like so: yyyy-MM-dd. Somehow all I get is: June 7, 2016. See here:"}, {"timstamp": "2016-06-07 11:07", "user": "Bent0", "body": "How do I fix that"}, {"timstamp": "2016-06-07 11:09", "user": "icebox", "body": "Bent0: reading the docs"}, {"timstamp": "2016-06-07 11:10", "user": "icebox", "body": "Bent0: date: \"here you may use the format of the date\""}, {"timstamp": "2016-06-07 11:11", "user": "icebox", "body": "Bent0: as you see in the example in the docs"}, {"timstamp": "2016-06-07 11:11", "user": "Bent0", "body": "lets see"}, {"timstamp": "2016-06-07 11:12", "user": "Bent0", "body": "That was simple. cheers icebox :P"}, {"timstamp": "2016-06-07 11:13", "user": "icebox", "body": "Bent0: you are welcome"}], "label": "other"}
{"id": "93d59493", "body": "", "comments": [{"timstamp": "2016-10-17 09:35", "user": "antiPoP", "body": "Is possible to do a time counter without setTimeout/Interval?"}, {"timstamp": "2016-10-17 09:37", "user": "icebox", "body": "antiPoP: no..."}, {"timstamp": "2016-10-17 09:37", "user": "icebox", "body": "antiPoP: (please, js questions in javascript channel)"}, {"timstamp": "2016-10-17 09:39", "user": "antiPoP", "body": "icebox, ok"}, {"timstamp": "2016-10-17 09:41", "user": "antiPoP", "body": "what woudl you suggest to do time syncronization in angular with websockets? i'm looking at"}, {"timstamp": "2016-10-17 09:45", "user": "antiPoP", "body": "I guess I'll have to try..."}, {"timstamp": "2016-10-17 10:16", "user": "antiPoP", "body": "I'm trying to import"}, {"timstamp": "2016-10-17 10:16", "user": "antiPoP", "body": "how can I fix it?"}, {"timstamp": "2016-10-17 10:17", "user": "antiPoP", "body": "so, in project.config.ts is \" this.mergeObject(this.SYSTEM_CONFIG.paths, {'socket-kinda-ntp': 'node_modules/socket-kinda-ntp/client/socket-kinda-ntp.js'});"}, {"timstamp": "2016-10-17 10:17", "user": "antiPoP", "body": "\""}], "label": "other"}
{"id": "93d59558", "body": "", "comments": [{"timstamp": "2016-07-07 10:46", "user": "LoZio", "body": "Hello, I have an important question...I'm developing a web site with angularjs and I'm using a token...Now if I save the token in variable and refresh the page i lost the data; if save the token in localstorege is not secure...How can manage the token? I want to it persistent. THANKS!"}, {"timstamp": "2016-07-07 10:47", "user": "Pyrrhus", "body": "LoZio: localstorage, cookie or get-parameter, choose your poison ;)"}, {"timstamp": "2016-07-07 10:52", "user": "LoZio", "body": "Pyrrhus: Sorry, where should save in persistent mode the token? localstorage is not secure..where do you save it?"}, {"timstamp": "2016-07-07 10:54", "user": "Pyrrhus", "body": "LoZio: clientside persistence has only two options : cookie or localstorage. you choose..."}, {"timstamp": "2016-07-07 10:55", "user": "LoZio", "body": "Pyrrhus: Where is secure? thanks"}, {"timstamp": "2016-07-07 10:56", "user": "Elarcis", "body": "LoZio: anything that leaves the server isn't safe"}, {"timstamp": "2016-07-07 10:56", "user": "Pyrrhus", "body": "LoZio: the security is in the (handling of) the token, not in clientside persistence. clientside means zero security anyway."}, {"timstamp": "2016-07-07 10:57", "user": "LoZio", "body": "is true but I don't want to reinvent the wheele...I want to receive advices"}, {"timstamp": "2016-07-07 10:57", "user": "Pyrrhus", "body": "LoZio: I use localstorage _and_ cookie."}, {"timstamp": "2016-07-07 10:58", "user": "LoZio", "body": "Pyrrhus: Thank you!"}], "label": "other"}
{"id": "0edea3f5", "body": "", "comments": [{"timstamp": "02:14", "user": "Unplesantry", "body": "ya cant subscribe twice to httpclient"}, {"timstamp": "02:15", "user": "Unplesantry", "body": "have to create a obserbable inside obserbable"}], "label": "other"}
{"id": "93d594b2", "body": "", "comments": [{"timstamp": "2016-08-04 14:56", "user": "larmon", "body": "hi guys, i'm fairly new to the angular scene and i see quite some diversity in single line commenting. some use the // and some use /* this for single line commenting */"}, {"timstamp": "2016-08-04 14:56", "user": "larmon", "body": "i was always told with javascript 'it doesnt matter just be consistent'"}, {"timstamp": "2016-08-04 14:56", "user": "larmon", "body": "does this count for ng too ? whats the current best practise?"}, {"timstamp": "2016-08-04 14:57", "user": "fiddo", "body": "i was told 'it doesnt matter just be consistent' and seems to work"}, {"timstamp": "2016-08-04 14:57", "user": "larmon", "body": "k great"}, {"timstamp": "2016-08-04 15:02", "user": "Elarcis", "body": "larmon: it doesnt matter just be consistent"}, {"timstamp": "2016-08-04 15:03", "user": "Elarcis", "body": "larmon: ALTHOUGH when documenting functions, you might want to use '/**' because JSDoc"}, {"timstamp": "2016-08-04 15:03", "user": "larmon", "body": "i see"}, {"timstamp": "2016-08-04 15:04", "user": "larmon", "body": "Elarcis: my question was because ive seen Todd Motto use // for single line comments and john papa use /* */ for single line comments"}, {"timstamp": "2016-08-04 15:04", "user": "Elarcis", "body": "larmon: /* */ are just multi-line comments on one line"}, {"timstamp": "2016-08-04 15:04", "user": "Elarcis", "body": "larmon: it's exactly the same except that one can be extended to several lines"}, {"timstamp": "2016-08-04 15:05", "user": "larmon", "body": "yes i know how it functioned, just was curious about the single line commenting, seeing some do // and some /* */"}, {"timstamp": "2016-08-04 15:05", "user": "Elarcis", "body": "larmon: it doesn't matter"}, {"timstamp": "2016-08-04 15:05", "user": "larmon", "body": "ah oke, just presonal preference then?"}, {"timstamp": "2016-08-04 15:05", "user": "Elarcis", "body": "larmon: of all the good practices regarding code, this one is the most inconsequential I can think of x)"}, {"timstamp": "2016-08-04 15:06", "user": "Elarcis", "body": "larmon: yep, but be consistent within one project"}, {"timstamp": "2016-08-04 15:06", "user": "larmon", "body": "haha gotcha"}, {"timstamp": "2016-08-04 15:06", "user": "Elarcis", "body": "larmon: the content of comments matter way more than the syntax they're declared with"}, {"timstamp": "2016-08-04 15:09", "user": "Elarcis", "body": "/ declare the nbFreqOffsetByX variable"}, {"timstamp": "2016-08-04 15:09", "user": "Elarcis", "body": "when your ear starts leaking ominous amounts of serumen for some reason"}, {"timstamp": "2016-08-04 15:09", "user": "Elarcis", "body": "...gotta go for a minute"}, {"timstamp": "2016-08-04 15:15", "user": "Elarcis", "body": "back. All good! All good! I'm not leaking my brain"}, {"timstamp": "2016-08-04 15:15", "user": "Elarcis", "body": "got myself worried for a sec"}, {"timstamp": "2016-08-04 15:19", "user": "larmon", "body": "i love php and i think the earth is in fact flat"}, {"timstamp": "2016-08-04 15:20", "user": "larmon", "body": "php7 is nice"}, {"timstamp": "2016-08-04 15:20", "user": "larmon", "body": "laravel is nice"}], "label": "other"}
{"id": "93d594e6", "body": "", "comments": [{"timstamp": "2018-06-01 15:23", "user": "dgo", "body": "for those under macos, what are your irc client ?"}, {"timstamp": "2018-06-01 15:25", "user": "Pyrrhus666", "body": "thatll do for any OS, I guess ;)"}, {"timstamp": "2018-06-01 15:26", "user": "dgo", "body": "Why should I use subject/observables for data in my service, when I can clear/add an array with the (array) reference shared between components (and use the angular \"magic\" change detection) ?"}, {"timstamp": "2018-06-01 15:27", "user": "Pyrrhus666", "body": "let me know when you find out... I still use shared references."}, {"timstamp": "2018-06-01 15:29", "user": "icebox", "body": "dgo: no reason... indeed ben Lesh recommends you don't reactive everything :)"}, {"timstamp": "2018-06-01 15:31", "user": "dgo", "body": "I tought I will improve my app, but finally this might just add maintenability complexity"}, {"timstamp": "2018-06-01 15:31", "user": "icebox", "body": "agreed"}, {"timstamp": "2018-06-01 15:31", "user": "dgo", "body": "So I guess you are not using ngrx?"}, {"timstamp": "2018-06-01 15:31", "user": "Pyrrhus666", "body": "that was my conclusion too. I tested subjects instead of references..."}, {"timstamp": "2018-06-01 15:32", "user": "Pyrrhus666", "body": "well, I use it sparingly, like with HttpClient. but other than that, not really."}, {"timstamp": "2018-06-01 15:32", "user": "icebox", "body": "dgo: a state manager? it depends on the context... and at the of the day... {} :)"}, {"timstamp": "2018-06-01 15:32", "user": "dgo", "body": "another question, are you using HostListener and HostBinding ? Because I don't, mostly because I don't know them.."}, {"timstamp": "2018-06-01 15:32", "user": "Pyrrhus666", "body": "ah, I read that as rxjs. darn."}, {"timstamp": "2018-06-01 15:33", "user": "dgo", "body": "icebox: Yes, A state manager. For the current logged user, as an example"}, {"timstamp": "2018-06-01 15:33", "user": "Pyrrhus666", "body": "dgo, used them once or twice. when I found out they were handy is those cases :)"}, {"timstamp": "2018-06-01 15:45", "user": "dgo", "body": "for customer authentication, are you still using cookies or are you using JWT ? Until now, I was using JWT (with database check on server side), do you think it is evil ?"}, {"timstamp": "2018-06-01 15:48", "user": "icebox", "body": "dgo:"}, {"timstamp": "2018-06-01 15:48", "user": "Peppa_Swine", "body": "which inkscape"}, {"timstamp": "2018-06-01 15:48", "user": "Peppa_Swine", "body": "oijasdfpoijasdfpoisdjndsacpojnsadc"}, {"timstamp": "2018-06-01 15:48", "user": "icebox", "body": "dgo: not related directly with your last comment... but worthy reading"}, {"timstamp": "2018-06-01 16:08", "user": "Pyrrhus666", "body": "dgo, I use jwt for auth and are happy with it. I dont have sessions at all though ;)"}], "label": "other"}
{"id": "93d59496", "body": "", "comments": [{"timstamp": "2016-10-27 17:56", "user": "dman777_alter", "body": "what generator/scaffoling tool do people use now for angular 1?"}, {"timstamp": "2016-10-27 17:58", "user": "cuebix", "body": "<--- none"}, {"timstamp": "2016-10-27 17:59", "user": "dman777_alter", "body": "having issues with fountainjs"}, {"timstamp": "2016-10-27 17:59", "user": "dman777_alter", "body": "and sourcemaps"}, {"timstamp": "2016-10-27 18:43", "user": "dman777_alter", "body": "man, I need a gulp angular geneerator really bad right now if anyone knows of one besides fountain js"}, {"timstamp": "2016-10-27 18:49", "user": "ngbot", "body": "[angular.js] petebacondarwin pushed 1 new commit to master:"}, {"timstamp": "2016-10-27 18:49", "user": "ngbot", "body": "angular.js/master 74c19f0 Peter Bacon Darwin: chore(version-info): fix `getTaggedVersion`..."}, {"timstamp": "2016-10-27 19:02", "user": "falk0n", "body": "dman777_alter: you can check \"angular seed\", if anyone here can give a better answer I'm all \"eyes\""}, {"timstamp": "2016-10-27 19:54", "user": "dman777_alter", "body": "falk0n: does anglur-seed have a build chain for produciton deployment?"}, {"timstamp": "2016-10-27 20:07", "user": "falk0n", "body": "dman777_alter: I don't think so"}, {"timstamp": "2016-10-27 20:44", "user": "dman777_alter", "body": "does fox still come around on here?"}], "label": "other"}
{"id": "93d59554", "body": "", "comments": [{"timstamp": "2016-08-09 09:42", "user": "ZaraBeep", "body": "hi guys, i have a big ol' combined file with all my ng source files / libraries / etc. and my own scripts, bundle.js"}, {"timstamp": "2016-08-09 09:42", "user": "ZaraBeep", "body": "i include this at the end of the body tag"}, {"timstamp": "2016-08-09 09:43", "user": "ZaraBeep", "body": "someone told me i should seperate libraries and my own scripts, and load the libraries at the top, and my own scripts at the bottom"}, {"timstamp": "2016-08-09 09:43", "user": "ZaraBeep", "body": "is this true? what's your take?"}, {"timstamp": "2016-08-09 09:44", "user": "uru", "body": "ZaraBeep: Personally I use both depending on the project. If it's likely that the 3rd party stuff will be shared across applications or something like that then I'll bundle them seperatly, otherwise one big bundle"}, {"timstamp": "2016-08-09 09:46", "user": "ZaraBeep", "body": "thanks uru!"}, {"timstamp": "2016-08-09 09:52", "user": "ZaraBeep", "body": "uru: what about multiple apps in 1 project? I have a Laravel project in which I have multiple AngularJS modules. should I bundle my dependencies/scripts per ng module, or just one big file ?"}, {"timstamp": "2016-08-09 09:53", "user": "uru", "body": "For that I would personally try having 1 bundle for dependencies, then 1 for each ng app"}, {"timstamp": "2016-08-09 09:54", "user": "ZaraBeep", "body": "gotcha"}, {"timstamp": "2016-08-09 09:55", "user": "Elarcis", "body": "ZaraBeep: depends on the use case, having two or three JS allows the browser to load them concurrently, but the execution order is preserved iirc"}, {"timstamp": "2016-08-09 09:55", "user": "Elarcis", "body": "ZaraBeep: also, when in dev mode, depending on your bundler, it may be interesting to only rebuild the app module and not a giant one with vendor libs that rarely change"}, {"timstamp": "2016-08-09 09:57", "user": "ZaraBeep", "body": "ive just started using gulp for bundling, and for now i do bundle everything every single time i run gulp"}, {"timstamp": "2016-08-09 09:58", "user": "uru", "body": "Yea, there's lots of different ways to approach this. For dev I use systemjs to dynamically include everything"}, {"timstamp": "2016-08-09 09:58", "user": "ZaraBeep", "body": "bundling only the app module will save me some time, ill see how i can optimize it"}], "label": "other"}
{"id": "93d594dc", "body": "", "comments": [{"timstamp": "2017-03-16 21:49", "user": "illug", "body": "This is maybe more of a typescript question, but I'm creating an Angular 2 project and I'm writing an interface. One element in is 'languages':. I would like interfaces to be able to add as many key value types as it wants into it, i.e. 'languages': {'en': 'en.json', 'uk': 'uk.json'....}. What datatype should I declare 'language' as in the interface?"}, {"timstamp": "2017-03-16 21:58", "user": "da_wunder", "body": "illug: i would use languages: Array<Language>, where Language would be { code: string, json: string }"}, {"timstamp": "2017-03-16 21:59", "user": "da_wunder", "body": "illug: but if your languages are static"}, {"timstamp": "2017-03-16 21:59", "user": "illug", "body": "Not 'language': string[]; ?"}, {"timstamp": "2017-03-16 22:00", "user": "illug", "body": "da_wunder, yup - seems more right what you are doing, but it forces me to create a Language class"}, {"timstamp": "2017-03-16 22:00", "user": "da_wunder", "body": "then languages: Language, and then interface Language { en: string, uk: string, ... }"}, {"timstamp": "2017-03-16 22:00", "user": "da_wunder", "body": "illug: nope just interface"}, {"timstamp": "2017-03-16 22:01", "user": "da_wunder", "body": "illug: eg."}, {"timstamp": "2017-03-16 22:01", "user": "da_wunder", "body": "and look those other interfaces on that same folder"}, {"timstamp": "2017-03-16 22:02", "user": "illug", "body": "da_wunder: Ahh ok, thanks. Looks neat :) Something I would do in Java - but I'm getting into TypeScript now"}, {"timstamp": "2017-03-16 22:03", "user": "da_wunder", "body": "illug: np"}, {"timstamp": "2017-03-16 22:17", "user": "illug", "body": "Is there any good documentation libraries such as jsdoc or ng-doc for angular 2?"}, {"timstamp": "2017-03-16 22:17", "user": "da_wunder", "body": "you want to generate some docs ?"}, {"timstamp": "2017-03-16 22:18", "user": "da_wunder", "body": "if so really why, devs can easily just look that code and navigate there to where ever they want"}, {"timstamp": "2017-03-16 22:18", "user": "illug", "body": "TypeDoc might do the trick"}, {"timstamp": "2017-03-16 22:27", "user": "da_wunder", "body": "olleh"}, {"timstamp": "2017-03-16 22:30", "user": "essalprod", "body": "join #angularjs"}, {"timstamp": "2017-03-16 22:30", "user": "essalprod", "body": "#join #angularjs"}, {"timstamp": "2017-03-16 22:30", "user": "da_wunder", "body": "essalprod: in irc commands use / at first"}, {"timstamp": "2017-03-16 22:30", "user": "da_wunder", "body": "essalprod: although you are already joined on this channel :D"}, {"timstamp": "2017-03-16 22:46", "user": "illug", "body": "da_wunder, when I actually implement the language variable, how would I do so? I've created an interface IDeploymentLanguage which is key=string, jsonFile=string. Then in the deployment interface I did language: Array<IdeploymentLanguage>. Now I have an actual implementation file, I thoght I would be able to do -> language: [{'en', 'en.json'}] but it's not working"}, {"timstamp": "2017-03-16 22:46", "user": "illug", "body": "or hmm.. maybe that would be possible if it was a class or something, but not for an interface"}, {"timstamp": "2017-03-16 22:47", "user": "illug", "body": "oh actually it worked"}, {"timstamp": "2017-03-16 22:48", "user": "illug", "body": "language: [{key: 'en', jsonFile:'en.json'}]"}], "label": "other"}
{"id": "93d59531", "body": "", "comments": [{"timstamp": "2017-02-17 13:39", "user": "luukth", "body": "Hello I have a question currently I am using angularjs to perform ajax request's to load a picture inside a bootstrap card. After that I want to run the masonry function to update the grid. This is currently not working the jquery code does not get executed."}, {"timstamp": "2017-02-17 13:41", "user": "Elarcis", "body": "luukth: this is not a question"}, {"timstamp": "2017-02-17 13:42", "user": "luukth", "body": "*how can I make sure the jquery code gets executed?"}, {"timstamp": "2017-02-17 13:43", "user": "Elarcis", "body": "luukth: by coding your thing right is the most natural answer. can we see your code?"}, {"timstamp": "2017-02-17 13:43", "user": "luukth", "body": "Sure let me make a pastebin"}, {"timstamp": "2017-02-17 13:44", "user": "luukth", "body": ""}, {"timstamp": "2017-02-17 13:57", "user": "Elarcis", "body": "luukth: looking"}, {"timstamp": "2017-02-17 13:57", "user": "Elarcis", "body": "ok luukth"}, {"timstamp": "2017-02-17 13:57", "user": "Elarcis", "body": "luukth: while you read this article VERY carefully, i'm going to be nice and fix your code"}, {"timstamp": "2017-02-17 14:08", "user": "Elarcis", "body": "can someone give this to luukth if they come back whil' I'm not here?"}, {"timstamp": "2017-02-17 14:08", "user": "Elarcis", "body": "thanks"}, {"timstamp": "2017-02-17 14:09", "user": "uru", "body": "Elarcis: If they are registered you can use memoserv"}, {"timstamp": "2017-02-17 14:10", "user": "Elarcis", "body": "memoserv?"}, {"timstamp": "2017-02-17 14:10", "user": "uru", "body": "Elarcis: /msg memoserv help"}, {"timstamp": "2017-02-17 14:10", "user": "uru", "body": ";)"}, {"timstamp": "2017-02-17 14:10", "user": "Elarcis", "body": "uru: I don't think they were"}, {"timstamp": "2017-02-17 14:10", "user": "uru", "body": "Oh well"}], "label": "other"}
{"id": "93d594f5", "body": "", "comments": [{"timstamp": "2017-03-07 11:43", "user": "SargoDarya", "body": "Question: Does angular do a copy of an object if I do a one-time-binding?"}, {"timstamp": "2017-03-07 11:44", "user": "Elarcis", "body": "SargoDarya: most likely, yes"}, {"timstamp": "2017-03-07 11:45", "user": "SargoDarya", "body": "Hm... wondering if that might slow down the application."}, {"timstamp": "2017-03-07 11:45", "user": "SargoDarya", "body": "I basically have a large object and it's passed completely to each component via otb"}, {"timstamp": "2017-03-07 11:46", "user": "SargoDarya", "body": "I think that's inefficient but I'm not sure."}, {"timstamp": "2017-03-07 11:46", "user": "Elarcis", "body": "SargoDarya: not sure either, but when in doubt, use a service :P"}, {"timstamp": "2017-03-07 11:46", "user": "SargoDarya", "body": "I would much rather give it only the properties it needs but that would be a refactoring which is out of scope."}, {"timstamp": "2017-03-07 11:46", "user": "SargoDarya", "body": "Not sure if it solves the issue in this case ;)"}, {"timstamp": "2017-03-07 11:48", "user": "icebox", "body": "SargoDarya: I don't think there is copy, I think the cycle is different..."}, {"timstamp": "2017-03-07 11:48", "user": "icebox", "body": "SargoDarya: ah... maybe one-time !== one-way :)"}, {"timstamp": "2017-03-07 11:49", "user": "SargoDarya", "body": "Well, I know. But sending a large object with :: one single large object multiple (600) times?"}, {"timstamp": "2017-03-07 11:50", "user": "heartburn", "body": "SargoDarya: that sounds like you indeed need a service, as Elarcis suggested."}, {"timstamp": "2017-03-07 11:50", "user": "heartburn", "body": "if you gonna share it, put it in a service."}, {"timstamp": "2017-03-07 11:50", "user": "Elarcis", "body": "icebox, SargoDarya: one way, or one time?"}, {"timstamp": "2017-03-07 11:51", "user": "SargoDarya", "body": "one-time"}, {"timstamp": "2017-03-07 11:51", "user": "SargoDarya", "body": "one-time and one-way"}, {"timstamp": "2017-03-07 11:51", "user": "SargoDarya", "body": "Because if it's making a copy we're wasting a shitload of memory."}, {"timstamp": "2017-03-07 11:52", "user": "heartburn", "body": "SargoDarya: if you're not dealing with gigabytes of stuff, that shouldn't be a huge problem tho."}, {"timstamp": "2017-03-07 11:54", "user": "Elarcis", "body": "heartburn: heh, I'm dealing with huge-ass objects, angular.copy had a devasting effect on them :D"}, {"timstamp": "2017-03-07 11:56", "user": "Elarcis", "body": "keka: looks like you're doing the same thing with your keyboard, given the number of misplaced letters :D"}, {"timstamp": "2017-03-07 11:56", "user": "heartburn", "body": "angular.copy has lots of loops and shit, so yeah, makes sense. i was talking rather about the 'boi, did i ran out of memory' kind of issues."}, {"timstamp": "2017-03-07 11:57", "user": "Elarcis", "body": "heartburn: yes, in that case you're safe"}, {"timstamp": "2017-03-07 11:57", "user": "Elarcis", "body": "heartburn: pretty much probably"}, {"timstamp": "2017-03-07 11:57", "user": "heartburn", "body": "almost entirely certainly"}, {"timstamp": "2017-03-07 11:59", "user": "Elarcis", "body": "heartburn: almost"}, {"timstamp": "2017-03-07 11:59", "user": "keka", "body": "do you want to ask me questions"}, {"timstamp": "2017-03-07 11:59", "user": "keka", "body": "to see how much I know about angular?"}, {"timstamp": "2017-03-07 12:00", "user": "heartburn", "body": "keka: which version of angular gives the user acne?"}, {"timstamp": "2017-03-07 12:00", "user": "heartburn", "body": "hint: not 1.x"}, {"timstamp": "2017-03-07 12:00", "user": "keka", "body": "0.0"}, {"timstamp": "2017-03-07 12:01", "user": "heartburn", "body": "wrong answer."}, {"timstamp": "2017-03-07 12:01", "user": "keka", "body": "don't know about acne"}, {"timstamp": "2017-03-07 12:01", "user": "keka", "body": "but 1.6 gave me diharrea"}, {"timstamp": "2017-03-07 12:01", "user": "heartburn", "body": "looks like you didn't know how to cook it right."}, {"timstamp": "2017-03-07 12:05", "user": "keka", "body": "is there an alternative to using $scope?"}, {"timstamp": "2017-03-07 12:05", "user": "keka", "body": "do you sukis use the alternative or scope?"}, {"timstamp": "2017-03-07 12:05", "user": "heartburn", "body": "controllerAs"}, {"timstamp": "2017-03-07 12:06", "user": "keka", "body": "no I mean an alternative to doing $scope.myvar"}, {"timstamp": "2017-03-07 12:07", "user": "heartburn", "body": "this"}, {"timstamp": "2017-03-07 12:07", "user": "heartburn", "body": "also, read up on controllerAs"}, {"timstamp": "2017-03-07 12:07", "user": "keka", "body": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA yes"}, {"timstamp": "2017-03-07 12:07", "user": "keka", "body": "this"}, {"timstamp": "2017-03-07 12:07", "user": "keka", "body": "do you use this or $scope"}, {"timstamp": "2017-03-07 12:08", "user": "heartburn", "body": "i use neither."}, {"timstamp": "2017-03-07 12:08", "user": "keka", "body": ":-O"}, {"timstamp": "2017-03-07 12:08", "user": "keka", "body": "what do you use then"}, {"timstamp": "2017-03-07 12:09", "user": "heartburn", "body": ""}, {"timstamp": "2017-03-07 12:10", "user": "heartburn", "body": "but that doesn't matter in your case. first of all, read up on controllerAs."}, {"timstamp": "2017-03-07 12:11", "user": "keka", "body": "I know everything there is to know about controllers my old tired friend"}, {"timstamp": "2017-03-07 12:12", "user": "heartburn", "body": "well, your questions imply that you don't"}, {"timstamp": "2017-03-07 12:12", "user": "keka", "body": "why"}, {"timstamp": "2017-03-07 12:13", "user": "heartburn", "body": "because if you did, you wouldn't ask about alternatives to $scope"}, {"timstamp": "2017-03-07 12:13", "user": "keka", "body": "why not"}, {"timstamp": "2017-03-07 12:13", "user": "heartburn", "body": "because"}, {"timstamp": "2017-03-07 12:13", "user": "keka", "body": "be more explicit friend, it's like playing hide and seek"}, {"timstamp": "2017-03-07 12:13", "user": "heartburn", "body": "i'm not getting paid for that."}, {"timstamp": "2017-03-07 12:14", "user": "heartburn", "body": "you asked a question, there are some pointers a few messages back. good luck."}, {"timstamp": "2017-03-07 12:14", "user": "keka", "body": "just help because it feels good to help"}, {"timstamp": "2017-03-07 12:14", "user": "keka", "body": "not everything is money"}, {"timstamp": "2017-03-07 12:14", "user": "heartburn", "body": "at this point you're not asking for help, you're whoring for attention."}, {"timstamp": "2017-03-07 12:16", "user": "keka", "body": "I'm a whore?"}, {"timstamp": "2017-03-07 12:18", "user": "keka", "body": "all I'm asking is that you share your knowledge on controllers"}, {"timstamp": "2017-03-07 12:18", "user": "keka", "body": "if it is so"}, {"timstamp": "2017-03-07 12:18", "user": "keka", "body": "don't be an expensive whore you know"}], "label": "other"}
{"id": "93d594d7", "body": "", "comments": [{"timstamp": "2016-10-19 17:38", "user": "_shaggy", "body": "i am new to angular js and i have a element where ng-click =\"function($event)\" but i want to run that from console so any idea, how to do"}, {"timstamp": "2016-10-19 17:38", "user": "_shaggy", "body": "basic elemnt.click is not working"}, {"timstamp": "2016-10-19 17:39", "user": "Felishia", "body": "so electricity is back :("}, {"timstamp": "2016-10-19 17:39", "user": "Felishia", "body": "what's wrung with dis?"}, {"timstamp": "2016-10-19 17:39", "user": "Felishia", "body": "one liner btw"}, {"timstamp": "2016-10-19 17:43", "user": "Felishia", "body": "anyone :("}, {"timstamp": "2016-10-19 17:44", "user": "da_wunder", "body": "Felishia: create plunker to demonstrate your problem"}, {"timstamp": "2016-10-19 17:44", "user": "da_wunder", "body": "with that gist we only see some html, not actual functionality"}, {"timstamp": "2016-10-19 17:44", "user": "Felishia", "body": "da_wunder, really? >.> it's just what it is"}, {"timstamp": "2016-10-19 17:44", "user": "Felishia", "body": "I don't know how to write angular"}, {"timstamp": "2016-10-19 17:48", "user": "rand0m", "body": "_shaggy, you still here"}, {"timstamp": "2016-10-19 17:49", "user": "rand0m", "body": "Felishia, imo you should call a function on ngclick"}, {"timstamp": "2016-10-19 17:49", "user": "rand0m", "body": "which inturn calls whatever you want to do"}, {"timstamp": "2016-10-19 17:53", "user": "Felishia", "body": "rand0m, dat worked thanks"}, {"timstamp": "2016-10-19 17:56", "user": "da_wunder", "body": "or localstorage"}, {"timstamp": "2016-10-19 17:56", "user": "rand0m", "body": "Felishia,"}, {"timstamp": "2016-10-19 17:57", "user": "rand0m", "body": "+ _shaggy"}, {"timstamp": "2016-10-19 17:59", "user": "Felishia", "body": "rand0m, thanks a lot XD your response (imo you should call a function on ngclick) was actually what I needed the most :) it worked when I changed to a function; thing is that, I'm a reactjs programmer..."}, {"timstamp": "2016-10-19 17:59", "user": "Felishia", "body": "someone hired me to mantain an angular codebase"}, {"timstamp": "2016-10-19 17:59", "user": "rand0m", "body": "nice"}, {"timstamp": "2016-10-19 17:59", "user": "Felishia", "body": "*shrugs*"}, {"timstamp": "2016-10-19 17:59", "user": "rand0m", "body": "I wish someone hired me :("}, {"timstamp": "2016-10-19 17:59", "user": "Felishia", "body": "management was like ... react, angular.. same thing!..."}, {"timstamp": "2016-10-19 18:00", "user": "Felishia", "body": "rand0m, :o why not?"}, {"timstamp": "2016-10-19 18:00", "user": "rand0m", "body": "complications"}, {"timstamp": "2016-10-19 18:00", "user": "LIERO_", "body": "oh"}, {"timstamp": "2016-10-19 18:00", "user": "Preuk", "body": "Felishia: both end up in \"js\", so it's like the same name, right ?"}, {"timstamp": "2016-10-19 18:00", "user": "rand0m", "body": "LIERO_ best solution is localstorage"}, {"timstamp": "2016-10-19 18:00", "user": "LIERO_", "body": "if localstorage works with nwjs this is going to be one line of code >.>"}, {"timstamp": "2016-10-19 18:01", "user": "rand0m", "body": "or using a backend like nosql/something else"}, {"timstamp": "2016-10-19 18:02", "user": "rand0m", "body": "if its a mobile app, then it makes sense to use back end service"}, {"timstamp": "2016-10-19 18:02", "user": "da_wunder", "body": "or just read that value on login to localstorage and use it there, and if that value changes just make PUT request to server and store that data again"}, {"timstamp": "2016-10-19 18:03", "user": "Felishia", "body": "localforage"}, {"timstamp": "2016-10-19 18:03", "user": "rand0m", "body": "brb watching tv"}, {"timstamp": "2016-10-19 18:03", "user": "Felishia", "body": ":D"}], "label": "other"}
{"id": "93d5954a", "body": "", "comments": [{"timstamp": "2016-05-15 00:00", "user": "arlekin", "body": "neredsenvy: could you paste code for the tagsInput directive ?"}, {"timstamp": "2016-05-15 00:01", "user": "arlekin", "body": "neredsenvy: it really is simple issue, its just a matter of having place to inject soultion"}, {"timstamp": "2016-05-15 00:01", "user": "neredsenvy", "body": ""}, {"timstamp": "2016-05-15 00:02", "user": "arlekin", "body": "neredsenvy: nah bro, thats the part of the template"}, {"timstamp": "2016-05-15 00:02", "user": "arlekin", "body": "i mean the code"}, {"timstamp": "2016-05-15 00:02", "user": "neredsenvy", "body": "Not my implementation"}, {"timstamp": "2016-05-15 00:03", "user": "arlekin", "body": "oh i see"}, {"timstamp": "2016-05-15 00:03", "user": "arlekin", "body": "which function does your posting ?"}, {"timstamp": "2016-05-15 00:04", "user": "arlekin", "body": "i mean where it is in the controller that you are making your POST to backend ?"}, {"timstamp": "2016-05-15 00:04", "user": "neredsenvy", "body": "I call FilmService.Create()"}, {"timstamp": "2016-05-15 00:04", "user": "arlekin", "body": "ok"}, {"timstamp": "2016-05-15 00:05", "user": "arlekin", "body": "so in the template, in the tags-input tag you have ng-model attribute, right ?"}, {"timstamp": "2016-05-15 00:05", "user": "neredsenvy", "body": "yes"}, {"timstamp": "2016-05-15 00:06", "user": "arlekin", "body": "so the content - in this case film.genre - points to the variable on $scope object thats going to get the value from that tag"}, {"timstamp": "2016-05-15 00:07", "user": "arlekin", "body": "so as it seems that we have no sane way of moidfying the directive itself"}, {"timstamp": "2016-05-15 00:07", "user": "arlekin", "body": "we should change content of the ng-model attribute to some other var - name it as you will - but for the purpose of the discussion say its named genreTags"}, {"timstamp": "2016-05-15 00:08", "user": "arlekin", "body": "so you have ng-model=\"genreTags\", which automagically ensures you do have it on the $scope object"}, {"timstamp": "2016-05-15 00:09", "user": "arlekin", "body": "for the purpose of being explicit you could have it declared in the controller (put somewhere near the top $scope.genreTags = [];)"}, {"timstamp": "2016-05-15 00:10", "user": "arlekin", "body": "then, before you post your film object anywhere, ie before calling FilmService.Create()"}, {"timstamp": "2016-05-15 00:10", "user": "arlekin", "body": "you should do the remap, namely: `$scope.film.genre = $scope.genreTags.map( tag => tag.id );` w"}, {"timstamp": "2016-05-15 00:11", "user": "arlekin", "body": "(or you can be more explicit and conservative and use normal notation for function"}, {"timstamp": "2016-05-15 00:12", "user": "neredsenvy", "body": "hm"}, {"timstamp": "2016-05-15 00:12", "user": "neredsenvy", "body": "lets try it : ))"}, {"timstamp": "2016-05-15 00:12", "user": "arlekin", "body": "that way the variable which is bind with your ui by the holy matrimony of two-way data-binding will keep its shape even after sending request"}, {"timstamp": "2016-05-15 00:13", "user": "arlekin", "body": "but the backend will get fed with the array in form of [(int)] and not [(object)]"}, {"timstamp": "2016-05-15 00:14", "user": "arlekin", "body": "the only real downside i can think of here is that you have to explicitely put the value from genreTags in your film object"}, {"timstamp": "2016-05-15 00:14", "user": "arlekin", "body": "but seeing that you don't have access to the original directive there is no other way really"}, {"timstamp": "2016-05-15 00:15", "user": "arlekin", "body": "well ofcourse if its on github then its open source so one could remedy that issue from within directive, but i assume you'd rather just use what is given"}, {"timstamp": "2016-05-15 00:16", "user": "arlekin", "body": "so, disclaimer that i think it would be best to have directive returning correct format itself, but other that that i think the solution i presented is good enough"}, {"timstamp": "2016-05-15 00:18", "user": "neredsenvy", "body": "Ok so it works as expected but it also appends genreTags to the $scope.film but this is not a problem I think the backend will just ignore it or I can remove it."}, {"timstamp": "2016-05-15 00:19", "user": "neredsenvy", "body": "Fuck yea problem solved"}, {"timstamp": "2016-05-15 00:19", "user": "neredsenvy", "body": "finally"}, {"timstamp": "2016-05-15 00:19", "user": "neredsenvy", "body": "now i can go to bed"}, {"timstamp": "2016-05-15 00:19", "user": "arlekin", "body": "neredsenvy: well if it appends it then you are doing something wrong"}, {"timstamp": "2016-05-15 00:20", "user": "arlekin", "body": "neredsenvy: probably you messed a naming somewhere, if you paste it (both template and controller) i can take a look"}, {"timstamp": "2016-05-15 00:21", "user": "neredsenvy", "body": "Ahh nevermind I know why it appends it"}, {"timstamp": "2016-05-15 00:21", "user": "arlekin", "body": "neredsenvy: good then"}], "label": "other"}
{"id": "93d594f9", "body": "", "comments": [{"timstamp": "2017-10-04 14:09", "user": "jlebrech", "body": "how can I send and recieve events in angular 1 without using rootscope?"}, {"timstamp": "2017-10-04 14:09", "user": "icebox", "body": "jlebrech: you don't need events :)"}, {"timstamp": "2017-10-04 14:10", "user": "jlebrech", "body": "icebox: rootScope is it then :D"}, {"timstamp": "2017-10-04 14:10", "user": "icebox", "body": "jlebrech: no"}, {"timstamp": "2017-10-04 14:10", "user": "jlebrech", "body": "icebox: my reference weren't updating and emitting and event fixed my issue"}, {"timstamp": "2017-10-04 14:10", "user": "icebox", "body": "jlebrech: nah :P"}, {"timstamp": "2017-10-04 14:11", "user": "icebox", "body": "jlebrech: because you are copying and spreading data everywhere :)"}, {"timstamp": "2017-10-04 14:11", "user": "icebox", "body": "jlebrech: use correctly the reference and call the day"}, {"timstamp": "2017-10-04 14:11", "user": "icebox", "body": "jlebrech: Two way data binding pitfalls -"}, {"timstamp": "2017-10-04 14:11", "user": "jlebrech", "body": "im just doing. $ctrl.my_data = Myservice.my_data; Myservice.getData()"}, {"timstamp": "2017-10-04 14:11", "user": "jlebrech", "body": "my data doesn't update"}, {"timstamp": "2017-10-04 14:12", "user": "jlebrech", "body": "stays as undefined"}, {"timstamp": "2017-10-04 14:12", "user": "icebox", "body": "jlebrech: the problem is when you update data"}, {"timstamp": "2017-10-04 14:12", "user": "icebox", "body": "jlebrech: anyway... if you provide a minimal working plunker reproducing your use case, we may fix it"}, {"timstamp": "2017-10-04 14:13", "user": "jlebrech", "body": "ok"}, {"timstamp": "2017-10-04 14:25", "user": "Pyrrhus666", "body": "jlebrech, number is a primitive. only objects support references."}, {"timstamp": "2017-10-04 14:25", "user": "jlebrech", "body": "ok, just trying to keep the plunkr simple"}, {"timstamp": "2017-10-04 14:27", "user": "jlebrech", "body": "Pyrrhus666: ok it's an object now"}, {"timstamp": "2017-10-04 14:28", "user": "Pyrrhus666", "body": "jlebrech, find the difference"}, {"timstamp": "2017-10-04 14:28", "user": "jlebrech", "body": "so, angular extend?"}, {"timstamp": "2017-10-04 14:29", "user": "jlebrech", "body": "shoulda told me about this 2 hours ago :D"}, {"timstamp": "2017-10-04 14:29", "user": "Pyrrhus666", "body": "jlebrech, ?"}, {"timstamp": "2017-10-04 14:30", "user": "jlebrech", "body": "so extend is the same as =, but without that derefereincing thingy"}, {"timstamp": "2017-10-04 14:30", "user": "Pyrrhus666", "body": "jlebrech, I dont use angular.extend."}, {"timstamp": "2017-10-04 14:33", "user": "jlebrech", "body": "oh, it's in that example"}, {"timstamp": "2017-10-04 14:33", "user": "jlebrech", "body": "Pyrrhus666: I made number undefined because in the real example i'm using a promise"}, {"timstamp": "2017-10-04 14:33", "user": "jlebrech", "body": "xhr call*"}], "label": "other"}
{"id": "93d59523", "body": "", "comments": [{"timstamp": "2016-05-26 19:21", "user": "sunimasuno", "body": "though no one promises to answer, we've got a decent track record"}, {"timstamp": "2016-05-26 19:23", "user": "sunimasuno", "body": "We write somewhat more \"functional\" angular over here so we avoid classes for our data to a great extent. The liquid nature of JS data can be an asset depending on your architecture"}, {"timstamp": "2016-05-26 19:24", "user": "sunimasuno", "body": "So really you have a lot of freedom"}, {"timstamp": "2016-05-26 19:28", "user": "sunimasuno", "body": "That's a lot of where we came from, we didn't want to lock the data down other than insofar as it is bound in or out of, which we use to transform our data all over the place. It feels like a \"natural\" fit with angular, but we have a handful of functional people so it could as easily be our minds that fit it"}, {"timstamp": "2016-05-26 19:31", "user": "sunimasuno", "body": "So you can do it just about anywhere, but where you SHOULD do it, in the way \"angular thinks\" is that that should control what data is in the objects you've bound to your view, so somewhere in the JS"}, {"timstamp": "2016-05-26 19:31", "user": "sunimasuno", "body": "and beware, what counts as \"truthy\" and \"falsy\" is much wider than just boolean"}, {"timstamp": "2016-05-26 19:33", "user": "sunimasuno", "body": "so you want to change the class with ng-class?"}, {"timstamp": "2016-05-26 19:34", "user": "sunimasuno", "body": "I still can't really picture what you're trying to do I'm afraid"}, {"timstamp": "2016-05-26 19:37", "user": "sunimasuno", "body": "Now I kinda wanna see an angular project with more of an OO mentality, to see what ideas we're not using ^_^"}, {"timstamp": "2016-05-26 19:38", "user": "Gandalf84", "body": "I have 2 type of <a>, one is poiting to / and one should not have any href because it is used only to open the dropdown"}, {"timstamp": "2016-05-26 19:39", "user": "Gandalf84", "body": "[routerLink]=[/] and [routerLink]=[null]"}, {"timstamp": "2016-05-26 19:39", "user": "Gandalf84", "body": "both produces <a href>"}, {"timstamp": "2016-05-26 19:40", "user": "Gandalf84", "body": "when i refresh the page both will have the class router-link-active"}, {"timstamp": "2016-05-26 19:40", "user": "sunimasuno", "body": "Gandalf84: ok, getting closer, but why have an anchor tag without a reference?"}, {"timstamp": "2016-05-26 19:40", "user": "Gandalf84", "body": "so i dont know which one is really the current page"}, {"timstamp": "2016-05-26 19:41", "user": "Gandalf84", "body": "because my <a> is a menu with a submenu, it is used only to open the submenu"}, {"timstamp": "2016-05-26 19:41", "user": "Gandalf84", "body": "the top menu doesnt have a link to a page"}, {"timstamp": "2016-05-26 19:42", "user": "sunimasuno", "body": "Gandalf84: traditionally we do those with <ul> and <li> like here"}, {"timstamp": "2016-05-26 19:42", "user": "sunimasuno", "body": "specifically to avoid something being seen as a \"link\""}, {"timstamp": "2016-05-26 19:42", "user": "sunimasuno", "body": "jsp"}, {"timstamp": "2016-05-26 19:47", "user": "Gandalf84", "body": "is there a way to do something like"}, {"timstamp": "2016-05-26 19:47", "user": "Gandalf84", "body": "{{ var ? href=/ : <unconvertable> }}"}, {"timstamp": "2016-05-26 19:48", "user": "sunimasuno", "body": "Gandalf84: just wrap that line in a function that takes car as an argument"}, {"timstamp": "2016-05-26 19:48", "user": "sunimasuno", "body": "*var"}, {"timstamp": "2016-05-26 19:48", "user": "Gandalf84", "body": "and how do i call this function from the template?"}, {"timstamp": "2016-05-26 19:48", "user": "sunimasuno", "body": "{{functionName()}}"}, {"timstamp": "2016-05-26 19:48", "user": "Gandalf84", "body": "tnx"}, {"timstamp": "2016-05-26 19:51", "user": "Gandalf84", "body": "sumimasuno: what this function should return?"}, {"timstamp": "2016-05-26 19:51", "user": "Gandalf84", "body": "the string to print or something else?"}, {"timstamp": "2016-05-26 19:56", "user": "Gandalf84", "body": "sunimasumo: it gives me this error"}, {"timstamp": "2016-05-26 19:56", "user": "Gandalf84", "body": "Failed to execute 'setAttribute' on 'Element': 'printLink()' is not a valid attribute name."}, {"timstamp": "2016-05-26 19:56", "user": "Gandalf84", "body": "where printLink is the name of my function"}, {"timstamp": "2016-05-26 19:57", "user": "Gandalf84", "body": "Im working in angular 2"}, {"timstamp": "2016-05-26 19:57", "user": "Gandalf84", "body": "yes it is defined in the component"}, {"timstamp": "2016-05-26 19:57", "user": "sunimasuno", "body": "Gandalf84: oh, well that'll change how I think a bit"}, {"timstamp": "2016-05-26 19:59", "user": "sunimasuno", "body": "So Gandalf84 can you call any functions from your template?"}, {"timstamp": "2016-05-26 19:59", "user": "Gandalf84", "body": "actually im new in anguler 2, i dont know how to call a function inside the template"}, {"timstamp": "2016-05-26 19:59", "user": "sunimasuno", "body": "Ok, that's the root issue there"}, {"timstamp": "2016-05-26 20:00", "user": "Gandalf84", "body": "it seems i can print something inside an attribute class={{value}} but i cannot do <a {{value}}>"}, {"timstamp": "2016-05-26 20:01", "user": "sunimasuno", "body": "Gandalf84: you may wanna drop the 20min on"}, {"timstamp": "2016-05-26 20:01", "user": "sunimasuno", "body": "or"}, {"timstamp": "2016-05-26 20:01", "user": "sunimasuno", "body": "whaaaaat?? the js version isn't out yet? C'mon guys"}, {"timstamp": "2016-05-26 20:02", "user": "sunimasuno", "body": "here Gandalf84"}, {"timstamp": "2016-05-26 20:02", "user": "sunimasuno", "body": "there are a few examples there"}, {"timstamp": "2016-05-26 20:04", "user": "Gandalf84", "body": "Ive figured it out"}, {"timstamp": "2016-05-26 20:04", "user": "Gandalf84", "body": "[href]=myFunction()"}, {"timstamp": "2016-05-26 20:04", "user": "sunimasuno", "body": "^_^ excellent"}], "label": "other"}
{"id": "73af7d20", "body": "", "comments": [{"timstamp": "21:22", "user": "wimpog", "body": "I'm new to Angular. I have this page:"}, {"timstamp": "21:33", "user": "wimpog", "body": "I'm new to Angular. I have this page:"}], "label": "other"}
{"id": "93d594c0", "body": "", "comments": [{"timstamp": "2016-10-18 19:04", "user": "captn_hook", "body": "Question about modifying the DOM. I've been tasked with porting a site to angular2. The site has several pages right now, some of which have a body bg-color of black, and others with the body bg-color set to white. There's no way for components to edit the body styles. So my question is, should I load in DOCUMENT and change the body color that way? Or should I include the html and body tags in my components template"}, {"timstamp": "2016-10-18 19:04", "user": "captn_hook", "body": "Which would therefore give my component css and body tag to match on"}, {"timstamp": "2016-10-18 19:33", "user": "captn_hook", "body": "If my component selector is app-dashboard, shouldn't I be able to include a style with the selector app-dashboard to change the background-color?"}, {"timstamp": "2016-10-18 19:33", "user": "captn_hook", "body": "The view encapsulation is giving the style a separate id than the component"}, {"timstamp": "2016-10-18 19:56", "user": "captn_hook", "body": "If my component selector is app-dashboard, shouldn't I be able to include a style with the selector app-dashboard to change the background-color?"}, {"timstamp": "2016-10-18 19:56", "user": "captn_hook", "body": "The view encapsulation is giving the style a separate id than the component"}], "label": "other"}
{"id": "8addb268", "body": "", "comments": [{"timstamp": "2016-07-07 10:38", "user": "zug_", "body": "I want to always append a <span> after a <select> like this: $('select').after('<span>...</span>'), what is the angular2 way to do this? Create a component with the options as an attribute?"}, {"timstamp": "2016-07-07 10:41", "user": "zug_", "body": "How about the <option> tags?"}, {"timstamp": "2016-07-07 10:42", "user": "zug_", "body": "something like <form-select options=\"{key1 : \"value1\", key2: \"value2\"}\"> ?"}, {"timstamp": "2016-07-07 10:43", "user": "Pyrrhus", "body": "are the option dynamic and generated in angular ?"}, {"timstamp": "2016-07-07 10:43", "user": "zug_", "body": "No, I'd rather use the default syntax"}, {"timstamp": "2016-07-07 10:44", "user": "zug_", "body": "If it is at all possible"}, {"timstamp": "2016-07-07 10:44", "user": "Pyrrhus", "body": "like <my-select><option>...</option></my-select> ? that would be nice, no idea if thats possible..."}, {"timstamp": "2016-07-07 10:44", "user": "zug_", "body": "Well, sometimes they are generated"}, {"timstamp": "2016-07-07 10:44", "user": "zug_", "body": "That would be ideal"}, {"timstamp": "2016-07-07 10:45", "user": "zug_", "body": "Or <option *ngFor=\"..\"> etc."}, {"timstamp": "2016-07-07 10:45", "user": "Pyrrhus", "body": "otherwise just bind them <my-select [options]=arrayofoptions]>"}, {"timstamp": "2016-07-07 10:45", "user": "Pyrrhus", "body": "minus the last ]"}, {"timstamp": "2016-07-07 10:45", "user": "Pyrrhus", "body": "thats the easiest way, and then internally in the component template you can use the *ngFor"}, {"timstamp": "2016-07-07 10:46", "user": "Pyrrhus", "body": "zug_: why ? you can pass anything into the directive you could ever desire ;)"}, {"timstamp": "2016-07-07 10:46", "user": "zug_", "body": "Yes.. but that would limit me in the attributes of the <option> tag"}, {"timstamp": "2016-07-07 10:47", "user": "zug_", "body": "I know.. but it feels like such a big hassle, just to append a span"}, {"timstamp": "2016-07-07 10:47", "user": "Pyrrhus", "body": "zug_: well, you could always simply use jquery, if then span has no added functionality :)"}, {"timstamp": "2016-07-07 10:48", "user": "zug_", "body": "And this solution forces me to alter the select component if I want to do something custom to a single option"}, {"timstamp": "2016-07-07 10:49", "user": "Pyrrhus", "body": "zug_: why not add the span from your template then ? does it have to be dynamic ?"}, {"timstamp": "2016-07-07 10:49", "user": "zug_", "body": "I mean .. I'm open to all options, just wanted to know if I'm missing something in the angular way of thinking"}, {"timstamp": "2016-07-07 10:49", "user": "zug_", "body": "Well, then I have to add a span for each select manually, doesn't seem very DRY"}, {"timstamp": "2016-07-07 10:49", "user": "Pyrrhus", "body": "zug_: I just dont really get what your use-case is. what does the span do ?"}, {"timstamp": "2016-07-07 10:50", "user": "Pyrrhus", "body": "zug_: as DRY as making a <select> tag for every <select> :)"}, {"timstamp": "2016-07-07 10:50", "user": "zug_", "body": "Hehe, I get your point"}, {"timstamp": "2016-07-07 10:50", "user": "zug_", "body": "It's just one example of simple DOM altering, which I learned I'm not supposed to do"}, {"timstamp": "2016-07-07 10:51", "user": "Pyrrhus", "body": "zug_: unless its a component, of course ;)"}, {"timstamp": "2016-07-07 10:51", "user": "zug_", "body": "But in this case, I want to extract the \"placeholder\" attribute of the select, and put it in a span"}, {"timstamp": "2016-07-07 10:52", "user": "zug_", "body": "Simple use-case, but I'm sure I'm facing something like this more often"}, {"timstamp": "2016-07-07 10:52", "user": "zug_", "body": "And I want to get it right :)"}, {"timstamp": "2016-07-07 10:53", "user": "Pyrrhus", "body": "zug_: well, it alters the DOM, so in ng2 terms its a structural directive..."}, {"timstamp": "2016-07-07 10:54", "user": "zug_", "body": "With custom HTML, so a Component, right?"}, {"timstamp": "2016-07-07 10:54", "user": "Pyrrhus", "body": "zug_: yup"}, {"timstamp": "2016-07-07 10:54", "user": "zug_", "body": "Pyrrhus: Thanks a lot"}, {"timstamp": "2016-07-07 10:55", "user": "Elarcis", "body": "Pyrrhus: indexedDB too"}, {"timstamp": "2016-07-07 10:55", "user": "Pyrrhus", "body": "Elarcis: youre right, too modern for me though :)"}, {"timstamp": "2016-07-07 10:55", "user": "Elarcis", "body": "Pyrrhus: I'm not getting much of it though, I just know that we use it XDD"}, {"timstamp": "2016-07-07 10:55", "user": "zug_", "body": "Pyrrhus: Will make a component :)"}, {"timstamp": "2016-07-07 10:56", "user": "Pyrrhus", "body": "Elarcis: hehe :)"}, {"timstamp": "2016-07-07 10:56", "user": "Pyrrhus", "body": "zug_: thats the spirit ;)"}], "label": "feature"}
{"id": "93d594c3", "body": "", "comments": [{"timstamp": "2017-03-07 22:02", "user": "realisation", "body": "I'm trying to write a little directive to detect a file upload and put it into my controllers $scope"}, {"timstamp": "2017-03-07 22:03", "user": "realisation", "body": "I'm a little lost! I've made the directive, attached it to my hidden input, activated the hidden input with a function in my controller and it looks like I'm still missing something to get my directive to notice the file I upload"}, {"timstamp": "2017-03-07 22:04", "user": "heartburn", "body": "$scope.$apply();"}, {"timstamp": "2017-03-07 22:05", "user": "heartburn", "body": "also if i remember correctly you cannot attach a model to input[type=file]"}, {"timstamp": "2017-03-07 22:05", "user": "heartburn", "body": "so you'll have to add an event handler for it"}, {"timstamp": "2017-03-07 22:06", "user": "realisation", "body": "ha whoops there is someone here named ah"}, {"timstamp": "2017-03-07 22:06", "user": "realisation", "body": "so, a jQuery event handler? Or does angular do these things somehow ?"}, {"timstamp": "2017-03-07 22:06", "user": "realisation", "body": "and, $scope.$apply() in the directive?"}, {"timstamp": "2017-03-07 22:06", "user": "realisation", "body": "ah hmm"}, {"timstamp": "2017-03-07 22:07", "user": "realisation", "body": "var onChange = $parse(attrs.ngFiles);"}, {"timstamp": "2017-03-07 22:07", "user": "realisation", "body": "element.on('change', function(event){"}, {"timstamp": "2017-03-07 22:07", "user": "realisation", "body": "onChange(scope, { $files: event.target.files})"}, {"timstamp": "2017-03-07 22:07", "user": "heartburn", "body": "<input type='file' ng-change='$ctrl.readFiles($event)' /> or something similar"}, {"timstamp": "2017-03-07 22:07", "user": "realisation", "body": "})"}, {"timstamp": "2017-03-07 22:07", "user": "realisation", "body": "that's my directive right there"}, {"timstamp": "2017-03-07 22:08", "user": "heartburn", "body": "try wrapping the onChange line in $scope.$apply(function () { onChange(...); });"}, {"timstamp": "2017-03-07 22:08", "user": "realisation", "body": "what do you mean by attaching a model? does a directive contain models?"}, {"timstamp": "2017-03-07 22:09", "user": "realisation", "body": "and what is $ctrl ?"}, {"timstamp": "2017-03-07 22:09", "user": "heartburn", "body": "i mean that <input type=file' ng-model='$ctrl.file' /> wont work"}, {"timstamp": "2017-03-07 22:10", "user": "realisation", "body": "oh okay, gotcha yeah I didn't even try that"}, {"timstamp": "2017-03-07 22:11", "user": "heartburn", "body": "$ctrl is a naming convention for referring to the controller from the vie."}, {"timstamp": "2017-03-07 22:11", "user": "heartburn", "body": "it can be anything thou"}, {"timstamp": "2017-03-07 22:11", "user": "realisation", "body": "where is it defined?"}, {"timstamp": "2017-03-07 22:12", "user": "heartburn", "body": ""}, {"timstamp": "2017-03-07 22:12", "user": "heartburn", "body": "here --^"}, {"timstamp": "2017-03-07 22:12", "user": "heartburn", "body": "also,"}, {"timstamp": "2017-03-07 22:12", "user": "realisation", "body": "okay hmm, looks like wrapping the onChange line in $scope.$apply doesn't work"}, {"timstamp": "2017-03-07 22:13", "user": "realisation", "body": "I'm very new to angular, and I've only written the directive attached to my main app object"}, {"timstamp": "2017-03-07 22:13", "user": "realisation", "body": "do I need to instantiate it anywhere?"}, {"timstamp": "2017-03-07 22:13", "user": "realisation", "body": "I've only got app.directive('ngFiles', [$parse... so forth"}, {"timstamp": "2017-03-07 22:16", "user": "realisation", "body": "I have some console logs in the directive that aren't logging, so something seems out of place"}, {"timstamp": "2017-03-07 22:31", "user": "realisation", "body": "hmmm, I tried to do it without a custom directive by using ng-change, but now ng-change is throwing an error"}], "label": "other"}
{"id": "93d594c2", "body": "", "comments": [{"timstamp": "2018-11-01 12:27", "user": "Tazmain", "body": "ping-pong"}, {"timstamp": "2018-11-01 12:27", "user": "Tazmain", "body": "D:"}, {"timstamp": "2018-11-01 12:27", "user": "Tazmain", "body": ":D"}, {"timstamp": "2018-11-01 12:28", "user": "SuperTyp", "body": ":D"}, {"timstamp": "2018-11-01 13:36", "user": "SuperTyp", "body": "interval(60000).pipe(startWith(0))"}, {"timstamp": "2018-11-01 13:36", "user": "SuperTyp", "body": "tap(// do some stuff and return it)"}, {"timstamp": "2018-11-01 13:36", "user": "SuperTyp", "body": "then in template I use the async pipe"}, {"timstamp": "2018-11-01 13:37", "user": "SuperTyp", "body": "and as startValue I get 0"}, {"timstamp": "2018-11-01 13:37", "user": "SuperTyp", "body": "start value, is that how startWith works?"}, {"timstamp": "2018-11-01 13:37", "user": "SuperTyp", "body": "I was expecting it just to trigger the interval instantly"}, {"timstamp": "2018-11-01 13:39", "user": "SuperTyp", "body": "ok, how can I trigger it instantly?"}, {"timstamp": "2018-11-01 13:40", "user": "Pyrrhus666", "body": "the 0 is emitted instantly, isnt it ?"}, {"timstamp": "2018-11-01 13:41", "user": "SuperTyp", "body": "indeed"}, {"timstamp": "2018-11-01 13:41", "user": "SuperTyp", "body": "I don't want that"}, {"timstamp": "2018-11-01 13:41", "user": "SuperTyp", "body": "I want the observable to emit instantly"}, {"timstamp": "2018-11-01 13:41", "user": "SuperTyp", "body": "and not after 1 minute"}, {"timstamp": "2018-11-01 13:41", "user": "SuperTyp", "body": "but after that every minute"}, {"timstamp": "2018-11-01 13:42", "user": "Pyrrhus666", "body": "but it does that by emitting the 0 instantly, so whats the problem ?"}, {"timstamp": "2018-11-01 13:42", "user": "SuperTyp", "body": "the emitted 0 leads my relativeTime pipe (moment) to use it as a date"}, {"timstamp": "2018-11-01 13:43", "user": "SuperTyp", "body": "means I get \"a few seconds ago\" as result :P"}, {"timstamp": "2018-11-01 13:43", "user": "SuperTyp", "body": "got it"}, {"timstamp": "2018-11-01 13:43", "user": "SuperTyp", "body": "I have to use timer"}, {"timstamp": "2018-11-01 13:43", "user": "SuperTyp", "body": "with dueTime 0 and periodOrScheduler 60000"}, {"timstamp": "2018-11-01 14:21", "user": "Pyrrhus666", "body": "flat in what sense ?"}, {"timstamp": "2018-11-01 14:22", "user": "jlebrech", "body": "car_wheel_add?id=4&spokes=6 rather than car/4/wheels/add?spokes=6"}, {"timstamp": "2018-11-01 14:23", "user": "jlebrech", "body": "because it's easier to search through network logs when it's flat"}], "label": "other"}
{"id": "93d59529", "body": "", "comments": [{"timstamp": "2016-05-26 19:40", "user": "scssquatch", "body": "Hey all, is there a way to determind if an attribute is provided to a directive? Like if the attribute is present on the element?"}, {"timstamp": "2016-05-26 19:40", "user": "scssquatch", "body": "without ruining the binding*"}, {"timstamp": "2016-05-26 19:40", "user": "scssquatch", "body": "basically I want to have a different behavior if the attribute is present. Accessing it through attrs during the link function seems to destroy the 2-way binding"}, {"timstamp": "2016-05-26 19:42", "user": "gho5t", "body": "scssquatch: wouldn't you just check if the binding is undefined?"}, {"timstamp": "2016-05-26 19:42", "user": "gho5t", "body": "maybe I'm wrong. also seems odd that simply checking attrs would invalidate any bidning"}, {"timstamp": "2016-05-26 19:43", "user": "scssquatch", "body": "gho5t: Nah I can't do that because the boundn value might be undefined until it's set"}, {"timstamp": "2016-05-26 19:43", "user": "gho5t", "body": "ok"}, {"timstamp": "2016-05-26 19:43", "user": "gho5t", "body": "scssquatch: and you're saying that simply checking .attrs effects the binding?"}, {"timstamp": "2016-05-26 19:43", "user": "scssquatch", "body": "I could have sample-attr='ctrl.foo' which would be undefined until it's set. I want to know if sample-attr is on the element at all"}, {"timstamp": "2016-05-26 19:44", "user": "scssquatch", "body": "hmm, that seems like a strange hack, but I suppose?"}, {"timstamp": "2016-05-26 19:45", "user": "scssquatch", "body": "But yeah basically if I do element.attr(sampl-attr') != undefined it destroys the binding"}, {"timstamp": "2016-05-26 19:45", "user": "gho5t", "body": "I would doulbe check that"}, {"timstamp": "2016-05-26 19:45", "user": "scssquatch", "body": "okay"}, {"timstamp": "2016-05-26 19:45", "user": "gho5t", "body": "maybe you're causing an error - check the console"}, {"timstamp": "2016-05-26 19:45", "user": "sunimasuno", "body": "scssquatch: yeah, that's news to me, i do some similar things fairly often"}, {"timstamp": "2016-05-26 19:49", "user": "scssquatch", "body": "sunimasuno: confirmed, binding is destroyed"}, {"timstamp": "2016-05-26 19:49", "user": "sunimasuno", "body": "0.o madness"}, {"timstamp": "2016-05-26 19:50", "user": "scssquatch", "body": "not even bound to the directive scope anymore"}, {"timstamp": "2016-05-26 19:50", "user": "sunimasuno", "body": "wait, are you binding over a primitive? Rule of angular, if you ng-anything=\"\" you can't put in a primitive. So it needs \"something.anything\""}, {"timstamp": "2016-05-26 19:51", "user": "scssquatch", "body": "I have `end-date='ctrl.campaign.endDate'` and `scope: { datepickerEnd: '=endDate' }`"}, {"timstamp": "2016-05-26 19:53", "user": "sunimasuno", "body": "man, why's everyone got trubs with passing things into scope, it's the thing I always screw up"}, {"timstamp": "2016-05-26 19:56", "user": "scssquatch", "body": "okay I got rid of it, still not updating bindings now. Yeesh somethings wrong..."}, {"timstamp": "2016-05-26 19:57", "user": "sunimasuno", "body": "is printLink on the scope?"}], "label": "other"}
{"id": "93d594d9", "body": "", "comments": [{"timstamp": "2017-04-10 19:32", "user": "gigo1980", "body": "hi, is anyone using markdown with i18n ?"}, {"timstamp": "2017-04-10 20:15", "user": "gigo1980", "body": "is anyone using showdown with angular 4 ?"}, {"timstamp": "2017-04-10 20:20", "user": "gigo1980", "body": "can i access the content of <my-component>innertext ?</my-component>"}, {"timstamp": "2017-04-10 20:31", "user": "iprime", "body": "gigo1980, you know ng-content?"}, {"timstamp": "2017-04-10 20:33", "user": "gigo1980", "body": "did try it"}, {"timstamp": "2017-04-10 20:40", "user": "gigo1980", "body": "@iprime: is there an man page there ng-content is described ?"}, {"timstamp": "2017-04-10 20:40", "user": "gigo1980", "body": "i did not found an example with inline code"}, {"timstamp": "2017-04-10 20:44", "user": "iprime", "body": "probably"}, {"timstamp": "2017-04-10 20:44", "user": "iprime", "body": "you just add <ng-content></ng-content> in your template then whatever's in <my-component>inner text</my-component> will go to where <ng-content> is"}], "label": "other"}
{"id": "93d59505", "body": "", "comments": [{"timstamp": "2017-02-17 11:45", "user": "sunny", "body": "Hello i need help ui.router"}, {"timstamp": "2017-02-17 11:45", "user": "sunny", "body": "in ui.router"}, {"timstamp": "2017-02-17 11:45", "user": "sunny", "body": "I want to use controller in templateUrl file example about.html"}, {"timstamp": "2017-02-17 11:46", "user": "sunny", "body": "How ?"}, {"timstamp": "2017-02-17 11:47", "user": "sunny", "body": "I have this code : .state('about', {url:'/about',templateUrl: 'about.html'})"}, {"timstamp": "2017-02-17 11:47", "user": "sunny", "body": "routing code"}, {"timstamp": "2017-02-17 11:47", "user": "rand0m", "body": "sunny"}, {"timstamp": "2017-02-17 11:47", "user": "sunny", "body": "but i want to app.controler() in html file"}, {"timstamp": "2017-02-17 11:47", "user": "rand0m", "body": ""}, {"timstamp": "2017-02-17 11:48", "user": "rand0m", "body": "create a sample site you're working on"}, {"timstamp": "2017-02-17 11:48", "user": "rand0m", "body": "and tell us what's wrong"}, {"timstamp": "2017-02-17 11:48", "user": "rand0m", "body": "Ben_1"}, {"timstamp": "2017-02-17 11:48", "user": "rand0m", "body": "you need to run some extra code for charts js me thinks"}, {"timstamp": "2017-02-17 11:48", "user": "rand0m", "body": "wait"}, {"timstamp": "2017-02-17 11:49", "user": "sunny", "body": "<rand0m> help me"}, {"timstamp": "2017-02-17 11:49", "user": "rand0m", "body": "I will help you if you help yourself"}, {"timstamp": "2017-02-17 11:49", "user": "rand0m", "body": "create a plnkr"}, {"timstamp": "2017-02-17 11:49", "user": "rand0m", "body": "and I will look at your code and tell you whats wrong"}, {"timstamp": "2017-02-17 11:50", "user": "rand0m", "body": "found my code"}, {"timstamp": "2017-02-17 11:53", "user": "rand0m", "body": "I love how when I copy my old chat and paste it back, it shows up as quote by me in skype"}, {"timstamp": "2017-02-17 11:55", "user": "rand0m", "body": "when you mean code splitting css what do you mean?"}, {"timstamp": "2017-02-17 11:55", "user": "rand0m", "body": "css modules?"}, {"timstamp": "2017-02-17 11:56", "user": "rand0m", "body": "or refer to my project:"}], "label": "other"}
{"id": "93d59473", "body": "", "comments": [{"timstamp": "2016-10-15 20:47", "user": "supperman2k", "body": "is there an angular2 channel?"}, {"timstamp": "2016-10-15 20:47", "user": "rand0m", "body": "there is supperman2k but I don't know sorry :("}, {"timstamp": "2016-10-15 20:47", "user": "rand0m", "body": "i mean the link"}], "label": "other"}
{"id": "0ec1e515", "body": "", "comments": [{"timstamp": "16:43", "user": "anddam", "body": "can a component A use in its template children components that are subclasses of A?"}, {"timstamp": "16:44", "user": "SargoDarya", "body": "anddam: Should work but in this case it might be better to define an interface."}, {"timstamp": "16:44", "user": "SargoDarya", "body": "Or an abstract base class"}, {"timstamp": "16:46", "user": "anddam", "body": "mm makes sense"}, {"timstamp": "16:58", "user": "anddam", "body": "SargoDarya: declaring the component as abstract class would break the parent componet, wouldn't it?"}, {"timstamp": "16:58", "user": "SargoDarya", "body": "Yes, one way we're doing it is that we have an abstract class implementing everything basic, extend that for the parent and then in the childs implement additional logic"}], "label": "other"}
{"id": "93d594db", "body": "", "comments": [{"timstamp": "2017-10-11 11:16", "user": "Elarcis", "body": "better not to use nodejs as a runtime engine"}, {"timstamp": "2017-10-11 11:17", "user": "Elarcis", "body": ":P"}, {"timstamp": "2017-10-11 11:17", "user": "icebox", "body": "sure :P"}, {"timstamp": "2017-10-11 11:17", "user": "Elarcis", "body": "what became of Node-Chakra?"}, {"timstamp": "2017-10-11 11:18", "user": "icebox", "body": "ah... the bug was in v8..."}, {"timstamp": "2017-10-11 11:18", "user": "icebox", "body": "terrible"}, {"timstamp": "2017-10-11 11:20", "user": "icebox", "body": "anyway three days to understand the problem... a few seconds to fix it... sigh"}, {"timstamp": "2017-10-11 11:21", "user": "Pyrrhus666", "body": "icebox, sounds like me trying to do angular, in general ;)"}, {"timstamp": "2017-10-11 11:21", "user": "icebox", "body": ":P"}, {"timstamp": "2017-10-11 11:21", "user": "icebox", "body": "I was surprised protonmail webclient uses angularjs :)"}, {"timstamp": "2017-10-11 11:22", "user": "Pyrrhus666", "body": "icebox, I am too, now ;)"}, {"timstamp": "2017-10-11 11:23", "user": "icebox", "body": "(and now I need to fix the database)"}, {"timstamp": "2017-10-11 11:24", "user": "icebox", "body": "that is a classic bug the people says js sucks"}, {"timstamp": "2017-10-11 11:24", "user": "Pyrrhus666", "body": "icebox, yup. just use non-sparse arrays as a fix ?"}, {"timstamp": "2017-10-11 11:25", "user": "icebox", "body": "Pyrrhus666: I need to use a one-based index (vs. the common zero-based index) to maintain a porting from fortran code"}, {"timstamp": "2017-10-11 11:26", "user": "Pyrrhus666", "body": "icebox, ah, legacy stuff... how nice."}, {"timstamp": "2017-10-11 11:26", "user": "icebox", "body": "Pyrrhus666: so the first element is always undefined"}, {"timstamp": "2017-10-11 11:27", "user": "icebox", "body": "Pyrrhus666: well... it works nice... if x.shift() works :)"}, {"timstamp": "2017-10-11 11:27", "user": "icebox", "body": "now it is x.shit() :)"}, {"timstamp": "2017-10-11 11:27", "user": "Pyrrhus666", "body": "icebox, hehe :)"}, {"timstamp": "2017-10-11 11:28", "user": "icebox", "body": "wondering the test didn't catch that"}, {"timstamp": "2017-10-11 11:28", "user": "icebox", "body": "bah"}, {"timstamp": "2017-10-11 11:28", "user": "Pyrrhus666", "body": "its quite annoying that low-level stuff just breaks..."}, {"timstamp": "2017-10-11 11:28", "user": "Pyrrhus666", "body": "icebox, I guess the tests dont use sparse arrays..."}, {"timstamp": "2017-10-11 11:28", "user": "icebox", "body": "Pyrrhus666: sparse + floats... with integers it works :)"}, {"timstamp": "2017-10-11 11:29", "user": "Pyrrhus666", "body": "icebox, ah, even more specific..."}, {"timstamp": "2017-10-11 11:29", "user": "icebox", "body": "Pyrrhus666: and that breaks only updating a minor version of node"}, {"timstamp": "2017-10-11 11:30", "user": "icebox", "body": "Pyrrhus666: no changes in the code or in the deps"}, {"timstamp": "2017-10-11 11:30", "user": "icebox", "body": "anyway... I fixed it :)"}, {"timstamp": "2017-10-11 11:31", "user": "icebox", "body": "I can call the day"}, {"timstamp": "2017-10-11 11:45", "user": "icebox", "body": "Pyrrhus666:"}, {"timstamp": "2017-10-11 11:51", "user": "Pyrrhus666", "body": "icebox, haha, no ;)"}, {"timstamp": "2017-10-11 11:59", "user": "SuperTyp", "body": "thx Pyrrhus666"}], "label": "other"}
{"id": "93d5950f", "body": "", "comments": [{"timstamp": "2016-05-11 14:46", "user": "trudko", "body": "How can I change variable value in template"}, {"timstamp": "2016-05-11 14:51", "user": "trudko", "body": "<div ng-switch-when=\"foo\" ng-init=\"key='fookey'\"> didnt work either"}, {"timstamp": "2016-05-11 14:51", "user": "senayar", "body": "what do you want to do exactly trudko ?"}, {"timstamp": "2016-05-11 14:53", "user": "trudko", "body": "senayar: pretty much what is there. I have a code which uses switch to get different value from object (key used in ng switch doesnt match with the keys in object so you cant just do object[key]) , but I need to store the value to use it outside of ng switch"}, {"timstamp": "2016-05-11 14:54", "user": "senayar", "body": "this trudko :"}, {"timstamp": "2016-05-11 14:55", "user": "trudko", "body": "senayar: no, at the end you are writing out someVar but I need value of key"}, {"timstamp": "2016-05-11 14:55", "user": "trudko", "body": "and value of key is changed depending on value of some var (in the example someVar is static, but in the app it is dynamic)"}, {"timstamp": "2016-05-11 14:56", "user": "senayar", "body": "someVar can be anything you want but I don't understand what you need exactly sorry trudko"}, {"timstamp": "2016-05-11 14:57", "user": "trudko", "body": "senayar: I am trying to assign different value to key variable inside of ng switch ({{ key = 'fooKey' }}, {{ key = 'barKey' }})) and at the end I am displaying the value Picked key = {{key}} . Problem is that it displays no value just PIcked key ="}, {"timstamp": "2016-05-11 14:57", "user": "senayar", "body": "maybe this trudko :"}, {"timstamp": "2016-05-11 14:58", "user": "trudko", "body": "I need for it to display Picked key = fooKey or barKey"}, {"timstamp": "2016-05-11 14:58", "user": "trudko", "body": "senayar: no"}, {"timstamp": "2016-05-11 14:58", "user": "trudko", "body": "senayar: once again i need KEY value"}, {"timstamp": "2016-05-11 14:59", "user": "senayar", "body": "why are you complicating this so much trudko ?"}, {"timstamp": "2016-05-11 14:59", "user": "senayar", "body": ""}, {"timstamp": "2016-05-11 14:59", "user": "trudko", "body": "senayar: check again"}, {"timstamp": "2016-05-11 15:00", "user": "arlekin", "body": "senayar: cuz that how he roll B)"}, {"timstamp": "2016-05-11 15:00", "user": "trudko", "body": "because I like self torture"}, {"timstamp": "2016-05-11 15:00", "user": "trudko", "body": "and not it is not what I need to do"}, {"timstamp": "2016-05-11 15:00", "user": "senayar", "body": "you can't assign value inside template"}, {"timstamp": "2016-05-11 15:01", "user": "senayar", "body": "{{ key = 'foo' }} inside view will never work :p"}, {"timstamp": "2016-05-11 15:01", "user": "icebox", "body": "trudko: #5 antipattern :)"}, {"timstamp": "2016-05-11 15:02", "user": "arlekin", "body": "icebox: btw, about this compile solution - it does bypass ng-bind-html, no ?"}, {"timstamp": "2016-05-11 15:03", "user": "icebox", "body": "arlekin: it seems so"}, {"timstamp": "2016-05-11 15:03", "user": "trudko", "body": "I though it would work because you can change value using ng-click directive"}, {"timstamp": "2016-05-11 15:03", "user": "arlekin", "body": "icebox: which kinda makes it potential security flaw"}, {"timstamp": "2016-05-11 15:03", "user": "arlekin", "body": "somehow"}, {"timstamp": "2016-05-11 15:04", "user": "senayar", "body": "maybe this trudko :"}, {"timstamp": "2016-05-11 15:04", "user": "senayar", "body": "I dunno..."}, {"timstamp": "2016-05-11 15:04", "user": "icebox", "body": "arlekin: maybe... it depends on the use case"}, {"timstamp": "2016-05-11 15:04", "user": "arlekin", "body": "icebox: i guess so"}, {"timstamp": "2016-05-11 15:04", "user": "trudko", "body": "senayar: well I cant use buttons the variable is set programatically not by user"}, {"timstamp": "2016-05-11 15:05", "user": "trudko", "body": "nvm I will have to duplicate or move whole thing to controller"}, {"timstamp": "2016-05-11 15:05", "user": "arlekin", "body": "is there some key on js object that would return this object ?"}, {"timstamp": "2016-05-11 15:05", "user": "senayar", "body": ""}, {"timstamp": "2016-05-11 15:06", "user": "trudko", "body": "arlekin: are you asking me?"}, {"timstamp": "2016-05-11 15:06", "user": "icebox", "body": "arlekin: this is this... what do you mean for \"this\" applied to an object?"}, {"timstamp": "2016-05-11 15:06", "user": "arlekin", "body": "im asking anyone"}, {"timstamp": "2016-05-11 15:06", "user": "trudko", "body": "senayar: ?"}, {"timstamp": "2016-05-11 15:07", "user": "arlekin", "body": "icebox: well i just came up with this case that im iterating over properties list to take from object, and i thought it would be fine to return whole object if the there is blank in this list"}, {"timstamp": "2016-05-11 15:07", "user": "senayar", "body": "What change the key value trudko ?"}, {"timstamp": "2016-05-11 15:08", "user": "senayar", "body": "or Who"}, {"timstamp": "2016-05-11 15:08", "user": "trudko", "body": "senayar: business logic"}, {"timstamp": "2016-05-11 15:08", "user": "arlekin", "body": "and i was wondering if i could make it consistent like object['property']"}, {"timstamp": "2016-05-11 15:08", "user": "senayar", "body": "so the value will be change inside controller by one event ?"}, {"timstamp": "2016-05-11 15:08", "user": "arlekin", "body": "icebox: but i guess its not a good idea, and too specific thing to expect that from language"}, {"timstamp": "2016-05-11 15:09", "user": "icebox", "body": "arlekin: do you mean Object.keys() ?"}, {"timstamp": "2016-05-11 15:09", "user": "arlekin", "body": "icebox: more like {self: this}"}, {"timstamp": "2016-05-11 15:09", "user": "icebox", "body": "arlekin:"}, {"timstamp": "2016-05-11 15:09", "user": "trudko", "body": "senayar: its loaded at the begining"}, {"timstamp": "2016-05-11 15:09", "user": "trudko", "body": "from backend"}, {"timstamp": "2016-05-11 15:10", "user": "icebox", "body": "arlekin: well... you have the object... this is the object"}, {"timstamp": "2016-05-11 15:10", "user": "senayar", "body": "ok so the value will never change after the rendering ? trudko"}, {"timstamp": "2016-05-11 15:10", "user": "arlekin", "body": "icebox: i know, nevermind, it was like dead end of my train of thought"}, {"timstamp": "2016-05-11 15:10", "user": "icebox", "body": "arlekin: ok :P"}, {"timstamp": "2016-05-11 15:11", "user": "icebox", "body": "arlekin: unless you was thinking on a general function (maybe a closure) working on a general object"}, {"timstamp": "2016-05-11 15:11", "user": "trudko", "body": "senayar: no"}, {"timstamp": "2016-05-11 15:11", "user": "icebox", "body": "arlekin: a sort of Y combinator"}, {"timstamp": "2016-05-11 15:11", "user": "arlekin", "body": "icebox: i have no idea what are you talking about"}, {"timstamp": "2016-05-11 15:12", "user": "arlekin", "body": "icebox: it would be easy to implement (my idea) though by modifying prototype but thats like terrible idea"}, {"timstamp": "2016-05-11 15:12", "user": "icebox", "body": "arlekin:"}, {"timstamp": "2016-05-11 15:12", "user": "arlekin", "body": "adding new key on one of the basic prototypes would mess iterating and stuff"}, {"timstamp": "2016-05-11 15:12", "user": "senayar", "body": "ok so what is wrong with this :"}, {"timstamp": "2016-05-11 15:13", "user": "arlekin", "body": "i need to read things wrote by crockford, seems like a guy worth reading"}, {"timstamp": "2016-05-11 15:13", "user": "icebox", "body": "arlekin: or maybe you are talking about AOP with decorator and functional mixin :) I cannot read in your mind (yet) :)"}, {"timstamp": "2016-05-11 15:14", "user": "arlekin", "body": "icebox: what you just wrote is only minimally more readable for me than this functionception you linked earlier"}, {"timstamp": "2016-05-11 15:15", "user": "icebox", "body": "arlekin: ok... never mind... maybe I misunderstood your flow"}, {"timstamp": "2016-05-11 15:15", "user": "arlekin", "body": "icebox: though im starting to hate you for ruining my confidence as a programmer :P"}, {"timstamp": "2016-05-11 15:15", "user": "arlekin", "body": "and as a homo sapiens in general come to think about it"}, {"timstamp": "2016-05-11 15:16", "user": "icebox", "body": "arlekin: less is more... so relax :P"}, {"timstamp": "2016-05-11 15:16", "user": "arlekin", "body": "there is lots of extremaly smart people in the field and it kinda blurs the perspective of what is easy and what is not"}, {"timstamp": "2016-05-11 15:17", "user": "arlekin", "body": "so really no programmer can afford an ego i guess"}, {"timstamp": "2016-05-11 15:19", "user": "arlekin", "body": "or maybe im just dumb :D"}], "label": "other"}
{"id": "93d59547", "body": "", "comments": [{"timstamp": "2016-09-08 12:34", "user": "arnas", "body": "in the PhoneCat tutorial's \"Directory and File Organization\" section they say we need to organize the files by feature. But they don't create separate folders for controllers, modules, views, services etc. Is this file organization common in real world apps?"}, {"timstamp": "2016-09-08 12:34", "user": "arlekin", "body": "arnas: hard to say, but by feature doesn't mean separate folders for controllers etc"}, {"timstamp": "2016-09-08 12:36", "user": "arnas", "body": "arlekin, but how to people organize their files in real world apps? Don't they create separate folders for controllers, modules, views etc?"}, {"timstamp": "2016-09-08 12:36", "user": "ngWalrus", "body": "It depends"}, {"timstamp": "2016-09-08 12:36", "user": "ngWalrus", "body": "whatever works"}, {"timstamp": "2016-09-08 12:36", "user": "Pyrrhus666", "body": "arnas: maybe this is enlightening ?"}, {"timstamp": "2016-09-08 12:38", "user": "arnas", "body": "Pyrrhus666,"}, {"timstamp": "2016-09-08 12:38", "user": "Pyrrhus666", "body": "arnas: that would defeat the <unconvertable> by feature <unconvertable> rule"}, {"timstamp": "2016-09-08 12:39", "user": "arnas", "body": "Pyrrhus666, I know, but isn't it better?"}, {"timstamp": "2016-09-08 12:39", "user": "Pyrrhus666", "body": "arnas: the phone-list is a feature, so all code is there."}, {"timstamp": "2016-09-08 12:39", "user": "arlekin", "body": "arnas: no it isn't"}, {"timstamp": "2016-09-08 12:39", "user": "arnas", "body": "so for every new directive I need to create a new folder?"}, {"timstamp": "2016-09-08 12:39", "user": "arlekin", "body": "for the same reasons mvc is absurd"}, {"timstamp": "2016-09-08 12:39", "user": "arlekin", "body": "arnos nope, for every new feature"}, {"timstamp": "2016-09-08 12:39", "user": "Pyrrhus666", "body": "arnas: from experience : jumping around the find partials, controllers and modules that define a feature is HORRIBLE."}, {"timstamp": "2016-09-08 12:40", "user": "arnas", "body": "arlekin, so where do I put a new directive?"}, {"timstamp": "2016-09-08 12:40", "user": "ngWalrus", "body": "what Pyrrhus666 said"}, {"timstamp": "2016-09-08 12:40", "user": "arlekin", "body": "arnas: and even if - you create folder once, you are moving around codebase constantly"}, {"timstamp": "2016-09-08 12:40", "user": "ngWalrus", "body": "I might make a subfolder for partials and shit if I get a lot of them"}, {"timstamp": "2016-09-08 12:40", "user": "Pyrrhus666", "body": "arnas: dont make the same mistake I made 2 years ago ;)"}, {"timstamp": "2016-09-08 12:40", "user": "arnas", "body": "Pyrrhus666, what mistake? creating folder for controllers, components etc.? :D"}, {"timstamp": "2016-09-08 12:41", "user": "arlekin", "body": "arnas: yup"}, {"timstamp": "2016-09-08 12:41", "user": "arnas", "body": "arlekin, so you don't like mvc?"}, {"timstamp": "2016-09-08 12:41", "user": "Pyrrhus666", "body": "arnas: organizing by type first, and usage second. so all partials are in a /partials/* structure for example. it sucks."}, {"timstamp": "2016-09-08 12:42", "user": "Pyrrhus666", "body": "I created a monster, and have no other excuse than that I didnt know any better..."}, {"timstamp": "2016-09-08 12:42", "user": "arlekin", "body": "arnas: its not i dont like it, i just think its pointless"}, {"timstamp": "2016-09-08 12:42", "user": "arnas", "body": "Pyrrhus666, okay, but as I said, what if I create new directive for example, where should I put it?"}, {"timstamp": "2016-09-08 12:42", "user": "arnas", "body": "arlekin, so what do you prefer then?"}, {"timstamp": "2016-09-08 12:42", "user": "arlekin", "body": "arnas: an empty buzzword"}, {"timstamp": "2016-09-08 12:43", "user": "Pyrrhus666", "body": "arnas: that depends. is it a separate feature, or is it a core thing that will be reused ?"}, {"timstamp": "2016-09-08 12:43", "user": "arlekin", "body": "arnas: well i like the componentized approach, but i wouldn't say it instead mvc, but along it"}, {"timstamp": "2016-09-08 12:44", "user": "arnas", "body": "Pyrrhus666, let's say a core feature that will be used once"}, {"timstamp": "2016-09-08 12:44", "user": "arlekin", "body": "arnas: my complaint here is: mvc doesn't really mean that much - whatever you do you take from or store to something your data (model) you have some interface to that (view) and some plumbing between those things (controller, or viewmodel or whatever)"}, {"timstamp": "2016-09-08 12:44", "user": "arnas", "body": "wait.. what's the difference between separate feature and core feature? :D"}, {"timstamp": "2016-09-08 12:44", "user": "arlekin", "body": "arnas: so it doesn't really bring anything to the table"}, {"timstamp": "2016-09-08 12:45", "user": "arnas", "body": "arlekin, well, you have to organize your files somehow.."}, {"timstamp": "2016-09-08 12:45", "user": "Pyrrhus666", "body": "I did not use the term <unconvertable> core feature <unconvertable> ;P"}, {"timstamp": "2016-09-08 12:45", "user": "arnas", "body": "so what's \"core thing\""}, {"timstamp": "2016-09-08 12:45", "user": "arnas", "body": "?"}, {"timstamp": "2016-09-08 12:45", "user": "arlekin", "body": "arnas: and dividing your code horizontally like that is just plain stupid - you very rarely work on some controller only, rarer still on all controllers"}, {"timstamp": "2016-09-08 12:46", "user": "arlekin", "body": "arnas: when you do something you do it for some real world reason, you change or add some functionality"}, {"timstamp": "2016-09-08 12:46", "user": "Pyrrhus666", "body": "if its a basic directive that is reused, but does not define a feature, put it in core. otherwise define it with the feature where it is actually used."}, {"timstamp": "2016-09-08 12:46", "user": "arnas", "body": "so that course on Udemy by Dan Wahlin was probably bad, because that's exactly what he suggested - create separate folder for controllers, views etc."}, {"timstamp": "2016-09-08 12:46", "user": "arlekin", "body": "therefore, details aside, you should structure your code in a way that allows for easy work with particular feature"}, {"timstamp": "2016-09-08 12:47", "user": "arnas", "body": "arlekin, makes sense"}, {"timstamp": "2016-09-08 12:47", "user": "arlekin", "body": "arnas: so at least in my opinion vertical beats horizontal"}, {"timstamp": "2016-09-08 12:47", "user": "arlekin", "body": "arnas: you do have the horizontal separation by nature - database code, api, frontend"}, {"timstamp": "2016-09-08 12:48", "user": "Pyrrhus666", "body": "arnas: check out"}, {"timstamp": "2016-09-08 12:48", "user": "arlekin", "body": "Pyrrhus666: heard good things about John Papa's one"}, {"timstamp": "2016-09-08 12:48", "user": "Pyrrhus666", "body": "(just read the whole thing while your at it ;)"}, {"timstamp": "2016-09-08 12:48", "user": "arnas", "body": "Pyrrhus666, so common folder is like core?"}, {"timstamp": "2016-09-08 12:49", "user": "Pyrrhus666", "body": "arlekin: true. this one is more geared towards component() and an upgrade path to ng2"}, {"timstamp": "2016-09-08 12:49", "user": "Pyrrhus666", "body": "arnas: yes."}, {"timstamp": "2016-09-08 12:49", "user": "arlekin", "body": "arnas: well there is no golden standard AFAIK, just use something reasonable that works for you/ your team"}, {"timstamp": "2016-09-08 12:49", "user": "Pyrrhus666", "body": "arnas: althoug icebox has a thing or two to say about that ;)"}, {"timstamp": "2016-09-08 12:50", "user": "arnas", "body": "arlekin, I want to start using/learning ng1 well and make as few mistakes as possible"}, {"timstamp": "2016-09-08 12:50", "user": "icebox", "body": "arlekin: Todd Motto and John Papa code style guide are very worthy reading"}, {"timstamp": "2016-09-08 12:50", "user": "icebox", "body": "arnas: Todd Motto and John Papa code style guide are very worthy reading"}, {"timstamp": "2016-09-08 12:50", "user": "icebox", "body": "arnas: sorry... mistell"}, {"timstamp": "2016-09-08 12:50", "user": "arnas", "body": "I know :P"}, {"timstamp": "2016-09-08 12:51", "user": "icebox", "body": "arnas: no errors, no learning"}, {"timstamp": "2016-09-08 12:51", "user": "arnas", "body": "icebox, well, I am discussing right now and learning from it"}, {"timstamp": "2016-09-08 12:51", "user": "arnas", "body": "but I agree, errors is a good way to learn, too"}, {"timstamp": "2016-09-08 12:51", "user": "icebox", "body": "arnas: the answers are in those guides"}, {"timstamp": "2016-09-08 12:52", "user": "Pyrrhus666", "body": "icebox: didnt you have some post about the horrors of using a common folder in your project layout, or was that someone else ?"}, {"timstamp": "2016-09-08 12:53", "user": "icebox", "body": "Pyrrhus666: I don't remember"}, {"timstamp": "2016-09-08 12:54", "user": "Pyrrhus666", "body": "icebox: could be someone else, but I remember having a discussion about it here months ago :)"}, {"timstamp": "2016-09-08 12:54", "user": "icebox", "body": "Pyrrhus666: common folder and common module is ok here:"}, {"timstamp": "2016-09-08 12:55", "user": "Pyrrhus666", "body": "icebox: I know, thats how the discussion got started ;) ah well, this way is better than most imho :)"}, {"timstamp": "2016-09-08 12:55", "user": "icebox", "body": "Pyrrhus666: \"common\" means app dependent code, where \"component\" means reusable component in another app"}, {"timstamp": "2016-09-08 12:56", "user": "icebox", "body": "Pyrrhus666: in that context"}, {"timstamp": "2016-09-08 12:56", "user": "icebox", "body": "Pyrrhus666: *\"components\""}, {"timstamp": "2016-09-08 12:57", "user": "Pyrrhus666", "body": "ah yes. imho thats pretty irrelevant in most cases. most code will never be reused as-is in other project. and if it is, you make it a dependency and it will end up in /vendor/ or somesuch directory..."}, {"timstamp": "2016-09-08 13:00", "user": "arnas", "body": ""}, {"timstamp": "2016-09-08 13:01", "user": "arnas", "body": "controller I mean"}, {"timstamp": "2016-09-08 13:01", "user": "icebox", "body": "arnas: maybe... but it is used only in the template"}, {"timstamp": "2016-09-08 13:01", "user": "arnas", "body": "because right now if I do console.log(this.query) it prints undefined"}, {"timstamp": "2016-09-08 13:03", "user": "arnas", "body": "icebox, so how can I access it in the controller?"}, {"timstamp": "2016-09-08 13:03", "user": "icebox", "body": "arnas: add it to the controller"}, {"timstamp": "2016-09-08 13:03", "user": "icebox", "body": "arnas: if you use it"}, {"timstamp": "2016-09-08 13:04", "user": "arnas", "body": "icebox, like through arguments or what?"}, {"timstamp": "2016-09-08 13:04", "user": "icebox", "body": "arnas: no"}, {"timstamp": "2016-09-08 13:04", "user": "icebox", "body": "arnas: this.query = \"\";"}, {"timstamp": "2016-09-08 13:05", "user": "arnas", "body": "icebox, but how do I access the value that's inside the input?"}, {"timstamp": "2016-09-08 13:05", "user": "icebox", "body": "arnas: are you kidding me?"}, {"timstamp": "2016-09-08 13:06", "user": "arnas", "body": "icebox, this just creates a new variable inside the controller. It doesn't let me to access the input"}, {"timstamp": "2016-09-08 13:06", "user": "arnas", "body": "oh, it actually does. :D"}, {"timstamp": "2016-09-08 13:06", "user": "icebox", "body": "arnas: $ctrl.query in the template?"}, {"timstamp": "2016-09-08 13:06", "user": "arnas", "body": "I just wrote this.query = \"aaa\"; and it put the aaa inside the input"}, {"timstamp": "2016-09-08 13:06", "user": "icebox", "body": "arnas: please, read docs and take your time to play with thte code"}, {"timstamp": "2016-09-08 13:06", "user": "arnas", "body": "but shouldn't the controller be called everytime I type in something?"}, {"timstamp": "2016-09-08 13:07", "user": "Pyrrhus666", "body": "arnas: the magic bit is $ctrl = this ;)"}, {"timstamp": "2016-09-08 13:07", "user": "arnas", "body": "Pyrrhus666, I know that"}, {"timstamp": "2016-09-08 13:07", "user": "Pyrrhus666", "body": "arnas: no, this is just variable binding."}, {"timstamp": "2016-09-08 13:09", "user": "arnas", "body": "Pyrrhus666, so is it possible to access the value after I type in to the input field?"}, {"timstamp": "2016-09-08 13:09", "user": "icebox", "body": "Pyrrhus666: it would be interesting a bot searching text in channel logs :)"}, {"timstamp": "2016-09-08 13:09", "user": "Pyrrhus666", "body": "icebox: certainly :)"}, {"timstamp": "2016-09-08 13:10", "user": "Pyrrhus666", "body": "arnas: yes. the value in the input is bound to $ctrl.query, which is essentially this.query as seen from the controller. it is bound 2-way, so whereever you change it, it will reflect on the <unconvertable> other side <unconvertable>"}, {"timstamp": "2016-09-08 13:11", "user": "arnas", "body": "Pyrrhus666, but if I write console.log(this.query) inside the controller, it prints the value only once"}, {"timstamp": "2016-09-08 13:11", "user": "Pyrrhus666", "body": "arnas: if you put {{$ctrl.query}} somewhere in the template you can see the value change as you type."}, {"timstamp": "2016-09-08 13:11", "user": "arnas", "body": "Pyrrhus666, I know, already tried that"}, {"timstamp": "2016-09-08 13:11", "user": "Pyrrhus666", "body": "arnas: yes, because the controller is called once, as it is contstructed."}, {"timstamp": "2016-09-08 13:12", "user": "icebox", "body": "arnas: if you need to do something when the value is changed, you may use ng-change"}, {"timstamp": "2016-09-08 13:12", "user": "icebox", "body": "arnas: or a key handler"}, {"timstamp": "2016-09-08 13:12", "user": "arnas", "body": "icebox, oh, so like ng-change=\"foo()\" and then create a function foo inside the controller?"}, {"timstamp": "2016-09-08 13:13", "user": "Pyrrhus666", "body": "arnas: yes."}, {"timstamp": "2016-09-08 13:13", "user": "arnas", "body": "ok, thanks :) it makes sense now"}, {"timstamp": "2016-09-08 13:14", "user": "Pyrrhus666", "body": "arnas: the controller sets up the scope as it is constructed, with variables and function etc. after its constructed, thats all available from the template."}, {"timstamp": "2016-09-08 13:15", "user": "arnas", "body": "Pyrrhus666, and where would be a \"correct\" place to define a function that I would use for ng-change? inside the controller?"}, {"timstamp": "2016-09-08 13:16", "user": "Pyrrhus666", "body": "arnas: yes. because the controller+template defines the scope in which this function is used."}, {"timstamp": "2016-09-08 13:16", "user": "arnas", "body": "Pyrrhus666, what if I am going to use this function in 3 different templates? It would be stupid to define the same function in 3 different controllers"}, {"timstamp": "2016-09-08 13:18", "user": "Pyrrhus666", "body": "arnas: then youd probably make a directive of the whole thing (controller logic + template) and reuse _that_."}, {"timstamp": "2016-09-08 13:18", "user": "Pyrrhus666", "body": "arnas: for now, I wouldnt yet concern yourself with that :)"}, {"timstamp": "2016-09-08 13:20", "user": "arnas", "body": "Pyrrhus666, fine :D thanks"}], "label": "other"}
{"id": "93d59511", "body": "", "comments": [{"timstamp": "2018-05-14 11:22", "user": "SuperTyp", "body": "I've read \"doggo\""}, {"timstamp": "2018-05-14 11:22", "user": "SuperTyp", "body": "I want a doggo in my office"}, {"timstamp": "2018-05-14 11:22", "user": "Pyrrhus666", "body": "SuperTyp, I want six cats."}, {"timstamp": "2018-05-14 11:23", "user": "SuperTyp", "body": "I'd be happy with one"}], "label": "other"}
{"id": "93d594bc", "body": "", "comments": [{"timstamp": "2016-05-28 11:05", "user": "SET001", "body": "or ; )"}, {"timstamp": "2016-05-28 11:05", "user": "SET001", "body": "try || maybe?"}], "label": "other"}
{"id": "93d59489", "body": "", "comments": [{"timstamp": "2016-06-08 21:11", "user": "hellosss", "body": "can someone see if there is something wrong with the code to my button?"}, {"timstamp": "2016-06-08 21:14", "user": "plong0", "body": "hellosss: wtf are you doing man?!! haha see the red boxes on the side of your app.js view :P"}, {"timstamp": "2016-06-08 21:14", "user": "hellosss", "body": "plong0: i know their are some errors with the )}"}, {"timstamp": "2016-06-08 21:14", "user": "plong0", "body": "* syntax errors *"}, {"timstamp": "2016-06-08 21:14", "user": "hellosss", "body": "plong0: but its not like that in my editer cuz i have a lot of more functions in that one"}, {"timstamp": "2016-06-08 21:14", "user": "hellosss", "body": "i was to lazy to fix it before i uploaded it here"}, {"timstamp": "2016-06-08 21:15", "user": "hellosss", "body": "14h with the same problem causes lazyness"}, {"timstamp": "2016-06-08 21:15", "user": "sonda", "body": "it causes giddiness :)"}, {"timstamp": "2016-06-08 21:16", "user": "plong0", "body": "hellosss: ya I know what you mean. and the generally means its time for a break ;) you know sleep helps the brain work a lot better :P"}, {"timstamp": "2016-06-08 21:17", "user": "hellosss", "body": "haha proberbly, but i cant let it be. Otherwise i will just lay in my bed trying to figure out how to solve it lol"}, {"timstamp": "2016-06-08 21:18", "user": "sonda", "body": "i was working with nvd3 module .. and my mistake was instead of chart.data=[{key: \"blabla\" , values: values}] , i gave it chart.data= {key: \"blabla\" , values: values}"}, {"timstamp": "2016-06-08 21:18", "user": "sonda", "body": "i took 3 hours to recognise"}, {"timstamp": "2016-06-08 21:18", "user": "plong0", "body": "hellosss: I fixed syntax errors =>"}, {"timstamp": "2016-06-08 21:21", "user": "sonda", "body": "but javascript is fun language"}, {"timstamp": "2016-06-08 21:21", "user": "hellosss", "body": "plong0: thank you. I tryied it but still nothing happends when i press on the button"}, {"timstamp": "2016-06-08 21:22", "user": "sonda", "body": "one thing i never understood about javascript is when it does pass by value and when pass by reference"}, {"timstamp": "2016-06-08 21:22", "user": "plong0", "body": "hellosss: well... unless /adminapi/room_type is on the plnkr.co server ... what do you expect?"}, {"timstamp": "2016-06-08 21:22", "user": "hellosss", "body": "plong0: I copied to my localhost"}, {"timstamp": "2016-06-08 21:22", "user": "hellosss", "body": "and tried"}, {"timstamp": "2016-06-08 21:22", "user": "hellosss", "body": "I can upload that route"}, {"timstamp": "2016-06-08 21:22", "user": "plong0", "body": "what do you see in your Developer Tools > Network tab ?"}, {"timstamp": "2016-06-08 21:23", "user": "Fenikkusu", "body": "sonda, research javascript dot notation."}, {"timstamp": "2016-06-08 21:23", "user": "hellosss", "body": "room_type 404 plong0"}, {"timstamp": "2016-06-08 21:23", "user": "sonda", "body": "sorry.. are you talking about ecma 6 or something"}, {"timstamp": "2016-06-08 21:23", "user": "hellosss", "body": "and I can't understand why"}, {"timstamp": "2016-06-08 21:24", "user": "plong0", "body": "hellosss: Request URL:"}, {"timstamp": "2016-06-08 21:24", "user": "Fenikkusu", "body": "sonda, no. Just javascript dot notation. It's the basics of by-ref/by-val in javascript."}, {"timstamp": "2016-06-08 21:24", "user": "plong0", "body": "say you copied it to your localhost ... what you get as Request URL for ir?"}, {"timstamp": "2016-06-08 21:25", "user": "plong0", "body": ""}, {"timstamp": "2016-06-08 21:25", "user": "hellosss", "body": "plong0: was not found on server"}, {"timstamp": "2016-06-08 21:25", "user": "sonda", "body": "ok"}, {"timstamp": "2016-06-08 21:25", "user": "hellosss", "body": "plong0: But it shouldn't go to a file, it should be routed"}, {"timstamp": "2016-06-08 21:26", "user": "plong0", "body": "ok. so the problem is with your server-side code ... not with angular"}, {"timstamp": "2016-06-08 21:26", "user": "plong0", "body": "your angular snippet here is working fine... making the http requests as expected"}, {"timstamp": "2016-06-08 21:26", "user": "plong0", "body": "you need to debug your server api"}, {"timstamp": "2016-06-08 21:26", "user": "hellosss", "body": "Okey"}, {"timstamp": "2016-06-08 21:26", "user": "hellosss", "body": "Thank you for the debugging"}, {"timstamp": "2016-06-08 21:26", "user": "plong0", "body": "no worries"}, {"timstamp": "2016-06-08 21:26", "user": "hellosss", "body": "I try to go back to #laravel even though they have send me here twice :)"}, {"timstamp": "2016-06-08 21:27", "user": "plong0", "body": "and for debugging requests besides GET, check the Postman extension"}, {"timstamp": "2016-06-08 21:27", "user": "plong0", "body": "lol. tell them your angular code is making the requests just fine"}, {"timstamp": "2016-06-08 21:27", "user": "plong0", "body": "and that even if you access the api directly from browser, you get the not found"}, {"timstamp": "2016-06-08 21:27", "user": "plong0", "body": "that eliminates angular from the problem"}, {"timstamp": "2016-06-08 21:28", "user": "plong0", "body": "hellosss: just to kill the obvious variable too <unconvertable> is your server actually running on localhost?"}, {"timstamp": "2016-06-08 21:29", "user": "hellosss", "body": "plong0: what do you mean?"}, {"timstamp": "2016-06-08 21:29", "user": "plong0", "body": "Ive had that after long debugging stretches where the most obvious friggin thing I overlooked and ended up looking every where else"}, {"timstamp": "2016-06-08 21:29", "user": "hellosss", "body": "plong0: i think you are on your way accutalyl"}, {"timstamp": "2016-06-08 21:30", "user": "hellosss", "body": "i tried to restructure that one"}, {"timstamp": "2016-06-08 21:30", "user": "hellosss", "body": "i changed it to"}, {"timstamp": "2016-06-08 21:30", "user": "plong0", "body": "hellosss: I mean, is your localhost web server actually up and running? ("}, {"timstamp": "2016-06-08 21:30", "user": "hellosss", "body": ""}, {"timstamp": "2016-06-08 21:30", "user": "hellosss", "body": "and now it looks like something is happening"}, {"timstamp": "2016-06-08 21:30", "user": "hellosss", "body": "i got a long sql line"}, {"timstamp": "2016-06-08 21:31", "user": "plong0", "body": "haha well I dunno anything about laravel ... but ya... debug your server-side api and make sure youre making the right requests ;)"}, {"timstamp": "2016-06-08 21:31", "user": "hellosss", "body": "omg this might be the solution, gimme 5 min i will change the url"}, {"timstamp": "2016-06-08 22:02", "user": "plong0", "body": "hellosss: :D glad you got it solved!"}], "label": "other"}
{"id": "8addb266", "body": "", "comments": [{"timstamp": "2017-05-11 14:48", "user": "oded", "body": "How can I use a forked angular repo in my package.json? It seems to require a build to be used (no version specified)"}, {"timstamp": "2017-05-11 14:53", "user": "oded", "body": "Anybody?"}, {"timstamp": "2017-05-11 14:56", "user": "Elarcis", "body": "oded: you can manually set a git repo rather than a version number iun your package.json"}, {"timstamp": "2017-05-11 14:57", "user": "oded", "body": "Elarcis: I did, I'm getting: \"npm ERR! No version provided in package.json\""}, {"timstamp": "2017-05-11 14:57", "user": "Elarcis", "body": "oded: see"}, {"timstamp": "2017-05-11 14:57", "user": "Elarcis", "body": "oded: well then you did it wrong :P"}, {"timstamp": "2017-05-11 14:57", "user": "oded", "body": "No.... angular doesn't specify a version in package.json"}, {"timstamp": "2017-05-11 14:57", "user": "Elarcis", "body": "oded: show us your package.json"}, {"timstamp": "2017-05-11 14:57", "user": "oded", "body": "only the packaged release has a version (which is probably what they upload to npm)"}, {"timstamp": "2017-05-11 14:58", "user": "Elarcis", "body": "oded: you're not clear"}, {"timstamp": "2017-05-11 14:58", "user": "oded", "body": "Elarcis: look here:"}, {"timstamp": "2017-05-11 14:58", "user": "oded", "body": "There is no version, so npm doesn't want to install it"}, {"timstamp": "2017-05-11 14:59", "user": "oded", "body": "My package.json specifies: \"angular\": \"odedniv/angular.js\""}, {"timstamp": "2017-05-11 15:10", "user": "Elarcis", "body": "oded: okay, that got out of the scope, but my question is: is your fork meant to fix a feature or provide a custom implementation of an angularjs native feature?"}, {"timstamp": "2017-05-11 15:11", "user": "oded", "body": "Elarcis: yes, I'm also creating a PR now, but I'm not sure it will be accepted. Either way until it goes into mainstream I want to use my fork"}, {"timstamp": "2017-05-11 15:12", "user": "Elarcis", "body": "oded: okay I guess ,though I'm just mentionning you could have made your custom param serializer without necessarily forking the whole of angularjs"}, {"timstamp": "2017-05-11 15:13", "user": "Elarcis", "body": "oded: back to your issue... I don't really know why your thing doesn't work, have never worked with git repos"}, {"timstamp": "2017-05-11 15:17", "user": "Elarcis", "body": "oded: or you could have used a decorator:"}, {"timstamp": "2017-05-11 15:17", "user": "oded", "body": "Elarcis: no worries, I added in version in my fork (I don't care about pushing -f to it)"}, {"timstamp": "2017-05-11 15:18", "user": "oded", "body": "Elarcis: I want to try to PR it and if it gets rejected I may as well create a custom serializer (though I prefer to stay mainstream)"}, {"timstamp": "2017-05-11 15:18", "user": "Elarcis", "body": "oded: it's not my project, I'm not worried :P"}, {"timstamp": "2017-05-11 15:18", "user": "Elarcis", "body": "oded: what's the issue with the native one exactly?"}, {"timstamp": "2017-05-11 15:20", "user": "oded", "body": ""}, {"timstamp": "2017-05-11 15:33", "user": "Elarcis", "body": "oded: interesting... although JS arrays definitely are objects with numeric keys, just typed"}, {"timstamp": "2017-05-11 15:33", "user": "oded", "body": "Elarcis: well... they aren't, an object has different methods... it's not the same type"}, {"timstamp": "2017-05-11 15:33", "user": "oded", "body": "they could be, but they aren't"}, {"timstamp": "2017-05-11 15:38", "user": "heartburn", "body": "oded: what are you trying to do tho?"}, {"timstamp": "2017-05-11 15:39", "user": "heartburn", "body": "i mean, maybe there's a way to do it w/o forking"}, {"timstamp": "2017-05-11 15:39", "user": "Elarcis", "body": "oded: turns out, if you create an object with numeric keys, do __proto__ = Array.prototype on it and give it a length property with a set value... well the console tool is fooled and thinks that's an array :D"}, {"timstamp": "2017-05-11 15:40", "user": "heartburn", "body": "derp, missed the link"}, {"timstamp": "2017-05-11 15:40", "user": "Elarcis", "body": "heartburn: it's currently a PR being reviewed, so the fork has a purpose"}, {"timstamp": "2017-05-11 15:42", "user": "Elarcis", "body": "ok not completely an array, the length calculation gets derpy"}, {"timstamp": "2017-05-11 15:46", "user": "oded", "body": "I guess __proto__ is how JS decides where the methods of the object reside, but doing that is a strong patch"}, {"timstamp": "2017-05-11 15:47", "user": "oded", "body": "Ultimately you are right, an array is an object with continuos numeric keys, but technically that's not how it goes. And the problem is not with deserialization in JS, it's actually the deserialization on the receiving end that bothers me"}], "label": "feature"}
{"id": "93d59494", "body": "", "comments": [{"timstamp": "2017-07-26 09:51", "user": "sadme", "body": "i am starting a collection of loose leaf teas"}, {"timstamp": "2017-07-26 09:51", "user": "xhd", "body": "sadme: i highly recommend white tea. it is superior!"}, {"timstamp": "2017-07-26 09:52", "user": "xhd", "body": "the health benefits of loose leaf white tea is-- i swear...>.>"}, {"timstamp": "2017-07-26 09:52", "user": "sadme", "body": "actually i think technically none of what i have is 'tea'.. i have rooibos, peppermint, and spearmint"}, {"timstamp": "2017-07-26 09:52", "user": "SargoDarya", "body": "xhd: Nah, quiz music game is smooth jazz and lounge. Fits more to it"}, {"timstamp": "2017-07-26 09:52", "user": "sadme", "body": "what kind of white teas do you recommend?"}, {"timstamp": "2017-07-26 09:52", "user": "xhd", "body": "that makes sense SargoDarya"}, {"timstamp": "2017-07-26 09:53", "user": "SargoDarya", "body": "xhd: Category selection"}, {"timstamp": "2017-07-26 09:53", "user": "xhd", "body": "sadme:"}, {"timstamp": "2017-07-26 09:54", "user": "Elarcis", "body": "SargoDarya: wait, you're a composer?"}, {"timstamp": "2017-07-26 09:54", "user": "xhd", "body": "SargoDarya: its like being in a coffee shop with a happy atmosphere"}, {"timstamp": "2017-07-26 09:54", "user": "SargoDarya", "body": "That ones not from me but I'm using that"}, {"timstamp": "2017-07-26 09:54", "user": "xhd", "body": "Elarcis:"}, {"timstamp": "2017-07-26 09:54", "user": "SargoDarya", "body": "But yes, I also compose"}, {"timstamp": "2017-07-26 09:55", "user": "sadme", "body": "cool xhd ! thanks"}, {"timstamp": "2017-07-26 09:55", "user": "xhd", "body": "pleashure sadme :> twinnings is tea in the bag but its a good brand if you just want to get a taste for teas before getting the more expensive leaves"}, {"timstamp": "2017-07-26 09:56", "user": "Elarcis", "body": "SargoDarya: HAAA, YOU HAVE LONG HAIR"}, {"timstamp": "2017-07-26 09:56", "user": "xhd", "body": "sadme:"}, {"timstamp": "2017-07-26 09:56", "user": "Elarcis", "body": "SargoDarya: I don't like you anymore."}, {"timstamp": "2017-07-26 09:56", "user": "SargoDarya", "body": "Elarcis: Had"}, {"timstamp": "2017-07-26 09:56", "user": "Elarcis", "body": "SargoDarya: oh, I still like you then :P"}, {"timstamp": "2017-07-26 09:56", "user": "SargoDarya", "body": "xhd:"}, {"timstamp": "2017-07-26 09:56", "user": "xhd", "body": "Elarcis: are you jealous of his weave?"}, {"timstamp": "2017-07-26 09:57", "user": "xhd", "body": "thank you SargoDarya :D playlist for the day is set"}, {"timstamp": "2017-07-26 09:57", "user": "SargoDarya", "body": "That's only 2 things though and one is highly melancholic"}, {"timstamp": "2017-07-26 09:57", "user": "xhd", "body": "SargoDarya: did you make those yourself?"}, {"timstamp": "2017-07-26 09:57", "user": "Elarcis", "body": "xhd: having myself an haircut qualified as \"improbable\" by some friends, not at all!"}, {"timstamp": "2017-07-26 09:57", "user": "xhd", "body": "Elarcis: what do you have?"}, {"timstamp": "2017-07-26 09:57", "user": "Elarcis", "body": "xhd: well, hair, mostly"}, {"timstamp": "2017-07-26 09:58", "user": "SargoDarya", "body": "lol"}, {"timstamp": "2017-07-26 09:58", "user": "xhd", "body": "Elarcis: you don't say..."}, {"timstamp": "2017-07-26 10:01", "user": "Elarcis", "body": "xhd: I don't know how to describe it, imho it's average, it just has volume"}, {"timstamp": "2017-07-26 10:01", "user": "SargoDarya", "body": "Man, a friend of mine is an amazing composer. So jealous of that guy."}, {"timstamp": "2017-07-26 10:01", "user": "xhd", "body": "SargoDarya: i like both but i just think the build up in the WIP should come as a teaser for a couple of seconds, go away, be gentle again and then build up again to the climax of the song before going more silent again. currently it builds up and stays strong constantly."}, {"timstamp": "2017-07-26 10:02", "user": "Elarcis", "body": "SargoDarya: heh, I'd love to be able to be able to make tunes out of my head, I just don't have time for it"}, {"timstamp": "2017-07-26 10:02", "user": "xhd", "body": "its good too dont get me wrong. its just personal preference i guess. SargoDarya"}, {"timstamp": "2017-07-26 10:02", "user": "SargoDarya", "body": "Elarcis: I'm sometimes sitting at my Keyboard at 2am."}, {"timstamp": "2017-07-26 10:02", "user": "Elarcis", "body": "SargoDarya: also, I have mostly symphonic/sountrack inspirations, you can guess how \"easy\" it is to realize by yourself"}, {"timstamp": "2017-07-26 10:03", "user": "SargoDarya", "body": "Elarcis: It's just tons of instruments. I love soundtrack stuff."}, {"timstamp": "2017-07-26 10:03", "user": "xhd", "body": "Elarcis: like marge simpson?"}, {"timstamp": "2017-07-26 10:03", "user": "Elarcis", "body": "SargoDarya: dunno about you, but I love most of Chris Tilton's works"}, {"timstamp": "2017-07-26 10:03", "user": "xhd", "body": "i like cowboy music."}, {"timstamp": "2017-07-26 10:04", "user": "Elarcis", "body": "xhd: you redneck"}, {"timstamp": "2017-07-26 10:04", "user": "SargoDarya", "body": "Still loving the inception soundtrack. hans zimmer is a genius."}, {"timstamp": "2017-07-26 10:04", "user": "xhd", "body": "Elarcis:"}, {"timstamp": "2017-07-26 10:04", "user": "Elarcis", "body": "SargoDarya: as well, even though I always mistake him for Alan Silvestry"}], "label": "other"}
{"id": "0edea3b2", "body": "", "comments": [{"timstamp": "14:15", "user": "stennowork", "body": "it doesn't have to be html"}, {"timstamp": "14:15", "user": "stennowork", "body": "btw"}, {"timstamp": "14:15", "user": "stennowork", "body": "or does it?"}, {"timstamp": "14:15", "user": "Pyrrhus666", "body": "I think it is"}, {"timstamp": "14:15", "user": "stennowork", "body": "i mean i could render arbitrary data"}, {"timstamp": "14:15", "user": "Pyrrhus666", "body": "ah yes, true"}, {"timstamp": "14:15", "user": "Pyrrhus666", "body": "but looking at UI, it's html"}, {"timstamp": "14:15", "user": "stennowork", "body": "its usually used to render html :D"}], "label": "other"}
{"id": "93d59515", "body": "", "comments": [{"timstamp": "2016-05-26 16:09", "user": "Jeroen2", "body": "how can I bind scope data to my html? <directive-name data=\"SCOPEDATA\"></directive-name>?"}, {"timstamp": "2016-05-26 16:12", "user": "Fenikkusu", "body": "Jeroen2, can you be more specific please."}, {"timstamp": "2016-05-26 16:13", "user": "Jeroen2", "body": "I have data in $scope.myData1 and $scope.myData2 in my mainController. In my main.html I do want to start objects <direct-name data=$scope.myData1\"></directive-name> <direct-name date=\"$scope.myData2\"></directive>"}, {"timstamp": "2016-05-26 16:13", "user": "Jeroen2", "body": "but how can Id o that?"}, {"timstamp": "2016-05-26 16:14", "user": "Jeroen2", "body": "as I do want to make a directive with scope { dataObject: '=data\" }"}, {"timstamp": "2016-05-26 16:16", "user": "Fenikkusu", "body": "Jeroen2, .directive(...return {link : function(...){}, scope:{ data: '='}) is the easiest way I know of."}, {"timstamp": "2016-05-26 16:16", "user": "Fenikkusu", "body": "Basic directive two-way binding."}, {"timstamp": "2016-05-26 16:16", "user": "Jeroen2", "body": "yes but what do I have to put in stead of $scope.myData1?"}, {"timstamp": "2016-05-26 16:16", "user": "Jeroen2", "body": "in the HTML"}, {"timstamp": "2016-05-26 16:16", "user": "Jeroen2", "body": "or is that what it should be?"}, {"timstamp": "2016-05-26 16:17", "user": "Jeroen2", "body": "data=\"myData1\" <= is all I've to do? 0.o"}, {"timstamp": "2016-05-26 16:17", "user": "sunimasuno", "body": "yeah"}, {"timstamp": "2016-05-26 16:17", "user": "Jeroen2", "body": "omg"}, {"timstamp": "2016-05-26 16:17", "user": "Fenikkusu", "body": "Jeroen2, not quite, no."}, {"timstamp": "2016-05-26 16:17", "user": "Fenikkusu", "body": "Give me a second."}, {"timstamp": "2016-05-26 16:18", "user": "Jeroen2", "body": "I just to bring a $scope var to my HTML so I can put it in the directive's scope again."}, {"timstamp": "2016-05-26 16:18", "user": "Jeroen2", "body": "I just want*"}, {"timstamp": "2016-05-26 16:19", "user": "Fenikkusu", "body": "Jeroen2"}, {"timstamp": "2016-05-26 16:19", "user": "sunimasuno", "body": "Hmmm, I'ma give Fenikkusu their moment to get the real answer, they seem to understand ya better at the moment. Betting what it'll really be is getting from one scope to another"}, {"timstamp": "2016-05-26 16:20", "user": "sunimasuno", "body": "Ah! setting up an attribute, I gets ya"}, {"timstamp": "2016-05-26 16:21", "user": "Jeroen2", "body": "Fenikkusu: So if I have in my scope the variable \"myData\", I should change your code to: some-data=\"myData\""}, {"timstamp": "2016-05-26 16:21", "user": "Fenikkusu", "body": "Jeroen2, I screwed that up a little. It should be console.log(scope.someData)"}, {"timstamp": "2016-05-26 16:22", "user": "Fenikkusu", "body": "Jeroen2, no. When you use scope:{data:'='}, angular creates a property on scope called data and assignes the value of the attribute data to that property."}, {"timstamp": "2016-05-26 16:22", "user": "Jeroen2", "body": "but for example"}, {"timstamp": "2016-05-26 16:23", "user": "Jeroen2", "body": "In my directive I want a property called: \"acData\", on my current Scope (mainController's) I have a variable called \"pMaintenance\". How can I bring the pMaintenance property to my directive's scope?"}, {"timstamp": "2016-05-26 16:24", "user": "Fenikkusu", "body": "Jeroen2, here is a full working version:"}, {"timstamp": "2016-05-26 16:24", "user": "Fenikkusu", "body": "Oh"}, {"timstamp": "2016-05-26 16:24", "user": "Jeroen2", "body": "so I thought it would be: <my-directive acData=\"pMaintenance\"></my-directive> and then acData: '='"}, {"timstamp": "2016-05-26 16:25", "user": "Fenikkusu", "body": "...Now I understand...hmm...that's a bit tricker..."}, {"timstamp": "2016-05-26 16:26", "user": "Fenikkusu", "body": "Jeroen2, I believe you just need to do acData=\"{{ pMaintenance}}\" ...I think..."}], "label": "other"}
{"id": "73af7cd5", "body": "", "comments": [{"timstamp": "10:07", "user": "ray02", "body": "hello hello"}, {"timstamp": "10:07", "user": "ray02", "body": "morning folsk"}, {"timstamp": "10:07", "user": "ray02", "body": "folks"}], "label": "other"}
{"id": "73af7d3a", "body": "", "comments": [{"timstamp": "16:32", "user": "bisch", "body": "We're having problems with the translation expressions not getting evaluated. See"}, {"timstamp": "16:40", "user": "bisch", "body": "The problem seems to be when the {{...}} expressions get split up across lines."}], "label": "other"}
{"id": "93d594a0", "body": "", "comments": [{"timstamp": "2016-08-04 20:54", "user": "RomulusDaniel", "body": "how can someone get help around here?"}, {"timstamp": "2016-08-04 20:55", "user": "icfantv", "body": "RomulusDaniel: you ask your question and if someone can help, they will."}, {"timstamp": "2016-08-04 20:55", "user": "RomulusDaniel", "body": "ok I see thanks"}, {"timstamp": "2016-08-04 20:55", "user": "icfantv", "body": "everyone is here out of their own free will and out of the kindness of their hearts."}, {"timstamp": "2016-08-04 20:55", "user": "icfantv", "body": "getting demanding or coping an attitude will not win you any favors"}, {"timstamp": "2016-08-04 20:55", "user": "icfantv", "body": "...and if it gets bad enough, will get you KB'd"}, {"timstamp": "2016-08-04 20:55", "user": "zomg", "body": "RomulusDaniel: code sample would usually be helpful"}, {"timstamp": "2016-08-04 20:55", "user": "icfantv", "body": "tech chat rooms are hit-or-miss by nature"}, {"timstamp": "2016-08-04 20:55", "user": "RomulusDaniel", "body": "i didn;t want to break some rules"}, {"timstamp": "2016-08-04 20:56", "user": "RomulusDaniel", "body": "i have it"}, {"timstamp": "2016-08-04 20:56", "user": "icfantv", "body": "there's really only a couple: dont' be a dick, don't ask to ask, just ask."}, {"timstamp": "2016-08-04 20:56", "user": "RomulusDaniel", "body": "lol"}, {"timstamp": "2016-08-04 20:56", "user": "icfantv", "body": "don't apologize for not being a native english speaker"}, {"timstamp": "2016-08-04 20:56", "user": "icfantv", "body": "or for bad grammar"}, {"timstamp": "2016-08-04 20:56", "user": "RomulusDaniel", "body": "i have a factory with 2 separate functionalities how can I split them into 2 factories"}, {"timstamp": "2016-08-04 20:57", "user": "icfantv", "body": "what's the relationship between the two functionalities?"}, {"timstamp": "2016-08-04 20:57", "user": "icfantv", "body": "and as zomg pointed out, having a gist via which to view the code would be helpful."}, {"timstamp": "2016-08-04 20:57", "user": "RomulusDaniel", "body": "one adding the cors header for cross domain ajax calls"}, {"timstamp": "2016-08-04 20:58", "user": "RomulusDaniel", "body": "and the other getting the data through http calls"}, {"timstamp": "2016-08-04 20:58", "user": "icfantv", "body": "that almost sounds like you want to add your own HTTP interceptor"}, {"timstamp": "2016-08-04 20:58", "user": "icfantv", "body": "and the other?"}, {"timstamp": "2016-08-04 20:58", "user": "RomulusDaniel", "body": "and the other getting the data through http calls"}, {"timstamp": "2016-08-04 20:58", "user": "icfantv", "body": "...like generically?"}, {"timstamp": "2016-08-04 20:58", "user": "RomulusDaniel", "body": "I have the interceptor working"}, {"timstamp": "2016-08-04 20:59", "user": "icfantv", "body": "the purpose of the interceptor is to look at incoming requests before they get dispatched to the requesting service and to intercept outgoing requests before they get sent by the browser"}, {"timstamp": "2016-08-04 20:59", "user": "icfantv", "body": "ok, cool"}, {"timstamp": "2016-08-04 20:59", "user": "icfantv", "body": "not sure why you're using a factory for that, however"}, {"timstamp": "2016-08-04 20:59", "user": "RomulusDaniel", "body": "I get the data through the browser cors security"}, {"timstamp": "2016-08-04 20:59", "user": "icfantv", "body": "factories tend to create things, what you're doing more service oriented, but i'm not sure it needs to be a service"}, {"timstamp": "2016-08-04 21:00", "user": "icfantv", "body": "it's almost a utility method, though, no? you're adding a header..."}, {"timstamp": "2016-08-04 21:00", "user": "RomulusDaniel", "body": "yes"}, {"timstamp": "2016-08-04 21:03", "user": "RomulusDaniel", "body": "I don;t completely understand some concepts and that's why I am looking for help"}, {"timstamp": "2016-08-04 21:03", "user": "RomulusDaniel", "body": "I just started learning angularjs"}, {"timstamp": "2016-08-04 21:10", "user": "icfantv", "body": "one sec"}, {"timstamp": "2016-08-04 21:10", "user": "icfantv", "body": "on phone"}, {"timstamp": "2016-08-04 21:11", "user": "icfantv", "body": "RomulusDaniel: another nit: don't PM people. this chat is logged so everyone can benefit"}, {"timstamp": "2016-08-04 21:11", "user": "RomulusDaniel", "body": "ok"}, {"timstamp": "2016-08-04 21:11", "user": "icfantv", "body": "RomulusDaniel: can you create a gist with what you have?"}, {"timstamp": "2016-08-04 21:11", "user": "RomulusDaniel", "body": "i have a fiddle"}, {"timstamp": "2016-08-04 21:11", "user": "icfantv", "body": "you can remove any business code that you don't want to release"}, {"timstamp": "2016-08-04 21:11", "user": "icfantv", "body": "that'll work too"}, {"timstamp": "2016-08-04 21:12", "user": "RomulusDaniel", "body": ""}, {"timstamp": "2016-08-04 21:13", "user": "RomulusDaniel", "body": "I need to separate the cors function from the http get functionality"}, {"timstamp": "2016-08-04 21:15", "user": "RomulusDaniel", "body": "to have them into separate file and then inject them into the main module"}, {"timstamp": "2016-08-04 21:16", "user": "RomulusDaniel", "body": "I managed to extract the $http functionality back to the controller"}, {"timstamp": "2016-08-04 21:16", "user": "RomulusDaniel", "body": "just now"}, {"timstamp": "2016-08-04 21:19", "user": "icfantv", "body": "k, one sec"}, {"timstamp": "2016-08-04 21:20", "user": "icfantv", "body": "ummmm"}, {"timstamp": "2016-08-04 21:20", "user": "icfantv", "body": "is that the proper way of setting CORS headers?"}, {"timstamp": "2016-08-04 21:21", "user": "RomulusDaniel", "body": "i just got the code from a git repo"}, {"timstamp": "2016-08-04 21:21", "user": "icfantv", "body": "something doesn't pass the smell test here"}, {"timstamp": "2016-08-04 21:21", "user": "icfantv", "body": "link?"}, {"timstamp": "2016-08-04 21:21", "user": "RomulusDaniel", "body": "i don;t understand much of it"}, {"timstamp": "2016-08-04 21:22", "user": "RomulusDaniel", "body": ""}, {"timstamp": "2016-08-04 21:24", "user": "icfantv", "body": "where's the GH link"}, {"timstamp": "2016-08-04 21:24", "user": "icfantv", "body": "do you control your server at all?"}, {"timstamp": "2016-08-04 21:24", "user": "icfantv", "body": "i'm not seeing any CORS headers being set in your code"}, {"timstamp": "2016-08-04 21:26", "user": "RomulusDaniel", "body": "nope"}, {"timstamp": "2016-08-04 21:26", "user": "RomulusDaniel", "body": "this is the link sorry"}, {"timstamp": "2016-08-04 21:26", "user": "RomulusDaniel", "body": ""}, {"timstamp": "2016-08-04 21:26", "user": "RomulusDaniel", "body": "I think it is doing something else"}, {"timstamp": "2016-08-04 21:27", "user": "icfantv", "body": "what you are doing is outside of angular"}, {"timstamp": "2016-08-04 21:27", "user": "icfantv", "body": "TBH, beyond telling you that something feels VERY wrong here and you should investigate doing this correctly from within angular, i can't make you."}, {"timstamp": "2016-08-04 21:28", "user": "icfantv", "body": "to answer your original question, you don't want to call that enabler function EVERY time you make an HTTP call"}, {"timstamp": "2016-08-04 21:28", "user": "icfantv", "body": "you want to add that prototype function once"}, {"timstamp": "2016-08-04 21:28", "user": "icfantv", "body": "where you would probably do that is in an angular.module().config() block."}, {"timstamp": "2016-08-04 21:28", "user": "RomulusDaniel", "body": "I think it is using a proxy or something like this to pass over the cors security"}, {"timstamp": "2016-08-04 21:29", "user": "icfantv", "body": "that statement alone should scare the bejeezus out of you...."}, {"timstamp": "2016-08-04 21:29", "user": "icfantv", "body": "but i digress"}, {"timstamp": "2016-08-04 21:29", "user": "RomulusDaniel", "body": "it is not my code sorry , like I said smbd. helped me"}, {"timstamp": "2016-08-04 21:29", "user": "icfantv", "body": "you only want/need to add that prototype method once. so move it to your main app's module and in a new config() function"}, {"timstamp": "2016-08-04 21:30", "user": "icfantv", "body": "from there, you can use $http.* normally"}, {"timstamp": "2016-08-04 21:30", "user": "icfantv", "body": "you con't need a separate factory for that enabler function"}, {"timstamp": "2016-08-04 21:30", "user": "icfantv", "body": "second:"}, {"timstamp": "2016-08-04 21:30", "user": "RomulusDaniel", "body": "I have moved it back to the controller"}, {"timstamp": "2016-08-04 21:31", "user": "icfantv", "body": "you use services for $http, so make a service that does what you want. in this case, you just need to change .factory to .service and then say `this.getData = function() { ...}` and lose the return statement in that old factory function"}, {"timstamp": "2016-08-04 21:31", "user": "RomulusDaniel", "body": "I think I need to make a service or a factory with that http"}, {"timstamp": "2016-08-04 21:31", "user": "RomulusDaniel", "body": "I understand"}, {"timstamp": "2016-08-04 21:31", "user": "icfantv", "body": "it should NOT be in the controller. you don't want it executing every time the controller function is executed. that's completely unnecessary and inneficient."}, {"timstamp": "2016-08-04 21:32", "user": "RomulusDaniel", "body": "yes I know"}, {"timstamp": "2016-08-04 21:32", "user": "icfantv", "body": "angular.module().service(...)"}, {"timstamp": "2016-08-04 21:32", "user": "RomulusDaniel", "body": "that's why I will make another http service just for that"}, {"timstamp": "2016-08-04 21:32", "user": "icfantv", "body": "you should have separate services based on functional silo of your app"}, {"timstamp": "2016-08-04 21:32", "user": "icfantv", "body": "e.g. AccountService, UserService, etc..."}, {"timstamp": "2016-08-04 21:32", "user": "RomulusDaniel", "body": "I know that"}, {"timstamp": "2016-08-04 21:32", "user": "icfantv", "body": "ReportService"}, {"timstamp": "2016-08-04 21:33", "user": "icfantv", "body": "ok"}, {"timstamp": "2016-08-04 21:33", "user": "icfantv", "body": "and those services just have $http injected"}, {"timstamp": "2016-08-04 21:33", "user": "RomulusDaniel", "body": "yes I know that also :D"}, {"timstamp": "2016-08-04 21:34", "user": "RomulusDaniel", "body": "I am doing what you said now"}, {"timstamp": "2016-08-04 21:34", "user": "RomulusDaniel", "body": "thank you for your help"}, {"timstamp": "2016-08-04 21:34", "user": "RomulusDaniel", "body": "you are great"}], "label": "other"}
{"id": "93d59550", "body": "", "comments": [{"timstamp": "2017-05-30 15:51", "user": "OnceMe", "body": "how to get id from div?"}, {"timstamp": "2017-05-30 15:52", "user": "OnceMe", "body": "maybe to creare something like <div class=\"hidden\" ng-model=\"id\">1</div>, but not sure if this is a good practice"}, {"timstamp": "2017-05-30 15:52", "user": "OnceMe", "body": "I want to make a subscribe button for certain topic, but I dont know how do I send topic id via http post"}, {"timstamp": "2017-05-30 15:56", "user": "OnceMe", "body": "me?"}], "label": "other"}
{"id": "93d59541", "body": "", "comments": [{"timstamp": "2016-05-06 10:03", "user": "deebo", "body": "i still havent found a sample project for angular2.0 that uses typescript without a node backend"}, {"timstamp": "2016-05-06 10:03", "user": "deebo", "body": "setting up a modern javascript project is not trivial"}, {"timstamp": "2016-05-06 10:03", "user": "deebo", "body": "it makes me want to stab people"}, {"timstamp": "2016-05-06 10:04", "user": "godo____", "body": "@deebo have you heard about meteor?"}, {"timstamp": "2016-05-06 10:04", "user": "zomg", "body": "deebo: what's wrong with node?"}, {"timstamp": "2016-05-06 10:04", "user": "godo____", "body": "it's really nice for smaller/medium projects"}, {"timstamp": "2016-05-06 10:05", "user": "deebo", "body": "node is fine for the build environment, we have a java backend and we want to build strictly frontend javascript, i literally have no idea how to setup that project with angular2"}, {"timstamp": "2016-05-06 10:06", "user": "deebo", "body": "i just setup a angular1.x project with gulp, bower and node, but adding typescript seems weird, especially since angular2 is only available as a node module"}, {"timstamp": "2016-05-06 10:07", "user": "Spot__", "body": "deebo: So you would like to have a build setup that you would bundle JS into one file and put one <script ...> and stuff to the Java backends HTML?"}, {"timstamp": "2016-05-06 10:07", "user": "deebo", "body": "im so used to the very specific project models in the java world that javascript is super annoying in that regard"}, {"timstamp": "2016-05-06 10:08", "user": "deebo", "body": "Spot__: yup, without e.g. maintaining a list of typescript source files in a buildfile or something, and there has to be proper IDE support (e.g. plain tsc usage would be best, no gulp/grunt)"}, {"timstamp": "2016-05-06 10:08", "user": "zomg", "body": "deebo: with any other backend you'd just set up your backend to respond to requests and serve JSON"}, {"timstamp": "2016-05-06 10:08", "user": "Spot__", "body": "deebo: You would be most happy imho with Webpack"}, {"timstamp": "2016-05-06 10:08", "user": "zomg", "body": "nothing else to it"}, {"timstamp": "2016-05-06 10:09", "user": "deebo", "body": "for javascript we just concat and uglify and then we're done"}, {"timstamp": "2016-05-06 10:09", "user": "icebox", "body": "deebo: I second zomg... angular is backend agnostic... it depends on your architecture how to separate frontend and backend... for instance,"}, {"timstamp": "2016-05-06 10:09", "user": "Spot__", "body": "deebo: Concat and uglify is not enough for modern JS/TS, but with Webpack you can automate doing ultimately the same"}, {"timstamp": "2016-05-06 10:10", "user": "deebo", "body": "i'd rather not use modules at all before ES6, there's absolutely no need for frontend stuff"}, {"timstamp": "2016-05-06 10:11", "user": "icebox", "body": "deebo: \"angular2 is only available as a node module\"... don't confuse package management in terms of build and deploy workflow"}, {"timstamp": "2016-05-06 10:11", "user": "icebox", "body": "deebo: with angular2 you can use ES5, ES2015, Typescript or Dart"}, {"timstamp": "2016-05-06 10:12", "user": "icebox", "body": "deebo: (ES6 doesn't exist anymore since june 2015, when ES2015 has been finalized) :P"}, {"timstamp": "2016-05-06 10:12", "user": "deebo", "body": "icebox: my problem with the node part is that in the example projects e.g. they have tsc configuration that ignores node_modules"}, {"timstamp": "2016-05-06 10:12", "user": "deebo", "body": "but like magic they can import angular typescript classes etc :)"}, {"timstamp": "2016-05-06 10:13", "user": "icebox", "body": "deebo: again don't confuse build phase with runtime :)"}, {"timstamp": "2016-05-06 10:13", "user": "icebox", "body": "deebo: no magic there"}, {"timstamp": "2016-05-06 10:14", "user": "deebo", "body": "probably not, the lack of a standard build process/layout for these projects just confuses the hell out of me"}, {"timstamp": "2016-05-06 10:14", "user": "deebo", "body": "and if you google for something and its >7 days old, its probably obsolete"}, {"timstamp": "2016-05-06 10:14", "user": "icebox", "body": "deebo: in the build workflow Typescipt is transpiled to ES*, during the runtime the (almost) standar module ES2015 feature is used"}, {"timstamp": "2016-05-06 10:15", "user": "icebox", "body": "deebo: agreed... complexity is confusing"}, {"timstamp": "2016-05-06 10:16", "user": "icebox", "body": "deebo: it is called nowadays js fatigue"}, {"timstamp": "2016-05-06 10:17", "user": "icebox", "body": "deebo: too many parts rolling... tools, paradigms and so on.... the choice is overhelming"}, {"timstamp": "2016-05-06 10:17", "user": "bee", "body": "icebox, when referencing service variables in view do you use serviceName.varname"}, {"timstamp": "2016-05-06 10:18", "user": "bee", "body": "and in views controller you have $scope.serviceName = serviceName;?"}, {"timstamp": "2016-05-06 10:18", "user": "icebox", "body": "bee: no... because you are coupling template and service... you need to use variables in the scope to slice the model"}, {"timstamp": "2016-05-06 10:18", "user": "bee", "body": ":\\"}, {"timstamp": "2016-05-06 10:18", "user": "bee", "body": "don't understand"}, {"timstamp": "2016-05-06 10:19", "user": "icebox", "body": "bee: $scope.myData = myService.getData(); ... otherwise... $scope.foo = myService.getFoo();"}, {"timstamp": "2016-05-06 10:20", "user": "icebox", "body": "bee: in the template <p>{{ vm.myData.baz }}</p> or <p>{{ vm.foo }}</p>"}, {"timstamp": "2016-05-06 10:20", "user": "bee", "body": "icebox this is what my service looks like"}, {"timstamp": "2016-05-06 10:21", "user": "bee", "body": ""}, {"timstamp": "2016-05-06 10:21", "user": "icebox", "body": "bee: so you can refactor the controller, replacing that service, without changing (maybe) the template"}, {"timstamp": "2016-05-06 10:21", "user": "bee", "body": "I can't do it without changing the template I think"}, {"timstamp": "2016-05-06 10:22", "user": "bee", "body": "this.comments_loaded - used to be $scope.comments_loaded"}, {"timstamp": "2016-05-06 10:22", "user": "bee", "body": "because it's used in the view"}, {"timstamp": "2016-05-06 10:22", "user": "icebox", "body": "bee: well... almost correct... this breaks the reference this.comments = result.data.results"}, {"timstamp": "2016-05-06 10:23", "user": "icebox", "body": "bee: be aware... don't break the references :P"}, {"timstamp": "2016-05-06 10:23", "user": "bee", "body": ":("}, {"timstamp": "2016-05-06 10:23", "user": "bee", "body": "how do I not break it"}, {"timstamp": "2016-05-06 10:24", "user": "icebox", "body": "bee: otherwise the changes are not automagically propagated because the automatic watchers listen on old reference"}, {"timstamp": "2016-05-06 10:24", "user": "bee", "body": "yeah I understand"}, {"timstamp": "2016-05-06 10:24", "user": "bee", "body": "but how do I have a loadComments() function in service which does not break reference"}, {"timstamp": "2016-05-06 10:25", "user": "icebox", "body": "bee: use angular.extend or angular.merge... and always use objects and not primitives... on primitives angular doesn't add automatically the watcher"}, {"timstamp": "2016-05-06 10:25", "user": "bee", "body": "I am unfamiliar with angular.extend and merge"}, {"timstamp": "2016-05-06 10:25", "user": "bee", "body": "do you mean use objects when referencing"}, {"timstamp": "2016-05-06 10:25", "user": "bee", "body": "eg. in my controller like this:"}, {"timstamp": "2016-05-06 10:26", "user": "bee", "body": "$scope.commentService = commentService;"}, {"timstamp": "2016-05-06 10:26", "user": "icebox", "body": "bee:"}, {"timstamp": "2016-05-06 10:26", "user": "icebox", "body": "bee: experiment yourself... the journey is very worthy"}, {"timstamp": "2016-05-06 10:26", "user": "bee", "body": "I don't like angular docs"}, {"timstamp": "2016-05-06 10:26", "user": "bee", "body": "I find them hard to understand"}, {"timstamp": "2016-05-06 10:27", "user": "bee", "body": "icebox, do you have an example service to look at"}, {"timstamp": "2016-05-06 10:27", "user": "bee", "body": "also can you explain how this.comments = result.data.results"}, {"timstamp": "2016-05-06 10:27", "user": "bee", "body": "breaks the reference"}, {"timstamp": "2016-05-06 10:28", "user": "bee", "body": "and how to not make it break"}, {"timstamp": "2016-05-06 10:28", "user": "icebox", "body": "bee: I think I explained a lot of times here... and with plunkers too... :)"}, {"timstamp": "2016-05-06 10:30", "user": "bee", "body": "angular.extend(this.comments, result.data.results);"}, {"timstamp": "2016-05-06 10:30", "user": "bee", "body": "instead of this.comments = result.data.results;"}, {"timstamp": "2016-05-06 10:30", "user": "bee", "body": "good :D?"}, {"timstamp": "2016-05-06 10:31", "user": "icebox", "body": "bee: yep... that is better"}, {"timstamp": "2016-05-06 10:31", "user": "bee", "body": "ok I will fix my template and give it a test"}, {"timstamp": "2016-05-06 10:32", "user": "bee", "body": "imo it's ugly to have commentService.comments_collapsed"}, {"timstamp": "2016-05-06 10:32", "user": "bee", "body": "in my template"}, {"timstamp": "2016-05-06 10:33", "user": "bee", "body": "when you do var newObject = oldObject is it a reference? I think so"}, {"timstamp": "2016-05-06 10:33", "user": "bee", "body": "I think angular copy might make it a new object instead of referencing the original oldObject"}, {"timstamp": "2016-05-06 10:34", "user": "bee", "body": "but I am not sure"}, {"timstamp": "2016-05-06 10:34", "user": "calamity", "body": "right, so if I changed 'oldObject', it'd change newObject?"}, {"timstamp": "2016-05-06 10:35", "user": "bee", "body": "you should set up a test with console.log and do some changes to the obj, see if the original/reference changes"}, {"timstamp": "2016-05-06 10:35", "user": "bee", "body": "then experiment with angular.copy"}, {"timstamp": "2016-05-06 10:35", "user": "calamity", "body": "good idea"}, {"timstamp": "2016-05-06 10:38", "user": "calamity", "body": "Atom is pretty nice"}, {"timstamp": "2016-05-06 10:39", "user": "bee", "body": "I use pycharm"}, {"timstamp": "2016-05-06 10:39", "user": "bee", "body": "but you might not want to use it unless you use python as well"}], "label": "other"}
{"id": "93d5952a", "body": "", "comments": [{"timstamp": "2016-10-19 17:55", "user": "LIERO_", "body": "I have a checkbox that I want to keep a persistent option for the user - i.e. it remembers the option between application runs - so obviously the only way is to write to a json"}, {"timstamp": "2016-10-19 17:56", "user": "LIERO_", "body": "or can I only read once on application start and store that in a global variable"}, {"timstamp": "2016-10-19 17:56", "user": "LIERO_", "body": "and then only write to the json if there is a change"}, {"timstamp": "2016-10-19 17:56", "user": "LIERO_", "body": "so the right way to handle this would be to have a factory that checks for the state and writes a change if necessary, and then call that factory from every controller that has the checkbox (basically every controller..) ?"}], "label": "other"}
{"id": "93d59548", "body": "", "comments": [{"timstamp": "2016-05-19 14:52", "user": "akkonrad", "body": "I'd like you to check my code for game: in general if principles I follow are good and what I should change before I start to improove this furhter. Live app:"}, {"timstamp": "2016-05-19 14:52", "user": "akkonrad", "body": "it's simple click/upgrade game"}, {"timstamp": "2016-05-19 14:52", "user": "arlekin", "body": "akkonrad: you are kidding right ?"}, {"timstamp": "2016-05-19 14:53", "user": "akkonrad", "body": "arlekin, why?"}, {"timstamp": "2016-05-19 14:53", "user": "icebox", "body": "arlekin: now... :P"}, {"timstamp": "2016-05-19 14:53", "user": "arlekin", "body": "akkonrad: well, i strive to be as helpful as i can, but getting to know the whole app is just about a teeny tiny bit out of that scope"}, {"timstamp": "2016-05-19 14:54", "user": "arlekin", "body": "akkonrad: i mean, don't get me wrong, i appreciate you would like someone to review it"}, {"timstamp": "2016-05-19 14:54", "user": "akkonrad", "body": "arlekin, it's just base of the app - 3 items to upgrade, 4 directives and 2 services actually"}, {"timstamp": "2016-05-19 14:55", "user": "akkonrad", "body": "but I guess I should ask with certain problem, not the whole app"}, {"timstamp": "2016-05-19 14:55", "user": "arlekin", "body": "akkonrad: well, no one can prevent you from asking"}, {"timstamp": "2016-05-19 14:55", "user": "arlekin", "body": "akkonrad: but in general the smaller and more isolated question the better"}, {"timstamp": "2016-05-19 14:55", "user": "arlekin", "body": "akkonrad: though i do need to apologize, since your app isn't as big as i initially thought"}, {"timstamp": "2016-05-19 14:56", "user": "arlekin", "body": "it seems to be some custom implementation of venture capitalist, isn't it ?"}, {"timstamp": "2016-05-19 14:56", "user": "akkonrad", "body": "arlekin, something like this, yes"}, {"timstamp": "2016-05-19 14:58", "user": "arlekin", "body": "akkonrad: again, hard to say something without some isse to lean on"}, {"timstamp": "2016-05-19 14:58", "user": "arlekin", "body": "akkonrad: but it seems to work, and your code doesn't look atrocious (in my opinion)"}, {"timstamp": "2016-05-19 14:59", "user": "arlekin", "body": "akkonrad: for aforementioned reasons i won't commit myself to try and find whether something might have been done better"}, {"timstamp": "2016-05-19 14:59", "user": "arlekin", "body": "akkonrad: one thing though - it seems like you have few quite similar UI elements - maybe you could put them in directives"}, {"timstamp": "2016-05-19 15:00", "user": "arlekin", "body": "icebox: ;P"}, {"timstamp": "2016-05-19 15:01", "user": "icebox", "body": "akkonrad: well.. I second arlekin's comments... generally speaking I like the widgets and icons"}, {"timstamp": "2016-05-19 15:01", "user": "icebox", "body": "akkonrad: read John Papa code guide style to improve the layout of the project and the style of the code"}, {"timstamp": "2016-05-19 15:02", "user": "icebox", "body": "arlekin: and don't use global vars :)"}, {"timstamp": "2016-05-19 15:02", "user": "arlekin", "body": "icebox: me ? where ?"}, {"timstamp": "2016-05-19 15:02", "user": "icebox", "body": "arlekin: ops... sorry mistell"}, {"timstamp": "2016-05-19 15:03", "user": "arlekin", "body": "icebox: kk"}, {"timstamp": "2016-05-19 15:03", "user": "icebox", "body": "akkonrad: read John Papa code guide style to improve the layout of the project and the style of the code"}, {"timstamp": "2016-05-19 15:03", "user": "icebox", "body": "akkonrad: and don't use global vars :)"}, {"timstamp": "2016-05-19 15:04", "user": "akkonrad", "body": "icebox, arlekin thank you for your inputs"}, {"timstamp": "2016-05-19 15:04", "user": "arlekin", "body": "gonna go afk guys, b back in some 30 min"}, {"timstamp": "2016-05-19 15:04", "user": "icebox", "body": "arlekin: see you"}, {"timstamp": "2016-05-19 15:04", "user": "icebox", "body": "akkonrad: you are welcome"}], "label": "other"}
{"id": "93d594e3", "body": "", "comments": [{"timstamp": "2018-03-07 15:50", "user": "ray02", "body": "this is my situation :i have a service with two obeservable this are used for two filter , i have create two of them because they andle different type of data so in the UI compoent i call the function with the data to pass and in the component i refresh my chart recalling the function. The problem is that i call two time the same function inside de single component,is it possible to make a multy subscrition ?"}, {"timstamp": "2018-03-07 15:50", "user": "ray02", "body": "here some code of wha i have"}, {"timstamp": "2018-03-07 15:50", "user": "icebox", "body": "ray02: I think so"}, {"timstamp": "2018-03-07 15:51", "user": "ray02", "body": "icebox , does make sense the code i have posted ?"}, {"timstamp": "2018-03-07 15:52", "user": "icebox", "body": "ray02: for me, no... sorry"}, {"timstamp": "2018-03-07 15:53", "user": "icebox", "body": "ray02: what is the method called twice?"}, {"timstamp": "2018-03-07 15:53", "user": "ray02", "body": "this.getGaugeData()"}, {"timstamp": "2018-03-07 15:53", "user": "icebox", "body": "ray02: ok... trying to read again that snippet :)"}, {"timstamp": "2018-03-07 15:54", "user": "yrc", "body": "icebox: s/controller's parameter/controller's constructor/ (sorry)"}, {"timstamp": "2018-03-07 15:55", "user": "yrc", "body": "And I agree that this dev workflow is hell to work with, when you discover the whole frontend stack at once!"}, {"timstamp": "2018-03-07 15:57", "user": "icebox", "body": "ray02: anyway I don't understand because you need to call a filter from the service"}, {"timstamp": "2018-03-07 15:57", "user": "icebox", "body": "ray02: please, tell me the ux causing your issue"}, {"timstamp": "2018-03-07 15:58", "user": "ray02", "body": "because the value i set in the UI filter has to be spread to all the component in the page"}, {"timstamp": "2018-03-07 15:58", "user": "icebox", "body": "ray02: ok... and?"}, {"timstamp": "2018-03-07 15:58", "user": "ray02", "body": "and after that i have to refresh the chart"}, {"timstamp": "2018-03-07 15:59", "user": "ray02", "body": "so the error happen inside the component"}, {"timstamp": "2018-03-07 15:59", "user": "icebox", "body": "ray02: ok... why do you call getGaugeData twice?"}, {"timstamp": "2018-03-07 15:59", "user": "icebox", "body": "ray02: it seems that call is wrong in the filter"}, {"timstamp": "2018-03-07 16:00", "user": "icebox", "body": "ray02: (my point is there is a design problem)"}, {"timstamp": "2018-03-07 16:00", "user": "ray02", "body": "because i have two filter, and i have made an observable for each filter"}, {"timstamp": "2018-03-07 16:00", "user": "ray02", "body": "yes i know"}, {"timstamp": "2018-03-07 16:00", "user": "ray02", "body": "i should have only one observable"}, {"timstamp": "2018-03-07 16:00", "user": "ray02", "body": "that handle the two filter"}, {"timstamp": "2018-03-07 16:00", "user": "icebox", "body": "ray02: forget for a while the observables... why do you need to get data in the filter and not in the service?"}, {"timstamp": "2018-03-07 16:01", "user": "ray02", "body": "but i don't know how to do that"}, {"timstamp": "2018-03-07 16:01", "user": "yrc", "body": "icebox: angular.dynamicLocale is a namespace that contains 2 things: the `tmhDynamicLocaleService` interface that must be implemented by my `localeService` must be; and the tmhDynamicLocaleProvider, that apparently AngularJS is needing to actually build my `localeService`. Surely there is a logical way to use the second to obtain the first, no?"}, {"timstamp": "2018-03-07 16:01", "user": "icebox", "body": "ray02: usually I get the data when I render the view and finally I filter some data"}, {"timstamp": "2018-03-07 16:01", "user": "ray02", "body": "yes is like this"}, {"timstamp": "2018-03-07 16:02", "user": "icebox", "body": "yrc: things are very simple when you know what you are doing... :)"}, {"timstamp": "2018-03-07 16:04", "user": "ray02", "body": "icebox in the filter i onply apply the filter"}, {"timstamp": "2018-03-07 16:04", "user": "yrc", "body": "icebox: So, forgetting Typescript, forgetting modules/namespaces..., what would you suggest, for me to have an object (of type `any` if necessary) on which I can call: obj.set(\"fr\")?"}, {"timstamp": "2018-03-07 16:04", "user": "yrc", "body": "In my controller."}, {"timstamp": "2018-03-07 16:05", "user": "icebox", "body": "yrc: no... you should start from javascript to understand better what you are doing in ts and webpack... this is the reason I advice you to load globally that lib and go ahead :) as I said a few hours ago :)"}, {"timstamp": "2018-03-07 16:05", "user": "icebox", "body": "ray02: so when is that method called twice?"}, {"timstamp": "2018-03-07 16:05", "user": "ray02", "body": "inside the component that has the chart"}, {"timstamp": "2018-03-07 16:06", "user": "icebox", "body": "ray02: no... always from ux point of view"}, {"timstamp": "2018-03-07 16:06", "user": "ray02", "body": "why?"}, {"timstamp": "2018-03-07 16:06", "user": "yrc", "body": "icebox: I cannot: company rules :-("}, {"timstamp": "2018-03-07 16:07", "user": "icebox", "body": "ray02: because I don't understand when it is called twice"}, {"timstamp": "2018-03-07 16:07", "user": "icebox", "body": "ray02: when is that method triggered?"}, {"timstamp": "2018-03-07 16:07", "user": "yrc", "body": "I must use typescript (although `any` is fine if necessary); I must use AngularJS 1.6. I must use webpack. I must use the right files layout..."}, {"timstamp": "2018-03-07 16:08", "user": "ray02", "body": "the snipped of code i have send you is a mix of the part : the first part is the serivice ,the second is the uIcomponent and the third is the single component"}, {"timstamp": "2018-03-07 16:08", "user": "icebox", "body": "yrc: sure... but if don't know the basics, you will have an hard time to fulfill your homeworks"}, {"timstamp": "2018-03-07 16:08", "user": "icebox", "body": "ray02: sigh..."}, {"timstamp": "2018-03-07 16:09", "user": "yrc", "body": "homeworks?? lol, thanksfully I leave all this junk at work, and have better things to do at home :-D"}, {"timstamp": "2018-03-07 16:10", "user": "icebox", "body": "ray02: I am trying to help you to improve that design... (because I don't understand why you are using observables to spread data in the components...) and I don't understand when that method is called twice..."}, {"timstamp": "2018-03-07 16:10", "user": "icebox", "body": "yrc: cool"}, {"timstamp": "2018-03-07 16:10", "user": "ray02", "body": "in the signle component on ngOnInit() subscribe to the fucntion"}, {"timstamp": "2018-03-07 16:11", "user": "Elarcis", "body": "yrc: if it is company rules that you use this tech, you can ask teammates for help, no need to struggle going alone in the dark"}, {"timstamp": "2018-03-07 16:11", "user": "icebox", "body": "yrc: angularjs and typescript is not a common setup... you need to be proficient with angularjs and es2015 to understand better how angularjs works with typescript"}, {"timstamp": "2018-03-07 16:11", "user": "Elarcis", "body": "yrc: they are more familiar with the setup/how to do stuff than us..."}, {"timstamp": "2018-03-07 16:12", "user": "ray02", "body": "icebox i see that you are trying to help me, i'm trying to be clear so you can help me better :)"}, {"timstamp": "2018-03-07 16:12", "user": "icebox", "body": "ray02: I see"}, {"timstamp": "2018-03-07 16:12", "user": "yrc", "body": "Elarcis: I did so, but so far no one had to stray from the familiar paths, and no one is really expert at this stuff: just do the same as before... And now we have this app, that need to do dynamic i18n (with a language menu on top), and I feel all alone..."}, {"timstamp": "2018-03-07 16:13", "user": "icebox", "body": "ray02: in ngOnInit... getGaugeData should be in the \"resolve\" feature of the view... not in the init of the component... anyway I don't understand the flow"}, {"timstamp": "2018-03-07 16:13", "user": "icebox", "body": "ray02: I don't understand you call again getGaugeData when the filter is triggered"}, {"timstamp": "2018-03-07 16:14", "user": "ray02", "body": "yes for update the value inside the chart"}, {"timstamp": "2018-03-07 16:14", "user": "yrc", "body": "icebox: Yes, I realize that: AngularJS 1.6 is probably the only version with support for TS, and all the folks actually using TS actually use Angular; and they are right..."}, {"timstamp": "2018-03-07 16:15", "user": "yrc", "body": "And I know nothing of all this (well, more than I did this morning, thanks to you guys). And it's real hard..."}, {"timstamp": "2018-03-07 16:15", "user": "ray02", "body": ",the filtered value came from the back because need to be recaluculated"}, {"timstamp": "2018-03-07 16:15", "user": "icebox", "body": "yrc: I know those feelings... but how shall we help you, please?"}, {"timstamp": "2018-03-07 16:17", "user": "icebox", "body": "ray02: so... the filtered values are provided by the backend... every time you need the filter, you call getDaugeData"}, {"timstamp": "2018-03-07 16:17", "user": "ray02", "body": "yes"}, {"timstamp": "2018-03-07 16:19", "user": "yrc", "body": "icebox: You already did help a lot! I am just so new to all this; I will need time to connect the dots, I guess. For a start, I would really like to understand the syntax of"}, {"timstamp": "2018-03-07 16:19", "user": "yrc", "body": "module declaration, the name of which happens to be none other than \"angular\"."}, {"timstamp": "2018-03-07 16:22", "user": "icebox", "body": "ray02: \"in the component i refresh my chart recalling the function. The problem is that i call two time the same function inside de single component\"... I understand you call the filter when you refresh the chart"}, {"timstamp": "2018-03-07 16:22", "user": "Elarcis", "body": "yrc: the Internet was too broad, maybe just the Web would have been enough"}, {"timstamp": "2018-03-07 16:23", "user": "icebox", "body": "ray02: so the sequence I understand is the following one... change the filter / refresh the chart / undesidered change of the filter... is it correct?"}, {"timstamp": "2018-03-07 16:23", "user": "yrc", "body": "Elarcis: I have already read that. This does not cover the fact that the namespace is inside a module declaration. What I understand, though, is that the namespace gets somehow included inside angular, as can be seen in the screenshot I posted earlier."}, {"timstamp": "2018-03-07 16:24", "user": "ray02", "body": "icebox yes"}, {"timstamp": "2018-03-07 16:25", "user": "icebox", "body": "yrc: I am afraid you are not able to connect the dots, because the knowledge gap is too much... the evil is in the details"}, {"timstamp": "2018-03-07 16:25", "user": "icebox", "body": "ray02: nice"}, {"timstamp": "2018-03-07 16:25", "user": "ray02", "body": "thanks for undestand me :p"}, {"timstamp": "2018-03-07 16:25", "user": "icebox", "body": "ray02: why do you apply the filter when you refresh the chart?"}, {"timstamp": "2018-03-07 16:26", "user": "ray02", "body": "no is the contrary ,i apply the filter and than i refesh the chart"}, {"timstamp": "2018-03-07 16:26", "user": "yrc", "body": "icebox: As things are now, you are absolutely right, unfortunately. I will have to fill the gap, though. It's my job... Thanks a lot Elarcis, icebox, for your patience. I have a meeting I must attend to, now. 'later!"}, {"timstamp": "2018-03-07 16:28", "user": "icebox", "body": "ray02: it is what I said :) but why refreshing the chart is there an undesidered call of getGaugeData?"}, {"timstamp": "2018-03-07 16:28", "user": "icebox", "body": "yrc: bye"}, {"timstamp": "2018-03-07 16:28", "user": "icebox", "body": "yrc: you are welcome"}, {"timstamp": "2018-03-07 16:31", "user": "icebox", "body": "ray02: apart my bad english... :) I wrote \"change the filter / refresh the chart / undesidered change of the filter\" and you said it is correct"}, {"timstamp": "2018-03-07 16:32", "user": "ray02", "body": "i confirm that is right what you understand :)"}, {"timstamp": "2018-03-07 16:33", "user": "ray02", "body": ""}, {"timstamp": "2018-03-07 16:33", "user": "ray02", "body": "the component of the chart start like this"}, {"timstamp": "2018-03-07 16:33", "user": "icebox", "body": "ok... is that chart component?"}, {"timstamp": "2018-03-07 16:33", "user": "icebox", "body": "ah ok"}, {"timstamp": "2018-03-07 16:33", "user": "ray02", "body": "yes"}, {"timstamp": "2018-03-07 16:34", "user": "ray02", "body": "i have two subscribe because i'm not able to make a single function that handle the two parameter of the filter"}, {"timstamp": "2018-03-07 16:35", "user": "ray02", "body": "so for start making work the thing i have create two function indipendent"}, {"timstamp": "2018-03-07 16:35", "user": "icebox", "body": "ray02: I understand why you need two filters... but..."}, {"timstamp": "2018-03-07 16:35", "user": "icebox", "body": "ray02: thinking on it"}, {"timstamp": "2018-03-07 16:36", "user": "ray02", "body": "the getGaugeData() function is called twice only onInit of course"}, {"timstamp": "2018-03-07 16:36", "user": "ray02", "body": "not all the time"}, {"timstamp": "2018-03-07 16:40", "user": "ray02", "body": "icebox do you think i can use fork?"}, {"timstamp": "2018-03-07 16:40", "user": "ray02", "body": "forkJoin sorry"}, {"timstamp": "2018-03-07 16:41", "user": "icebox", "body": "ray02: interesting scenario... no idea.. I am thinking on the design"}, {"timstamp": "2018-03-07 16:42", "user": "icebox", "body": "ray02: I would say those subscribes should be in ngOnInit of the \"container component\", containg the filters and the chart"}, {"timstamp": "2018-03-07 16:42", "user": "icebox", "body": "*containing"}, {"timstamp": "2018-03-07 16:42", "user": "icebox", "body": "*subscribers"}, {"timstamp": "2018-03-07 16:43", "user": "icebox", "body": "ray02: I imaging you have a chart component and then a sort of dialog component containing the filters"}, {"timstamp": "2018-03-07 16:43", "user": "icebox", "body": "*imagine"}, {"timstamp": "2018-03-07 16:44", "user": "icebox", "body": "ray02: moving the subscribers into \"dialog\" component? is it feasible?"}, {"timstamp": "2018-03-07 16:44", "user": "ray02", "body": "my big scenario is like this my page contain : UI coponent + 10 component for the chart"}, {"timstamp": "2018-03-07 16:44", "user": "icebox", "body": "ray02: I mean that code is filter code, not chart code"}, {"timstamp": "2018-03-07 16:44", "user": "ray02", "body": "(eache component contain a chart)"}, {"timstamp": "2018-03-07 16:45", "user": "ray02", "body": "*each component contain a chart"}, {"timstamp": "2018-03-07 16:45", "user": "icebox", "body": "ray02: ok... so the filters are shared"}, {"timstamp": "2018-03-07 16:45", "user": "ray02", "body": "yes this is why i'm in this situation"}, {"timstamp": "2018-03-07 16:45", "user": "icebox", "body": "ray02: yes and no :)"}, {"timstamp": "2018-03-07 16:46", "user": "ray02", "body": "ahah ok maybe for the my knowledge"}, {"timstamp": "2018-03-07 16:46", "user": "ray02", "body": ":p"}, {"timstamp": "2018-03-07 16:46", "user": "icebox", "body": "ray02: :P"}, {"timstamp": "2018-03-07 16:46", "user": "icebox", "body": "10 mins to resolve it :)"}, {"timstamp": "2018-03-07 16:46", "user": "ray02", "body": "for me is the first time i found my selfe in this situation"}, {"timstamp": "2018-03-07 16:46", "user": "ray02", "body": "ahah"}, {"timstamp": "2018-03-07 16:46", "user": "ray02", "body": "yes exatly i see you get my work shenario"}, {"timstamp": "2018-03-07 16:47", "user": "icebox", "body": "ray02: it is all in the design... I don't think an observable feature can help here... apart an hack :)"}, {"timstamp": "2018-03-07 16:48", "user": "icebox", "body": "ray02: \"I mean that code is filter code, not chart code\" do you mean that ngOnInt with two subscribers?"}, {"timstamp": "2018-03-07 16:49", "user": "ray02", "body": "no"}, {"timstamp": "2018-03-07 16:49", "user": "icebox", "body": "which code?"}, {"timstamp": "2018-03-07 16:50", "user": "ray02", "body": ""}, {"timstamp": "2018-03-07 16:50", "user": "ray02", "body": "here"}, {"timstamp": "2018-03-07 16:50", "user": "icebox", "body": "ray02: ok"}, {"timstamp": "2018-03-07 16:50", "user": "ray02", "body": "the part under ///////// UI FILTER ////////"}, {"timstamp": "2018-03-07 16:50", "user": "ray02", "body": "is inside the component of the filter"}, {"timstamp": "2018-03-07 16:51", "user": "ray02", "body": "this ///////// SERVICE//////// is in the serivice file"}, {"timstamp": "2018-03-07 16:51", "user": "icebox", "body": "and the component is one of the charts"}, {"timstamp": "2018-03-07 16:51", "user": "ray02", "body": "exatly"}, {"timstamp": "2018-03-07 16:52", "user": "icebox", "body": "but why in the ngOnInit of the chart component?"}, {"timstamp": "2018-03-07 16:53", "user": "ray02", "body": "to start to recieve the value as soon the component is ready no?"}, {"timstamp": "2018-03-07 16:53", "user": "ray02", "body": ",in my head is like this :p,"}, {"timstamp": "2018-03-07 16:53", "user": "icebox", "body": "it seems you need something to refresh the charts when you change the filter... and you are using the changes in the filter, but this is wrong"}, {"timstamp": "2018-03-07 16:54", "user": "icebox", "body": "ray02: I think your idea is correct, but not the execution :)"}, {"timstamp": "2018-03-07 16:55", "user": "icebox", "body": "ray02: you could move getGaugeData() in the service and using only a reference of that data in the subscribers"}, {"timstamp": "2018-03-07 16:57", "user": "icebox", "body": "ray02: need to go me too... I think that is worthy to investigate... something like this._cromxService.sharedFilter.subscribe(newPeriod => {this._cromxService.getSharedDataFilter();})"}, {"timstamp": "2018-03-07 16:57", "user": "icebox", "body": "off... bye"}, {"timstamp": "2018-03-07 16:57", "user": "ray02", "body": "ok"}, {"timstamp": "2018-03-07 16:58", "user": "ray02", "body": "thanks for the time :)"}, {"timstamp": "2018-03-07 16:58", "user": "icebox", "body": "ray02: no problem... you are welcome.. and we are here also tomorrow"}, {"timstamp": "2018-03-07 16:58", "user": "ray02", "body": "yes"}, {"timstamp": "2018-03-07 16:58", "user": "ray02", "body": "let's see"}, {"timstamp": "2018-03-07 16:59", "user": "icebox", "body": "bye"}, {"timstamp": "2018-03-07 16:59", "user": "ray02", "body": "bye"}], "label": "other"}
{"id": "93d594b9", "body": "", "comments": [{"timstamp": "2017-07-26 10:02", "user": "hareldvd", "body": "greetings, regarding:"}, {"timstamp": "2017-07-26 10:04", "user": "icebox", "body": "hareldvd: what do you mean?"}, {"timstamp": "2017-07-26 10:04", "user": "hareldvd", "body": "icebox: I get the error on npm run build."}, {"timstamp": "2017-07-26 10:05", "user": "hareldvd", "body": "icebox: Did rm -r node_modules and then npm install."}, {"timstamp": "2017-07-26 10:05", "user": "hareldvd", "body": "still have this issue."}, {"timstamp": "2017-07-26 10:05", "user": "SargoDarya", "body": "hareldvd: node -v gives?"}, {"timstamp": "2017-07-26 10:05", "user": "Elarcis", "body": "hareldvd: is your dependency version fixed in your package.json?"}, {"timstamp": "2017-07-26 10:05", "user": "icebox", "body": "hareldvd: ok... starting to read your mind and connecting to your box"}, {"timstamp": "2017-07-26 10:06", "user": "Elarcis", "body": "hareldvd: do you have a shrinkwrap file?"}, {"timstamp": "2017-07-26 10:06", "user": "Elarcis", "body": "hareldvd: did you try npm update?"}, {"timstamp": "2017-07-26 10:06", "user": "Elarcis", "body": "hareldvd: is your computer plugged in?"}, {"timstamp": "2017-07-26 10:06", "user": "hareldvd", "body": "SargoDarya: v6.9.1"}, {"timstamp": "2017-07-26 10:08", "user": "SargoDarya", "body": "Ok, just had a look at that package. No idea"}, {"timstamp": "2017-07-26 10:08", "user": "icebox", "body": "hareldvd: first thing when you have an issue with your setup is using the latest stable (8.2.1)"}, {"timstamp": "2017-07-26 10:09", "user": "xhd", "body": "wtf is this LOL love it"}, {"timstamp": "2017-07-26 10:09", "user": "Elarcis", "body": "icebox: LTS is 6.11 though"}, {"timstamp": "2017-07-26 10:10", "user": "xhd", "body": ""}, {"timstamp": "2017-07-26 10:10", "user": "icebox", "body": "Elarcis: sure... but you should give a try... always... it is a classical troubleshooting step"}, {"timstamp": "2017-07-26 10:10", "user": "icebox", "body": "hareldvd: and then we are waiting for the error details, of course"}, {"timstamp": "2017-07-26 10:10", "user": "SargoDarya", "body": "lol xhd"}, {"timstamp": "2017-07-26 10:10", "user": "hareldvd", "body": "Elarcis: no, icebox: nice that you do that. Keep going, Elarcis: no shrinkwrap, unless you mean UglifyJsPlugin, Elarcis: just told everyone I did rm -r node_modules and then npm install, Elarcis : yes, is plugged in,"}, {"timstamp": "2017-07-26 10:11", "user": "icebox", "body": "hareldvd: generally speaking, setup and box issues should not be addressed in this channel"}, {"timstamp": "2017-07-26 10:12", "user": "hareldvd", "body": "icebox: we don't upgrade everything just like that. We have it on production. Error is in URL I sent: Bug: callback(null, state.renderToString()) Details: /src/modules/ng-express-engine/express-engine.ts (98,7): Expected 0-1 arguments, but got 2."}, {"timstamp": "2017-07-26 10:13", "user": "hareldvd", "body": "icebox: Mr, PatrickJS announced he fixed the bug 9 days ago."}, {"timstamp": "2017-07-26 10:14", "user": "hareldvd", "body": "seems like a nice guy"}, {"timstamp": "2017-07-26 10:14", "user": "icebox", "body": "hareldvd: it doesn't make sense... node_modules / express-engine and so on... you are not giving any valuable info"}, {"timstamp": "2017-07-26 10:14", "user": "icebox", "body": "hareldvd: PatrickJS?"}, {"timstamp": "2017-07-26 10:15", "user": "hareldvd", "body": "icebox: yep, He is the one,"}, {"timstamp": "2017-07-26 10:15", "user": "icebox", "body": "hareldvd: naim meod... but how can you hope we help you? :)"}, {"timstamp": "2017-07-26 10:15", "user": "icebox", "body": "hareldvd: and?"}, {"timstamp": "2017-07-26 10:15", "user": "hareldvd", "body": "Was hoping I am not the only one using universal."}, {"timstamp": "2017-07-26 10:16", "user": "hareldvd", "body": "and as I was saying, I refreshed npm install and still got the error."}, {"timstamp": "2017-07-26 10:16", "user": "icebox", "body": "hareldvd: that is angular express universal... it is not angular universal (that's ssr)..."}, {"timstamp": "2017-07-26 10:16", "user": "icebox", "body": "hareldvd: and actually ssr is builtin in angular repo... there is not a separate repo"}, {"timstamp": "2017-07-26 10:17", "user": "icebox", "body": "hareldvd: that is a side project.., you should address your concerns to that issue"}, {"timstamp": "2017-07-26 10:18", "user": "icebox", "body": "hareldvd: see the readme in"}, {"timstamp": "2017-07-26 10:20", "user": "icebox", "body": "hareldvd: if you want to use that project, angular-universl-express, and you think your issue is fixed in the master, update the dep in your package.json pointing the git master for that project"}, {"timstamp": "2017-07-26 10:21", "user": "bs0d", "body": "updated paste:"}, {"timstamp": "2017-07-26 10:21", "user": "icebox", "body": "bs0d:"}, {"timstamp": "2017-07-26 10:22", "user": "bs0d", "body": "icebox the problems started when I joined two API calls into Promise.join, then one of the calls returns another promise"}, {"timstamp": "2017-07-26 10:23", "user": "bs0d", "body": "icebox before that, there was no Promise.all, there was just a single call returning another promise and everything worked just fine"}, {"timstamp": "2017-07-26 10:23", "user": "bs0d", "body": "but Promise.all screwed everything, but I need it :("}, {"timstamp": "2017-07-26 10:23", "user": "icebox", "body": "bs0d: ok... but that is Promise knowledge... why not reading some docs?"}, {"timstamp": "2017-07-26 10:24", "user": "icebox", "body": "bs0d: nowadays, async flow, in terms of callbacks, promises and observables, is a knowledge you should master"}, {"timstamp": "2017-07-26 10:25", "user": "icebox", "body": "bs0d: take your time to read docs, posts and to play with snippets to grasp the contents"}, {"timstamp": "2017-07-26 10:25", "user": "icebox", "body": "bs0d: throwing a pastebin in the channel doesn't help you to improve your skills"}, {"timstamp": "2017-07-26 10:26", "user": "bs0d", "body": "icebox my problem is I cannot understand what exactly went wrong there. I learned promise chaining, it worked fine. When I added promise.all with promise chaining it broke."}, {"timstamp": "2017-07-26 10:29", "user": "Elarcis", "body": "bs0d: your promise chain is wrong"}, {"timstamp": "2017-07-26 10:29", "user": "Elarcis", "body": "bs0d: the link icebox gave you specifically states about this kind of error"}, {"timstamp": "2017-07-26 10:30", "user": "Elarcis", "body": "bs0d: actually this link is what made me understand promises"}, {"timstamp": "2017-07-26 10:31", "user": "Elarcis", "body": "bs0d: also... you're using Angular and typescript, right? You don't need Promise, use async/await"}, {"timstamp": "2017-07-26 10:31", "user": "Elarcis", "body": "bs0d: :P"}, {"timstamp": "2017-07-26 10:35", "user": "bs0d", "body": "Elarcis actually, I initially followed the Angular 2 tutorials and they introduced promises. Now I am using it because that's all I know for the time being"}, {"timstamp": "2017-07-26 10:35", "user": "sadme", "body": "you don't need async/await, use rxjs ;D"}, {"timstamp": "2017-07-26 10:35", "user": "bs0d", "body": "Elarcis thanks for the hint. If my chain is wrong, I will be looking specifically for the rules to construct promise chains"}, {"timstamp": "2017-07-26 10:44", "user": "Elarcis", "body": "OT: I wonder if there could be a way to use async/await with observables..."}, {"timstamp": "2017-07-26 10:46", "user": "icebox", "body": "Elarcis: yep, there is... 10 users"}, {"timstamp": "2017-07-26 10:46", "user": "Elarcis", "body": "why the heck can't I see it"}, {"timstamp": "2017-07-26 10:46", "user": "icebox", "body": "here 400+"}, {"timstamp": "2017-07-26 10:47", "user": "Elarcis", "body": "ah, 1 user actually, and I had a limit set to 5"}, {"timstamp": "2017-07-26 10:47", "user": "SargoDarya", "body": "icebox: To be honest though, around 20 of those 400 are really active in this channel though. The rest is only lurking."}, {"timstamp": "2017-07-26 10:47", "user": "icebox", "body": "SargoDarya: agreed"}, {"timstamp": "2017-07-26 10:47", "user": "damian_", "body": "there're 20 users in that channel"}, {"timstamp": "2017-07-26 10:48", "user": "damian_", "body": "I haven't seen their topic: \"[10:43.59] Topic: nothing to see here, move on to #angularjs\""}, {"timstamp": "2017-07-26 10:48", "user": "icebox", "body": "damian_: ok... the official unofficial channel is this one... up to you :)"}, {"timstamp": "2017-07-26 10:48", "user": "damian_", "body": "why do they create a channel? to say that?"}, {"timstamp": "2017-07-26 10:49", "user": "icebox", "body": "damian_:"}, {"timstamp": "2017-07-26 10:49", "user": "icebox", "body": "damian_: what is your question about angular?"}, {"timstamp": "2017-07-26 10:50", "user": "damian_", "body": "icebox I don't have any interest in that channel, I was only asking about"}, {"timstamp": "2017-07-26 10:50", "user": "damian_", "body": "icebox my question is: can I build an e-learning platform with angular ? where can I start to learn about that ?"}, {"timstamp": "2017-07-26 10:51", "user": "damian_", "body": "and: how much js have I to know, to use angular ?"}, {"timstamp": "2017-07-26 10:51", "user": "icebox", "body": "damian_: yes, you can."}, {"timstamp": "2017-07-26 10:52", "user": "Elarcis", "body": "damian_: paradoxically, least is better, but the learning curve is steep!"}, {"timstamp": "2017-07-26 10:52", "user": "damian_", "body": "if I know js basics, how much time does it take to learn angular ? 1 year, maybe ??"}, {"timstamp": "2017-07-26 10:52", "user": "icebox", "body": "damian_:"}, {"timstamp": "2017-07-26 10:52", "user": "Elarcis", "body": "damian_: it's jquery knowledge that's the most likely to pollute your experience"}, {"timstamp": "2017-07-26 10:53", "user": "damian_", "body": "I've used some script a same simple websites, but I don't know jquery"}, {"timstamp": "2017-07-26 10:53", "user": "damian_", "body": "only js basics"}, {"timstamp": "2017-07-26 10:53", "user": "icebox", "body": "damian_: and what is your programming background?"}, {"timstamp": "2017-07-26 10:54", "user": "Elarcis", "body": "damian_: it's ok. AngularJS (and Angular)'s concepts are pretty modern and most people I've seen with preconceived ideas about JS just fight agaisnt the framework in some way"}, {"timstamp": "2017-07-26 10:54", "user": "damian_", "body": "icebox i'm not a programmer. I've built some basic website with drupal"}, {"timstamp": "2017-07-26 10:55", "user": "damian_", "body": "and I've been learning js the last 3 or 4 months"}, {"timstamp": "2017-07-26 10:55", "user": "damian_", "body": "nothing more"}, {"timstamp": "2017-07-26 10:55", "user": "Elarcis", "body": "damian_: however JS and TS can get pretty complex, so one must know when to read the docs, experiment with things, try solutions by themselves"}, {"timstamp": "2017-07-26 10:55", "user": "icebox", "body": "damian_: well.."}, {"timstamp": "2017-07-26 10:55", "user": "Elarcis", "body": "damian_: pretty much like any programming tech, but in JS it's worse because it requires rigor (a bit less for Typescript, which helps tremendously when used right)"}, {"timstamp": "2017-07-26 10:56", "user": "damian_", "body": "I am reading and working with a book now (effective js)"}, {"timstamp": "2017-07-26 10:56", "user": "icebox", "body": "damian_: that is a good book"}, {"timstamp": "2017-07-26 10:56", "user": "Garvey", "body": "damian_, Udemy has some good courses available for <unconvertable> 10 at the moment"}, {"timstamp": "2017-07-26 10:56", "user": "icebox", "body": "damian_: the point is the js realm is very broad"}, {"timstamp": "2017-07-26 10:57", "user": "damian_", "body": "icebox becouse of that, I'd like to start learning focusing from the begining in the e-learning platforms development"}, {"timstamp": "2017-07-26 10:58", "user": "damian_", "body": "oh, sorry for my english, I hope you understand what I want to say"}, {"timstamp": "2017-07-26 10:58", "user": "damian_", "body": "I'll see udemy angular courses, thanks a lot"}, {"timstamp": "2017-07-26 10:58", "user": "Elarcis", "body": "damian_: your english is pretty good :)"}, {"timstamp": "2017-07-26 10:59", "user": "icebox", "body": "damian_: or this one"}, {"timstamp": "2017-07-26 10:59", "user": "Garvey", "body": "damian_,"}, {"timstamp": "2017-07-26 11:02", "user": "damian_", "body": "Garvey someone spoke very well about that A. Alicea course. but it's angularjs, not angular2"}, {"timstamp": "2017-07-26 11:02", "user": "damian_", "body": "I'll see all these resources, thanks"}, {"timstamp": "2017-07-26 11:02", "user": "icebox", "body": "damian_: I recommend Todd Motto resources"}, {"timstamp": "2017-07-26 11:03", "user": "damian_", "body": "thanks icebox it's yet in my browser"}, {"timstamp": "2017-07-26 11:04", "user": "Elarcis", "body": "damian_: I have this one"}, {"timstamp": "2017-07-26 11:05", "user": "Elarcis", "body": "(even though they use Semantic-UI in their examples, grmbl)"}, {"timstamp": "2017-07-26 11:05", "user": "icebox", "body": "damian_: generally speaking,"}, {"timstamp": "2017-07-26 11:05", "user": "bs0d", "body": "Elarcis, icebox I have read the post which icebox was referring to. Maybe I am stupid, but I did not recognize my case there. I still do not understand what was wrong in the code I pasted"}, {"timstamp": "2017-07-26 11:06", "user": "icebox", "body": "bs0d: :)"}, {"timstamp": "2017-07-26 11:06", "user": "Elarcis", "body": "bs0d: clue: is this.callbackThree() supposed to wait for this.callbackTwo(result[1])?"}, {"timstamp": "2017-07-26 11:09", "user": "bs0d", "body": "Elarcis yes, indeed. In my understanding Promise.all does this. It resolves the two promises and returns an array of results (if both succeed), so callbackThree() is called only when this.callbackTwo(result[1]) has resolved"}, {"timstamp": "2017-07-26 11:09", "user": "damian_", "body": "Elarcis have you read that book ? (I think I learn better with books than with online courses)"}, {"timstamp": "2017-07-26 11:09", "user": "bs0d", "body": "Elarcis maybe I am missing something here"}, {"timstamp": "2017-07-26 11:09", "user": "Elarcis", "body": "bs0d: wrong"}, {"timstamp": "2017-07-26 11:09", "user": "Elarcis", "body": "bs0d: you didn't read the article carefully enough ;)"}, {"timstamp": "2017-07-26 11:11", "user": "bs0d", "body": "Elarcis how is this possible? I am looking at other articles as well, they say race() resolves if any of the promises resolve, but all() waits for all the promises to resolve before executing then()"}, {"timstamp": "2017-07-26 11:11", "user": "Elarcis", "body": "bs0d: see Puzzle #2"}, {"timstamp": "2017-07-26 11:12", "user": "Elarcis", "body": "bs0d: clearly there's a detail in your code you're not seing. once Promise.all() is closed, it is never to be involved again, and it is closing before your actual problem starts ;)"}, {"timstamp": "2017-07-26 11:12", "user": "Elarcis", "body": "bs0d: also... aren't you using typescript? isn't it giving your a shitton of errors?"}, {"timstamp": "2017-07-26 11:14", "user": "Elarcis", "body": "bs0d: do some console logs at worst... always helps"}, {"timstamp": "2017-07-26 11:14", "user": "bs0d", "body": "Elarcis stangely enough, typescript compiles. I get a bunch of runtime errors in the browser console saying that property I am expecting in result is undefined"}, {"timstamp": "2017-07-26 11:14", "user": "bs0d", "body": "Elarcis maybe I also need to restart npm :)"}, {"timstamp": "2017-07-26 11:15", "user": "Elarcis", "body": "bs0d: that's not normal, your typescript setup is bork in a way that removes most of its usefulness"}, {"timstamp": "2017-07-26 11:21", "user": "Elarcis", "body": "bs0d: npm is a thing, but your editor is not showing you any error either, and this is wrong"}, {"timstamp": "2017-07-26 11:21", "user": "Elarcis", "body": "bs0d: you should have big red underlines on at least two lines of code, possibly three"}, {"timstamp": "2017-07-26 11:22", "user": "bs0d", "body": "Elarcis I restarted npm and I see some errors now. If I comment one of the two callbacks inside .then(), it works fine. When I add the second one - it breaks"}, {"timstamp": "2017-07-26 11:22", "user": "bs0d", "body": "Elarcis isnt the problem related to the fact that only one of the callbacks actually returns a promise, another one returns undefined, so they end up in a race condition - whichever gets returned first?"}, {"timstamp": "2017-07-26 11:23", "user": "Elarcis", "body": "bs0d: no."}, {"timstamp": "2017-07-26 11:23", "user": "Elarcis", "body": "bs0d: you need to read the actual error message rather than fiddling randomly to see what sticks"}, {"timstamp": "2017-07-26 11:26", "user": "bs0d", "body": "Elarcis I was stupidly missing some brackets around the two callbacks - this was the cause of error message"}, {"timstamp": "2017-07-26 11:27", "user": "bs0d", "body": "Elarcis now that I have added the brackers (as in the pastebin also), the typescript compiles and shows no errors at all. Only runtime error sais the property is undefined"}, {"timstamp": "2017-07-26 11:27", "user": "bs0d", "body": "this is really tricky for me to fix, or at least to understand what is wrong"}, {"timstamp": "2017-07-26 11:27", "user": "Elarcis", "body": "bs0d: plunker then"}, {"timstamp": "2017-07-26 11:28", "user": "Elarcis", "body": "bs0d: console logs in that plunker"}, {"timstamp": "2017-07-26 11:28", "user": "Elarcis", "body": "bs0d: share that plunker"}, {"timstamp": "2017-07-26 11:28", "user": "bs0d", "body": "ok"}, {"timstamp": "2017-07-26 11:28", "user": "icebox", "body": "bs0d: effective collaboration is feasible only with a plunker"}, {"timstamp": "2017-07-26 11:29", "user": "Elarcis", "body": "AND NO JSFIDDLE FANATIC WILL DISAGREE *shakes fist at the sky*"}, {"timstamp": "2017-07-26 11:29", "user": "icebox", "body": "bs0d: template link in the topic"}, {"timstamp": "2017-07-26 11:30", "user": "icebox", "body": "Elarcis: indeed we need a template link for angularjs and ts"}, {"timstamp": "2017-07-26 11:30", "user": "Elarcis", "body": "icebox: is it so common?"}, {"timstamp": "2017-07-26 11:30", "user": "Elarcis", "body": "icebox: I mean it's already ES6"}, {"timstamp": "2017-07-26 11:31", "user": "icebox", "body": "Elarcis: ok"}, {"timstamp": "2017-07-26 11:31", "user": "Elarcis", "body": "icebox: we _could_ push it to a component-based plunker to start enforcing modern angularjs though"}, {"timstamp": "2017-07-26 11:32", "user": "icebox", "body": "Elarcis: agreed"}, {"timstamp": "2017-07-26 11:40", "user": "Elarcis", "body": "icebox: is something like that ok with you?"}, {"timstamp": "2017-07-26 11:42", "user": "icebox", "body": "OT: Hyperproductive development -"}, {"timstamp": "2017-07-26 11:43", "user": "icebox", "body": "Elarcis: replace constructor with $onInit, space after .name :)"}, {"timstamp": "2017-07-26 11:44", "user": "Elarcis", "body": "icebox: true"}, {"timstamp": "2017-07-26 11:44", "user": "Elarcis", "body": ":')"}, {"timstamp": "2017-07-26 11:47", "user": "Elarcis", "body": "it didn't save my changes!g"}, {"timstamp": "2017-07-26 11:47", "user": "Elarcis", "body": "fhdsjklfh"}, {"timstamp": "2017-07-26 11:48", "user": "icebox", "body": ":P"}, {"timstamp": "2017-07-26 11:50", "user": "Elarcis", "body": "KFJHD"}, {"timstamp": "2017-07-26 11:51", "user": "Elarcis", "body": "why does it never save my index.html for christ's sake"}, {"timstamp": "2017-07-26 11:52", "user": "icebox", "body": "Elarcis: perfect :)"}, {"timstamp": "2017-07-26 11:53", "user": "icebox", "body": "welcome to modern angularjs :)"}, {"timstamp": "2017-07-26 11:55", "user": "Elarcis", "body": "icebox: well... it still lacks modules, but I hate SystemJS and configuring it"}, {"timstamp": "2017-07-26 11:55", "user": "icebox", "body": "agreed"}, {"timstamp": "2017-07-26 11:57", "user": "Elarcis", "body": "o/"}, {"timstamp": "2017-07-26 11:59", "user": "bs0d", "body": "Elarcis I reproduced my situation in Plunker here:"}, {"timstamp": "2017-07-26 11:59", "user": "bs0d", "body": "icebox it would be awesome if you could take a look at it as well, maybe you spot something weird"}, {"timstamp": "2017-07-26 12:01", "user": "SargoDarya", "body": "bs0d: That thing is out of scope"}, {"timstamp": "2017-07-26 12:01", "user": "SargoDarya", "body": "result is not available where you're trying to log it."}, {"timstamp": "2017-07-26 12:02", "user": "SargoDarya", "body": "Or better said, your not taking any arguments in the records callback"}, {"timstamp": "2017-07-26 12:03", "user": "SargoDarya", "body": "And if you fix that, lastCallback won't be defined because it's a class member and you access class members by using this."}, {"timstamp": "2017-07-26 12:04", "user": "SargoDarya", "body": "bs0d: Here's an updated working version"}, {"timstamp": "2017-07-26 12:04", "user": "SargoDarya", "body": "Check the differences"}, {"timstamp": "2017-07-26 12:06", "user": "bs0d", "body": "SargoDarya oh, I was missing the return *facepalm*. I implicitly assumed that the value returned by the last call is returned by .then()"}, {"timstamp": "2017-07-26 12:06", "user": "SargoDarya", "body": "I personally use 2, except for continuation indents where I'm using 4"}, {"timstamp": "2017-07-26 12:06", "user": "SargoDarya", "body": "Not only the return, you were missing the records in the callback method"}, {"timstamp": "2017-07-26 12:06", "user": "SargoDarya", "body": "Happens, no worries."}], "label": "other"}
{"id": "93d594fe", "body": "", "comments": [{"timstamp": "2019-02-13 19:02", "user": "Social-Reject", "body": "hello. How should I implement $rootScope.$emit in angular 7"}], "label": "other"}
{"id": "93d59543", "body": "", "comments": [{"timstamp": "2016-08-20 14:19", "user": "Foxandxss", "body": "they are still two different technologies"}, {"timstamp": "2016-08-20 14:22", "user": "tilerendering", "body": "Foxandxss: they are similar however. and some of the concepts in angular do not have to be re-read by a java developer familiar with gwt or jsf"}, {"timstamp": "2016-08-20 14:22", "user": "tilerendering", "body": "thats not what I heard, but point taken"}, {"timstamp": "2016-08-20 14:22", "user": "Foxandxss", "body": "I recommend you simply going over some updated documentation (or angular 2 if possible) and not trying to map your existing knowledge like that"}, {"timstamp": "2016-08-20 14:23", "user": "heartburn", "body": "tilerendering: if you really want to make it look more like java, you should try typescript."}, {"timstamp": "2016-08-20 14:24", "user": "tilerendering", "body": "I remember ppl telling me not to go for angular 2 but I dont remember why"}, {"timstamp": "2016-08-20 14:24", "user": "tilerendering", "body": "Foxandxss: hm"}, {"timstamp": "2016-08-20 14:24", "user": "heartburn", "body": "if you're a long-time backend dev, ts should give you a raging boner once you get familiar with it."}, {"timstamp": "2016-08-20 14:24", "user": "tilerendering", "body": "i can live typeless"}, {"timstamp": "2016-08-20 14:25", "user": "Foxandxss", "body": "There is a say in Spanish. If you can remember what it was, it was probably a lie"}, {"timstamp": "2016-08-20 14:25", "user": "Foxandxss", "body": ":P"}, {"timstamp": "2016-08-20 14:25", "user": "barraponto", "body": "tilerendering: i can understand people saying \"don't go angular2 *yet*\"."}, {"timstamp": "2016-08-20 14:25", "user": "tilerendering", "body": "why not yet ?"}, {"timstamp": "2016-08-20 14:25", "user": "barraponto", "body": "tilerendering: not to go at all is nonsense, though."}, {"timstamp": "2016-08-20 14:25", "user": "tilerendering", "body": "will angular 2 have browser incompatibility issues ?"}, {"timstamp": "2016-08-20 14:25", "user": "tilerendering", "body": "is it heavily using only partly widespread ecma6 capabilities ?"}, {"timstamp": "2016-08-20 14:25", "user": "Foxandxss", "body": "ng2 has more or less the same compatibility as ng1"}, {"timstamp": "2016-08-20 14:26", "user": "Foxandxss", "body": "if not the same"}, {"timstamp": "2016-08-20 14:26", "user": "barraponto", "body": "Foxandxss: how is that saying in spanish? would love to learn it."}, {"timstamp": "2016-08-20 14:26", "user": "tilerendering", "body": "ok"}, {"timstamp": "2016-08-20 14:26", "user": "tilerendering", "body": "so what is the con ?"}, {"timstamp": "2016-08-20 14:26", "user": "heartburn", "body": "chances are, that by the time ng2 is released nobody will need it."}, {"timstamp": "2016-08-20 14:26", "user": "Foxandxss", "body": "barraponto: in really the original one is something like: \"Hey, I was going to tell you something but I Forgot...\", \"Then it was probably a lie\""}, {"timstamp": "2016-08-20 14:26", "user": "tilerendering", "body": "why ?"}, {"timstamp": "2016-08-20 14:26", "user": "heartburn", "body": "because there are better solutions around."}, {"timstamp": "2016-08-20 14:26", "user": "barraponto", "body": "Foxandxss: i know spanish (i'm half peruvian), hit me."}, {"timstamp": "2016-08-20 14:27", "user": "Foxandxss", "body": "heartburn: people are needing and using it now"}, {"timstamp": "2016-08-20 14:27", "user": "tilerendering", "body": "I can imagine one con: one is more likely to get help on angular 1 problems in communities"}, {"timstamp": "2016-08-20 14:27", "user": "Foxandxss", "body": "barraponto: \"Oye te iba a decir algo pero se me olvido\", \"Ah, entonces mentira seria\""}, {"timstamp": "2016-08-20 14:27", "user": "tilerendering", "body": "heartburn: can you quote some examples ?"}, {"timstamp": "2016-08-20 14:27", "user": "heartburn", "body": "react, vue, ng1."}, {"timstamp": "2016-08-20 14:28", "user": "heartburn", "body": "ng2 doesn't do anything that those three cannot."}, {"timstamp": "2016-08-20 14:28", "user": "barraponto", "body": "tilerendering: it's ok to learn ng1. go for it."}, {"timstamp": "2016-08-20 14:28", "user": "tilerendering", "body": "react has the issue that fb can revoke your license if youre building something that can compete with it"}, {"timstamp": "2016-08-20 14:28", "user": "heartburn", "body": "and it is much more complex."}, {"timstamp": "2016-08-20 14:28", "user": "tilerendering", "body": "hm"}, {"timstamp": "2016-08-20 14:28", "user": "heartburn", "body": "that was debunked many times, google it up."}, {"timstamp": "2016-08-20 14:28", "user": "Foxandxss", "body": "heartburn: It you really dug into ng2, you would know that ng1 is more complex than ng2"}, {"timstamp": "2016-08-20 14:29", "user": "heartburn", "body": "i dunno man, i don't like all the deps i have to install in order to make ng2 work. with ng1 i don't need anything, just it."}, {"timstamp": "2016-08-20 14:29", "user": "heartburn", "body": "the setup process is unnecessarily convoluted."}, {"timstamp": "2016-08-20 14:29", "user": "Foxandxss", "body": "Yes, tooling is way more complex"}, {"timstamp": "2016-08-20 14:30", "user": "Foxandxss", "body": "but that is what you get as today"}, {"timstamp": "2016-08-20 14:30", "user": "Foxandxss", "body": "in any other alternative as well"}, {"timstamp": "2016-08-20 14:30", "user": "Foxandxss", "body": "is the future we have with Javascript now"}, {"timstamp": "2016-08-20 14:30", "user": "heartburn", "body": "well, with ng1 i get all the same stuff with 0 deps. why switch?"}, {"timstamp": "2016-08-20 14:30", "user": "Foxandxss", "body": "is not something that Angular 2 wanted to do"}, {"timstamp": "2016-08-20 14:30", "user": "Foxandxss", "body": "angular 2 is way faster, for starters"}, {"timstamp": "2016-08-20 14:30", "user": "Foxandxss", "body": "it has universal support as well"}, {"timstamp": "2016-08-20 14:30", "user": "heartburn", "body": "vue is faster."}, {"timstamp": "2016-08-20 14:30", "user": "Foxandxss", "body": "web components"}, {"timstamp": "2016-08-20 14:31", "user": "heartburn", "body": "and it's also just ~30kb"}, {"timstamp": "2016-08-20 14:31", "user": "tilerendering", "body": "is angular slow ?"}, {"timstamp": "2016-08-20 14:31", "user": "barraponto", "body": "never heard the react license myth."}, {"timstamp": "2016-08-20 14:31", "user": "Foxandxss", "body": "vue is not a framework like Angular"}, {"timstamp": "2016-08-20 14:32", "user": "Foxandxss", "body": "is not a fair comparison"}, {"timstamp": "2016-08-20 14:32", "user": "Foxandxss", "body": "and with AoT ng2 gets into that size"}, {"timstamp": "2016-08-20 14:32", "user": "Foxandxss", "body": "tilerendering: ng1 can suffer slowness with some patterns. It is not like you are going to see those issues in all applications, but let's say that you need to be more aware of what you do"}, {"timstamp": "2016-08-20 14:33", "user": "heartburn", "body": "Foxandxss: i'm not trying to prove you wrong, i'm just making a point that for most things nowadays you don't need ng2 because there are simpler solutions."}, {"timstamp": "2016-08-20 14:34", "user": "heartburn", "body": "for heavy stuff, sure, ng would be a better solution."}, {"timstamp": "2016-08-20 14:34", "user": "heartburn", "body": "but for heavy stuff only."}, {"timstamp": "2016-08-20 14:34", "user": "tilerendering", "body": "Foxandxss: can you give me an example of such antipatterns ?"}, {"timstamp": "2016-08-20 14:34", "user": "Foxandxss", "body": "yeah, at the end you are free to pick the best tool for your needs"}, {"timstamp": "2016-08-20 14:34", "user": "Foxandxss", "body": "none of them is the holy grail, just yet another solution"}, {"timstamp": "2016-08-20 14:35", "user": "Foxandxss", "body": "tilerendering: angular relies on some loops to update your pages. If you \"hook\" into that loop and do something potentially slow, your application goes down"}, {"timstamp": "2016-08-20 14:35", "user": "tilerendering", "body": "oh man."}, {"timstamp": "2016-08-20 14:35", "user": "barraponto", "body": "tilerendering: everyone has a favorite. pick one. then pick another."}, {"timstamp": "2016-08-20 14:35", "user": "barraponto", "body": "don't let choice paralyse you."}, {"timstamp": "2016-08-20 14:36", "user": "barraponto", "body": "(also, take a look at reduxjs)"}, {"timstamp": "2016-08-20 14:36", "user": "tilerendering", "body": "Foxandxss: I can already imagine that my extensive use of promises will yield slow angular behavior to me"}, {"timstamp": "2016-08-20 14:36", "user": "Foxandxss", "body": "tilerendering: there are thousand of applications running out there, they are running fine"}, {"timstamp": "2016-08-20 14:36", "user": "Foxandxss", "body": "no, promises won't slow you down"}, {"timstamp": "2016-08-20 14:36", "user": "tilerendering", "body": "ok"}, {"timstamp": "2016-08-20 14:36", "user": "Foxandxss", "body": "still, if this is a personal choice, I would check ng2 over ng1 all day long"}, {"timstamp": "2016-08-20 14:37", "user": "Foxandxss", "body": "and I am honest. I wouldn't recommend ng2 say 3 months ago"}, {"timstamp": "2016-08-20 14:37", "user": "Foxandxss", "body": "but now, it has the community it needs and well, I shouldn't comment about the doc"}, {"timstamp": "2016-08-20 14:37", "user": "heartburn", "body": "pretty sure i say you recommending it three months ago here, m8."}, {"timstamp": "2016-08-20 14:37", "user": "heartburn", "body": "saw*"}, {"timstamp": "2016-08-20 14:37", "user": "heartburn", "body": ";p"}, {"timstamp": "2016-08-20 14:38", "user": "Foxandxss", "body": "who says 3, says 4"}, {"timstamp": "2016-08-20 14:38", "user": "Foxandxss", "body": "but honestly, in the past, there were no material design, no bootstrap, no other libraries that could make your application possible"}, {"timstamp": "2016-08-20 14:38", "user": "Foxandxss", "body": "only relying in the core was a bad idea"}, {"timstamp": "2016-08-20 14:38", "user": "Foxandxss", "body": "but that is changing and quite fast"}], "label": "other"}
{"id": "93d5954e", "body": "", "comments": [{"timstamp": "2018-01-12 19:58", "user": "SuperTyp", "body": "if an Component is declared in app.module.ts"}, {"timstamp": "2018-01-12 19:59", "user": "SuperTyp", "body": "is it accessible globally?"}, {"timstamp": "2018-01-12 19:59", "user": "SuperTyp", "body": "a*"}, {"timstamp": "2018-01-12 20:00", "user": "SuperTyp", "body": "I mean, I have a submodule thats lazy loaded and I want to use a component that is declared and exported in app.module"}, {"timstamp": "2018-01-12 20:09", "user": "HeartMeeple", "body": "SuperTyp: I believe it should be accesible globally if you have the appropriate imports."}, {"timstamp": "2018-01-12 20:10", "user": "HeartMeeple", "body": "Although it sounds like you ar trying to do something different somehow."}, {"timstamp": "2018-01-12 20:10", "user": "SuperTyp", "body": "well I realized I need to restructure my app a little bit"}, {"timstamp": "2018-01-12 20:10", "user": "SuperTyp", "body": "didn't make sense"}, {"timstamp": "2018-01-12 20:11", "user": "SuperTyp", "body": "with the restructuring I could solve my problem"}], "label": "other"}
{"id": "93d594e4", "body": "", "comments": [{"timstamp": "2017-07-12 00:22", "user": "da_wunder", "body": "and anything symfony specific ?"}, {"timstamp": "2017-07-12 00:22", "user": "ChaosBringer", "body": "There's a bundle for the tactician command bus"}, {"timstamp": "2017-07-12 00:22", "user": "ChaosBringer", "body": "that plugs in middle ware"}, {"timstamp": "2017-07-12 00:22", "user": "ChaosBringer", "body": "into your commandbus to bridge doctrine"}, {"timstamp": "2017-07-12 00:22", "user": "ChaosBringer", "body": "it's nice because it encapsulates your command handlers in transactions"}, {"timstamp": "2017-07-12 00:23", "user": "ChaosBringer", "body": "so you can persist a bunch of different objects and when the handler returns, the middleware takes over and flushes your persists"}, {"timstamp": "2017-07-12 00:23", "user": "ChaosBringer", "body": "in an atomic operation"}, {"timstamp": "2017-07-12 00:23", "user": "ChaosBringer", "body": "without you having to do that yourself"}, {"timstamp": "2017-07-12 00:23", "user": "ChaosBringer", "body": ""}, {"timstamp": "2017-07-12 00:23", "user": "da_wunder", "body": "i will need to read more about that"}, {"timstamp": "2017-07-12 00:24", "user": "ChaosBringer", "body": "martin fowler and robert c martin have some good stuff"}, {"timstamp": "2017-07-12 00:24", "user": "ChaosBringer", "body": "robert c is one of the guys that pushes for SOLID"}, {"timstamp": "2017-07-12 00:24", "user": "ChaosBringer", "body": ""}, {"timstamp": "2017-07-12 00:24", "user": "ChaosBringer", "body": "It's one of the things i ask about in interviews"}, {"timstamp": "2017-07-12 00:25", "user": "da_wunder", "body": "yeah those patterns are familiar"}, {"timstamp": "2017-07-12 00:26", "user": "ChaosBringer", "body": "Well, SOLID is not so much patterns as much as they are principles"}, {"timstamp": "2017-07-12 00:26", "user": "ChaosBringer", "body": "they apply to almost all languages that are OOP"}, {"timstamp": "2017-07-12 00:26", "user": "da_wunder", "body": "ChaosBringer: but really thanks, i think this has been most interesting talk in months"}, {"timstamp": "2017-07-12 00:26", "user": "ChaosBringer", "body": "lol @zomg"}, {"timstamp": "2017-07-12 00:26", "user": "ChaosBringer", "body": "np @da_wunder"}, {"timstamp": "2017-07-12 00:26", "user": "ChaosBringer", "body": ":D"}, {"timstamp": "2017-07-12 00:26", "user": "ChaosBringer", "body": "i'm still learning angular"}, {"timstamp": "2017-07-12 00:27", "user": "ChaosBringer", "body": "but i've been coding since i was about 12"}, {"timstamp": "2017-07-12 00:27", "user": "ChaosBringer", "body": "got featured at the sf conference back in 2015"}, {"timstamp": "2017-07-12 00:27", "user": "ChaosBringer", "body": "which was kinda cool"}, {"timstamp": "2017-07-12 00:27", "user": "ChaosBringer", "body": "always be learning"}, {"timstamp": "2017-07-12 00:27", "user": "ChaosBringer", "body": "that's my approach!"}, {"timstamp": "2017-07-12 00:27", "user": "zomg", "body": "yeah"}, {"timstamp": "2017-07-12 00:27", "user": "zomg", "body": ""}, {"timstamp": "2017-07-12 00:27", "user": "zomg", "body": "kind of related :)"}, {"timstamp": "2017-07-12 00:27", "user": "Violinist", "body": "aww crap"}, {"timstamp": "2017-07-12 00:27", "user": "ChaosBringer", "body": "Lol"}, {"timstamp": "2017-07-12 00:28", "user": "ChaosBringer", "body": "my gf hates it when i do that"}, {"timstamp": "2017-07-12 00:28", "user": "Violinist", "body": "my symfony code was perfect"}, {"timstamp": "2017-07-12 00:28", "user": "da_wunder", "body": "my princinple is learn something new everyday"}, {"timstamp": "2017-07-12 00:28", "user": "ChaosBringer", "body": "I'll idle more around in these channels though, definitely interesting"}, {"timstamp": "2017-07-12 00:28", "user": "Violinist", "body": "till i carried over this piece"}, {"timstamp": "2017-07-12 00:28", "user": "ChaosBringer", "body": "what piece Violinist ?"}, {"timstamp": "2017-07-12 00:28", "user": "da_wunder", "body": "zomg: and i'm on my summer vacation :D"}, {"timstamp": "2017-07-12 00:28", "user": "Violinist", "body": "piece of shit"}, {"timstamp": "2017-07-12 00:29", "user": "ChaosBringer", "body": "? lol"}, {"timstamp": "2017-07-12 00:29", "user": "Violinist", "body": "lelelelel"}, {"timstamp": "2017-07-12 00:29", "user": "da_wunder", "body": "ChaosBringer: he asked multiple questions on #symfony, but never answered any questions that people asked him about his problem"}, {"timstamp": "2017-07-12 00:29", "user": "Violinist", "body": "i should php_get_contents it"}, {"timstamp": "2017-07-12 00:29", "user": "Violinist", "body": "lel"}, {"timstamp": "2017-07-12 00:30", "user": "da_wunder", "body": "ChaosBringer: finally he got kickban on that channel"}, {"timstamp": "2017-07-12 00:30", "user": "ChaosBringer", "body": "omg"}, {"timstamp": "2017-07-12 00:30", "user": "ChaosBringer", "body": "hahahaha"}, {"timstamp": "2017-07-12 00:30", "user": "zomg", "body": "lol"}, {"timstamp": "2017-07-12 00:30", "user": "zomg", "body": "that sounds like an achievement tbh"}, {"timstamp": "2017-07-12 00:30", "user": "Violinist", "body": "yeah he got me banned this idiot"}, {"timstamp": "2017-07-12 00:30", "user": "zomg", "body": "iirc symfony folks are fairly relaxed :P"}, {"timstamp": "2017-07-12 00:30", "user": "Violinist", "body": "i dont talk to this troll anymore"}, {"timstamp": "2017-07-12 00:30", "user": "ChaosBringer", "body": "so @Violinist got banned or zomg?"}, {"timstamp": "2017-07-12 00:30", "user": "da_wunder", "body": "Violinist: i didn't ban you, and again i don't troll anyone"}, {"timstamp": "2017-07-12 00:30", "user": "da_wunder", "body": "ChaosBringer: Violinist"}, {"timstamp": "2017-07-12 00:30", "user": "Violinist", "body": "da_wunder, got me banned"}, {"timstamp": "2017-07-12 00:30", "user": "ChaosBringer", "body": "Ah"}, {"timstamp": "2017-07-12 00:31", "user": "zomg", "body": "considering half of the time you talk to him you're just trying to argue about some bs I'd welcome you not talking to him anymore"}, {"timstamp": "2017-07-12 00:31", "user": "zomg", "body": ":P"}, {"timstamp": "2017-07-12 00:31", "user": "Violinist", "body": "he kept trolling untill i got banned"}, {"timstamp": "2017-07-12 00:31", "user": "Violinist", "body": "lol"}, {"timstamp": "2017-07-12 00:31", "user": "ChaosBringer", "body": "Btw, i recommend mockery for mocks/stubs/spies in php land"}, {"timstamp": "2017-07-12 00:31", "user": "ChaosBringer", "body": "i've been trying out ts-mocquito here in ts land"}, {"timstamp": "2017-07-12 00:31", "user": "ChaosBringer", "body": "but it doesn't feel quite right"}, {"timstamp": "2017-07-12 00:32", "user": "ChaosBringer", "body": ""}, {"timstamp": "2017-07-12 00:32", "user": "ChaosBringer", "body": "ts-mockito**"}, {"timstamp": "2017-07-12 00:32", "user": "Violinist", "body": "its too bad ts cant be read by browser"}, {"timstamp": "2017-07-12 00:32", "user": "ChaosBringer", "body": "any good mocking libraries for typescript that are similar to mockery or mockito in java?"}, {"timstamp": "2017-07-12 00:32", "user": "zomg", "body": "yeah I was asking padraic a while ago whether mockery is still the sort of standard thing"}, {"timstamp": "2017-07-12 00:32", "user": "zomg", "body": ":P"}, {"timstamp": "2017-07-12 00:32", "user": "Violinist", "body": "its a bit more legible than js"}, {"timstamp": "2017-07-12 00:32", "user": "ChaosBringer", "body": "IMHO it is"}, {"timstamp": "2017-07-12 00:32", "user": "zomg", "body": "well, besides phpunit mocks"}, {"timstamp": "2017-07-12 00:32", "user": "zomg", "body": "yeah"}, {"timstamp": "2017-07-12 00:32", "user": "ChaosBringer", "body": "I know the guy that created phake"}, {"timstamp": "2017-07-12 00:32", "user": "ChaosBringer", "body": "we used to work together"}, {"timstamp": "2017-07-12 00:32", "user": "ChaosBringer", "body": "i don't like it as much as I like mockery"}, {"timstamp": "2017-07-12 00:33", "user": "zomg", "body": "chris hartjes said the same thing"}, {"timstamp": "2017-07-12 00:33", "user": "zomg", "body": "and I trust him on this matter =)"}, {"timstamp": "2017-07-12 00:33", "user": "ChaosBringer", "body": "lol"}, {"timstamp": "2017-07-12 00:33", "user": "ChaosBringer", "body": "sounds like a smart man"}, {"timstamp": "2017-07-12 00:33", "user": "zomg", "body": "he's probably one of the sort of go to experts when it comes to php testing"}, {"timstamp": "2017-07-12 00:38", "user": "ChaosBringer", "body": "So, nothing as good for mocks as mockery yet?"}, {"timstamp": "2017-07-12 00:38", "user": "ChaosBringer", "body": "in typescript that is"}, {"timstamp": "2017-07-12 00:39", "user": "da_wunder", "body": "haven't used anything else"}, {"timstamp": "2017-07-12 00:39", "user": "ChaosBringer", "body": "what do you mean"}, {"timstamp": "2017-07-12 00:39", "user": "ChaosBringer", "body": "what are you using?"}, {"timstamp": "2017-07-12 00:39", "user": "zomg", "body": "does that ts lib have some ts-specific mocking stuff in it?"}, {"timstamp": "2017-07-12 00:39", "user": "zomg", "body": "because if not, I'd just go with Sinon or Testdouble.js :P"}, {"timstamp": "2017-07-12 00:39", "user": "ChaosBringer", "body": "ts-mockito? Dunno. It seems to be strongly typed"}, {"timstamp": "2017-07-12 00:40", "user": "ChaosBringer", "body": "which for me it's a big deal"}, {"timstamp": "2017-07-12 00:40", "user": "ChaosBringer", "body": "i'm on php 7.1"}, {"timstamp": "2017-07-12 00:40", "user": "ChaosBringer", "body": "and typescript for that reason"}, {"timstamp": "2017-07-12 00:40", "user": "ChaosBringer", "body": ":D"}, {"timstamp": "2017-07-12 00:40", "user": "zomg", "body": "Does it catch something like if you try to stub a function which doesn't exist"}, {"timstamp": "2017-07-12 00:40", "user": "ChaosBringer", "body": "yeah"}, {"timstamp": "2017-07-12 00:40", "user": "da_wunder", "body": "ChaosBringer: oh you were talking ts side ?"}, {"timstamp": "2017-07-12 00:40", "user": "ChaosBringer", "body": "da_wunder, yeah"}, {"timstamp": "2017-07-12 00:40", "user": "zomg", "body": "Let's say you had some class with Foobar.someMethod"}, {"timstamp": "2017-07-12 00:40", "user": "zomg", "body": "and you rename it to Foobar.otherMethod"}, {"timstamp": "2017-07-12 00:40", "user": "ChaosBringer", "body": "It'll fail"}, {"timstamp": "2017-07-12 00:40", "user": "zomg", "body": "I know sinon and such won't catch that necessarily and your tests might keep passing"}, {"timstamp": "2017-07-12 00:41", "user": "ChaosBringer", "body": "@zomg,"}, {"timstamp": "2017-07-12 00:41", "user": "ChaosBringer", "body": "it'll fail even if it doesn't have the exact params"}, {"timstamp": "2017-07-12 00:41", "user": "ChaosBringer", "body": "like mockery does"}, {"timstamp": "2017-07-12 00:41", "user": "zomg", "body": "sounds fairly useful then yeah"}, {"timstamp": "2017-07-12 00:41", "user": "ChaosBringer", "body": "but it's not as robust as mockery yet"}, {"timstamp": "2017-07-12 00:41", "user": "da_wunder", "body": "aah, then i have just jasmine for those"}, {"timstamp": "2017-07-12 00:41", "user": "ChaosBringer", "body": "I see @da_wunder"}, {"timstamp": "2017-07-12 00:42", "user": "ChaosBringer", "body": "some of the questions in ##php are silly"}, {"timstamp": "2017-07-12 00:43", "user": "ChaosBringer", "body": "<some guy> what is the best way to parse a string in php. i have something like \"xxxx:yyyy;zzzz\" i want to extract everything everything between the :"}, {"timstamp": "2017-07-12 00:43", "user": "ChaosBringer", "body": "lmao"}, {"timstamp": "2017-07-12 00:43", "user": "ChaosBringer", "body": "rtfd"}, {"timstamp": "2017-07-12 00:43", "user": "ChaosBringer", "body": "?"}, {"timstamp": "2017-07-12 00:43", "user": "ChaosBringer", "body": "lmgtfy"}, {"timstamp": "2017-07-12 00:43", "user": "ChaosBringer", "body": "jeezus"}, {"timstamp": "2017-07-12 00:43", "user": "da_wunder", "body": ":D"}, {"timstamp": "2017-07-12 00:45", "user": "da_wunder", "body": "if i understood that correctyly [$foo, $bar] = \\explode(':', 'xxxx:yyyy;zzzz');"}, {"timstamp": "2017-07-12 00:46", "user": "ChaosBringer", "body": "yep."}, {"timstamp": "2017-07-12 00:46", "user": "ChaosBringer", "body": "Or you can use Stringy, or even my own library"}, {"timstamp": "2017-07-12 00:46", "user": "ChaosBringer", "body": "lol"}, {"timstamp": "2017-07-12 00:46", "user": "ChaosBringer", "body": "PhpTypes"}, {"timstamp": "2017-07-12 00:47", "user": "ChaosBringer", "body": "I swear, tons of people don't google enough"}, {"timstamp": "2017-07-12 00:47", "user": "ChaosBringer", "body": "I do have a question regarding angular child components if anyone here feels like throwing me a bone"}, {"timstamp": "2017-07-12 00:47", "user": "ChaosBringer", "body": "i've googled and can't find a straight answer"}, {"timstamp": "2017-07-12 00:47", "user": "da_wunder", "body": "true, or open links and read those that the have provided"}, {"timstamp": "2017-07-12 00:49", "user": "da_wunder", "body": "ChaosBringer: that won't cover your issue"}, {"timstamp": "2017-07-12 00:50", "user": "ChaosBringer", "body": "I have @input on all of them. The problem is that i'm trying to use the value in the view. I used setters and getters and it was still using the same instance"}, {"timstamp": "2017-07-12 00:50", "user": "ChaosBringer", "body": "@da_wunder, i'll try it again though, maybe i did something wrong the first time"}, {"timstamp": "2017-07-12 00:51", "user": "devlap", "body": "The seconds are changing on subsequent calls"}, {"timstamp": "2017-07-12 00:51", "user": "ChaosBringer", "body": "the thing is since i have two children of the same sub component in the parent, when i change the value of a property in one, it seems to also change it in the other child"}, {"timstamp": "2017-07-12 00:51", "user": "ChaosBringer", "body": "let me try that"}, {"timstamp": "2017-07-12 00:52", "user": "ChaosBringer", "body": "@devlap, i would recommend using moment for date manipulation"}, {"timstamp": "2017-07-12 00:52", "user": "ChaosBringer", "body": "it has typescript bindings"}, {"timstamp": "2017-07-12 00:53", "user": "da_wunder", "body": "and why to use external library for that"}, {"timstamp": "2017-07-12 00:53", "user": "da_wunder", "body": "i highly recommend to what that out"}, {"timstamp": "2017-07-12 00:54", "user": "da_wunder", "body": "s/what/whatch"}, {"timstamp": "2017-07-12 00:54", "user": "devlap", "body": "Ok. I'm new to the modern javascript scene. I have all my times in UTC already."}, {"timstamp": "2017-07-12 00:54", "user": "ChaosBringer", "body": "That's good."}, {"timstamp": "2017-07-12 00:54", "user": "devlap", "body": "Not aware of all the regular libs."}, {"timstamp": "2017-07-12 00:54", "user": "ChaosBringer", "body": "see this:"}, {"timstamp": "2017-07-12 00:54", "user": "da_wunder", "body": "s/whatch/watch"}, {"timstamp": "2017-07-12 00:54", "user": "ChaosBringer", "body": ""}, {"timstamp": "2017-07-12 00:54", "user": "da_wunder", "body": "damn those typos"}, {"timstamp": "2017-07-12 00:55", "user": "da_wunder", "body": "words that i don't usually use"}, {"timstamp": "2017-07-12 00:55", "user": "ChaosBringer", "body": "add this to your package.json"}, {"timstamp": "2017-07-12 00:55", "user": "devlap", "body": "anyways what I did is just store the time when the dataservice pulled the data and not having it call new Date() - itemDate."}, {"timstamp": "2017-07-12 00:55", "user": "ChaosBringer", "body": "\"moment\": \"^2.18\","}, {"timstamp": "2017-07-12 00:55", "user": "ChaosBringer", "body": "\"moment-timezone\": \"^0.5\","}, {"timstamp": "2017-07-12 00:55", "user": "devlap", "body": "\"moment\": \"^2.18.1\","}, {"timstamp": "2017-07-12 00:55", "user": "da_wunder", "body": "or just npm install moment moment-timezone"}, {"timstamp": "2017-07-12 00:55", "user": "devlap", "body": "already there."}, {"timstamp": "2017-07-12 00:55", "user": "ChaosBringer", "body": "ok"}, {"timstamp": "2017-07-12 00:56", "user": "ChaosBringer", "body": "why not"}, {"timstamp": "2017-07-12 00:56", "user": "ChaosBringer", "body": "moment(your-date).format('ss [seconds]')"}, {"timstamp": "2017-07-12 00:57", "user": "devlap", "body": "Because when the datatable scrolls I get the error I mentioned"}, {"timstamp": "2017-07-12 00:57", "user": "devlap", "body": "ExpressionChangedAfterItHasBeenCheckedError"}, {"timstamp": "2017-07-12 00:57", "user": "devlap", "body": "the seconds since will change in the middle of a redraw"}, {"timstamp": "2017-07-12 00:58", "user": "ChaosBringer", "body": ""}, {"timstamp": "2017-07-12 00:58", "user": "da_wunder", "body": "devlap: then add that to your data on your resource .map function"}, {"timstamp": "2017-07-12 00:58", "user": "Violinist", "body": "devlap, just dump datatables"}, {"timstamp": "2017-07-12 00:58", "user": "Violinist", "body": "its more trouble than benefit"}, {"timstamp": "2017-07-12 00:58", "user": "ChaosBringer", "body": "what da_wunder said as well"}, {"timstamp": "2017-07-12 00:58", "user": "devlap", "body": "Have an easy multiexpanding list?"}, {"timstamp": "2017-07-12 00:59", "user": "Violinist", "body": "ng-repeat?"}, {"timstamp": "2017-07-12 00:59", "user": "da_wunder", "body": "devlap: you're using that"}, {"timstamp": "2017-07-12 00:59", "user": "ChaosBringer", "body": ".map() should make it a part of the model returned"}, {"timstamp": "2017-07-12 00:59", "user": "devlap", "body": "yea ngx-datatable I was working with ng2-table but it didn't have two items being expanded."}, {"timstamp": "2017-07-12 00:59", "user": "devlap", "body": "ngx supports multiple expanded rows"}, {"timstamp": "2017-07-12 01:00", "user": "da_wunder", "body": "devlap: and in that you have some method call to your component class, that makes that moment... ?"}, {"timstamp": "2017-07-12 01:00", "user": "da_wunder", "body": "Violinist: this is an angular issue not angularjs one"}, {"timstamp": "2017-07-12 01:01", "user": "devlap", "body": "<i [innerHTML]=\"formateTime(row['lastContactTime'])\"></i>"}, {"timstamp": "2017-07-12 01:01", "user": "devlap", "body": "I have that as a column"}, {"timstamp": "2017-07-12 01:01", "user": "devlap", "body": "which reports X Seconds since new Date()"}, {"timstamp": "2017-07-12 01:01", "user": "da_wunder", "body": "devlap: and that is your problem, just to see that add simple simple console.log('foo'); to that method"}, {"timstamp": "2017-07-12 01:02", "user": "devlap", "body": "It works fine. the problem is, it updates twice and it goes from 2 seconds to 3 seconds in a redraw"}, {"timstamp": "2017-07-12 01:02", "user": "da_wunder", "body": "devlap: reload your page and basically do \"anything\" eg. click somewhere, type some text to some input, etc."}, {"timstamp": "2017-07-12 01:02", "user": "devlap", "body": "and some debugMode check"}, {"timstamp": "2017-07-12 01:02", "user": "devlap", "body": "that the view hasnt changed gets set off"}, {"timstamp": "2017-07-12 01:02", "user": "da_wunder", "body": "devlap: that method is called every time \"something\" is changind"}, {"timstamp": "2017-07-12 01:05", "user": "devlap", "body": "What causes it to only get called on template evaluation?"}, {"timstamp": "2017-07-12 01:07", "user": "da_wunder", "body": "devlap: could you make a plunker of your problem ?"}, {"timstamp": "2017-07-12 01:07", "user": "devlap", "body": "I don't have a problem anymore."}, {"timstamp": "2017-07-12 01:07", "user": "da_wunder", "body": "that would help a lot to us to see what you're doing"}, {"timstamp": "2017-07-12 01:07", "user": "devlap", "body": "I just called new Date() when I hit the dataservice and made the call determenistic across using it."}, {"timstamp": "2017-07-12 01:08", "user": "devlap", "body": "instead of calling new Date() in formateDate."}, {"timstamp": "2017-07-12 01:08", "user": "da_wunder", "body": "yeah"}, {"timstamp": "2017-07-12 01:08", "user": "devlap", "body": "is it not supposed to get called every click?"}, {"timstamp": "2017-07-12 01:10", "user": "devlap", "body": ""}, {"timstamp": "2017-07-12 01:11", "user": "da_wunder", "body": "devlap: that seems not to so that table at all"}, {"timstamp": "2017-07-12 01:11", "user": "da_wunder", "body": "s/not to so/not to show"}, {"timstamp": "2017-07-12 01:12", "user": "devlap", "body": "I just put the code for the component in, im not sure how plunkr works"}, {"timstamp": "2017-07-12 01:13", "user": "da_wunder", "body": "just like your angular app"}, {"timstamp": "2017-07-12 01:14", "user": "devlap", "body": "dataservice wont resolve as its on localhost."}, {"timstamp": "2017-07-12 01:17", "user": "ChaosBringer", "body": "@da_wunder, i figured out the problem. It wasn't related to the @inputs, i was doing that part properly"}, {"timstamp": "2017-07-12 01:17", "user": "ChaosBringer", "body": "the problem was radio buttons and IDs not being set properly since i was dynamically settings those"}, {"timstamp": "2017-07-12 01:17", "user": "ChaosBringer", "body": "lol."}, {"timstamp": "2017-07-12 01:17", "user": "ChaosBringer", "body": "the id was the same and html was just basically changing the value of each one since the ID was the same"}, {"timstamp": "2017-07-12 01:17", "user": "ChaosBringer", "body": "silly me."}, {"timstamp": "2017-07-12 01:18", "user": "da_wunder", "body": "ChaosBringer: nice that you found that"}, {"timstamp": "2017-07-12 01:20", "user": "devlap", "body": "does plunkr have ngx datatable?"}, {"timstamp": "2017-07-12 01:21", "user": "da_wunder", "body": "devlap: it seems to have that too"}, {"timstamp": "2017-07-12 01:21", "user": "devlap", "body": "How do you tell it to put it in your app?"}, {"timstamp": "2017-07-12 01:21", "user": "da_wunder", "body": "devlap: right hand side click \"find and external libraries\""}, {"timstamp": "2017-07-12 01:22", "user": "devlap", "body": "yea i see it there"}, {"timstamp": "2017-07-12 01:22", "user": "da_wunder", "body": "then search it"}, {"timstamp": "2017-07-12 01:22", "user": "devlap", "body": "I have it searched im not sure what makes it install"}, {"timstamp": "2017-07-12 01:23", "user": "da_wunder", "body": "it should be just clicking \"add\" or \"+\" button"}, {"timstamp": "2017-07-12 01:23", "user": "devlap", "body": "I don't see a + or add"}, {"timstamp": "2017-07-12 01:24", "user": "da_wunder", "body": "or just add pure min.js file to that library"}, {"timstamp": "2017-07-12 01:25", "user": "da_wunder", "body": "or use official plunker as base of yours"}, {"timstamp": "2017-07-12 01:38", "user": "devlap", "body": ""}, {"timstamp": "2017-07-12 01:38", "user": "devlap", "body": "ERROR Error: ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked. Previous value: '49 seconds'. Current value: '50 seconds'."}, {"timstamp": "2017-07-12 03:58", "user": "devlap", "body": ""}, {"timstamp": "2017-07-12 04:00", "user": "devlap", "body": "It doesn't happen all the time but I'll see Expression has changed after it was checked. Previous value: '49 seconds'. Current value: '50 seconds'. In the plunkr the page remains functional, in my app after i get the error the app stops updating"}, {"timstamp": "2017-07-12 04:00", "user": "devlap", "body": "I really only need it to parse the template once, not everytime I click or move something."}, {"timstamp": "2017-07-12 04:04", "user": "ChaosBringer", "body": "@da_wunder, what was the URL you posted earlier with the pretty nelmio docs?"}, {"timstamp": "2017-07-12 04:06", "user": "ChaosBringer", "body": "nvm found it"}, {"timstamp": "2017-07-12 04:17", "user": "devlap", "body": "hmm"}, {"timstamp": "2017-07-12 04:17", "user": "devlap", "body": "error TS2304: Cannot find name 'object'. cant figure this one out"}], "label": "other"}
{"id": "93d59491", "body": "", "comments": [{"timstamp": "2018-12-12 14:36", "user": "Aquazi", "body": "got a question"}, {"timstamp": "2018-12-12 14:37", "user": "Aquazi", "body": "is there a way to use the angular cli in stackblitz?"}, {"timstamp": "2018-12-12 14:47", "user": "SuperTyp", "body": "Aquazi: what do you mean?"}, {"timstamp": "2018-12-12 14:47", "user": "SuperTyp", "body": "Aquazi: what is your goal?"}, {"timstamp": "2018-12-12 15:16", "user": "SuperTyp", "body": "Aquazi: answer meeeeeeeeee"}, {"timstamp": "2018-12-12 15:16", "user": "Aquazi", "body": "that was a straightforward question, how to use the CLI in stackblitz: I found the answer googling: I can't"}, {"timstamp": "2018-12-12 15:17", "user": "Aquazi", "body": "but I can use the generators by right clicking"}, {"timstamp": "2018-12-12 15:17", "user": "Aquazi", "body": "I have another question tho. I see many styles of handling routes and components and I don't really understand the various pros and cons."}, {"timstamp": "2018-12-12 15:17", "user": "SuperTyp", "body": "Aquazi: if you want to generate components etc you can right click a folder and then under Angular Generator you can find some options"}, {"timstamp": "2018-12-12 15:18", "user": "Aquazi", "body": "yes I know that I wrote it :P"}, {"timstamp": "2018-12-12 15:18", "user": "Aquazi", "body": "I have another question tho"}, {"timstamp": "2018-12-12 15:18", "user": "Aquazi", "body": ""}, {"timstamp": "2018-12-12 15:18", "user": "SuperTyp", "body": "ah sorry"}, {"timstamp": "2018-12-12 15:18", "user": "Aquazi", "body": "is that a good style of handling routes?"}, {"timstamp": "2018-12-12 15:18", "user": "Aquazi", "body": "I don't really understand the pros and cons"}, {"timstamp": "2018-12-12 15:18", "user": "SuperTyp", "body": "yes"}, {"timstamp": "2018-12-12 15:18", "user": "SuperTyp", "body": "what other variants did you see?"}, {"timstamp": "2018-12-12 15:19", "user": "Aquazi", "body": "generally I see the components declared in app.module.ts"}, {"timstamp": "2018-12-12 15:19", "user": "Pyrrhus666", "body": "Aquazi, most routing is feature(module) based."}, {"timstamp": "2018-12-12 15:19", "user": "Aquazi", "body": "yes but here there are no modules"}, {"timstamp": "2018-12-12 15:19", "user": "Aquazi", "body": "what if I wanted to use modules"}, {"timstamp": "2018-12-12 15:19", "user": "Aquazi", "body": "is having a routing module still the way to go?"}, {"timstamp": "2018-12-12 15:19", "user": "Pyrrhus666", "body": "Aquazi,"}, {"timstamp": "2018-12-12 15:19", "user": "SuperTyp", "body": "Aquazi: yes"}, {"timstamp": "2018-12-12 15:19", "user": "Pyrrhus666", "body": "Aquazi, yes"}, {"timstamp": "2018-12-12 15:20", "user": "Aquazi", "body": "what does it mean?"}, {"timstamp": "2018-12-12 15:20", "user": "Pyrrhus666", "body": "Aquazi, read the link"}, {"timstamp": "2018-12-12 15:20", "user": "Aquazi", "body": "I know what feature modules are"}, {"timstamp": "2018-12-12 15:20", "user": "Aquazi", "body": "I'm asking about their routing management"}, {"timstamp": "2018-12-12 15:21", "user": "Pyrrhus666", "body": "routes within a module are handled in the module. parent knows nothing of that"}, {"timstamp": "2018-12-12 15:21", "user": "Pyrrhus666", "body": "also enables lazy loading"}, {"timstamp": "2018-12-12 15:21", "user": "Aquazi", "body": "but how do I route across modules, I'm rather confused"}, {"timstamp": "2018-12-12 15:21", "user": "Aquazi", "body": "I write my own feature module that bootstraps, e.g., login"}, {"timstamp": "2018-12-12 15:22", "user": "SuperTyp", "body": "Aquazi: simple"}, {"timstamp": "2018-12-12 15:22", "user": "Aquazi", "body": "now what do I import and where in my router module?"}, {"timstamp": "2018-12-12 15:22", "user": "Pyrrhus666", "body": "Aquazi, generally, you a) dont or b) do that in app.module or c) route to nested child modules"}, {"timstamp": "2018-12-12 15:22", "user": "Aquazi", "body": "because router expects module"}, {"timstamp": "2018-12-12 15:22", "user": "SuperTyp", "body": "Aquazi: your feature module holds its own routing file (routes)"}, {"timstamp": "2018-12-12 15:23", "user": "SuperTyp", "body": "and imports them using RouterModule.forChild(featureModuleRoutes); in the imports"}, {"timstamp": "2018-12-12 15:23", "user": "SuperTyp", "body": "simple as that"}, {"timstamp": "2018-12-12 15:23", "user": "Aquazi", "body": "got any gh example?"}, {"timstamp": "2018-12-12 15:23", "user": "SuperTyp", "body": "sure 1 sec"}, {"timstamp": "2018-12-12 15:24", "user": "SuperTyp", "body": "Aquazi:"}, {"timstamp": "2018-12-12 15:25", "user": "Aquazi", "body": "the example doesn't run in stackblitz tho"}, {"timstamp": "2018-12-12 15:25", "user": "SuperTyp", "body": "there you go, quick description: in app-routing.module (which is imported by app.module) the routes trigger lazy load of the feature modules"}, {"timstamp": "2018-12-12 15:25", "user": "SuperTyp", "body": "doesnt matter"}, {"timstamp": "2018-12-12 15:25", "user": "SuperTyp", "body": "just look at the structure"}], "label": "other"}
{"id": "93d594ba", "body": "", "comments": [{"timstamp": "2018-07-24 18:41", "user": "Bacteria", "body": "umm so i have shared the core between two apps"}, {"timstamp": "2018-07-24 18:42", "user": "Bacteria", "body": "but how would i do that with templates"}], "label": "other"}
{"id": "93d594b1", "body": "", "comments": [{"timstamp": "2016-07-07 11:20", "user": "xQuasar", "body": "hey all, so I have a lot of data that needs to be rendered in a table, and I want to make the table display as many rows of the data as possible without needing a scrollbar"}, {"timstamp": "2016-07-07 11:20", "user": "xQuasar", "body": "Was wondering if there are any nifty ways to do that outside of manually fetching the height avilable for the table, and the height of each row, and dividing?"}, {"timstamp": "2016-07-07 11:21", "user": "xQuasar", "body": "googling for this issue has been quite elusive, either no one else has had this question before or i just can't seem to get the keywords correct"}, {"timstamp": "2016-07-07 11:21", "user": "Elarcis", "body": "xQuasar: define 'as many rows as possible', because in my understanding of the thing it means 'there is never a scrollbar'"}, {"timstamp": "2016-07-07 11:21", "user": "Elarcis", "body": ":D"}, {"timstamp": "2016-07-07 11:22", "user": "Elarcis", "body": "xQuasar: also, I believe it's doable in pure CSS"}, {"timstamp": "2016-07-07 11:22", "user": "xQuasar", "body": "Elarcis: as many rows as it takes to fill up the remaining space available for the table, such that the table doesn't extend beyond the bottom of the page thus activating the scrollbar"}, {"timstamp": "2016-07-07 11:23", "user": "Elarcis", "body": "xQuasar: well yes, it's just CSS then. do a container for your table element that has a fixed height and a scrollbar: auto, then display the table in it without properties and it should work"}, {"timstamp": "2016-07-07 11:26", "user": "Elarcis", "body": "xQuasar:"}, {"timstamp": "2016-07-07 11:27", "user": "xQuasar", "body": "Elarcis: ah I see; sorry, I'm really bad at wording things :/"}, {"timstamp": "2016-07-07 11:27", "user": "xQuasar", "body": "to clarify a bit more:"}, {"timstamp": "2016-07-07 11:28", "user": "xQuasar", "body": "I mean for there to be no scrollbar at all, so I can use angular to paginate the table and any access rows I can just do on another page"}, {"timstamp": "2016-07-07 11:28", "user": "xQuasar", "body": "should've mentioned that earlier, my bad"}, {"timstamp": "2016-07-07 11:28", "user": "xQuasar", "body": "(does that make sense?)"}, {"timstamp": "2016-07-07 11:29", "user": "Elarcis", "body": "xQuasar: well indeed you're terrible at wording things, there is absolutely no need to ever mention a scrollbar, just ask for a paging system XD"}, {"timstamp": "2016-07-07 11:30", "user": "xQuasar", "body": "Elarcis: yeah I guess so :P I suppose to main gist of my problem is working out how many rows the table can contain without extending the page below its viewport"}, {"timstamp": "2016-07-07 11:30", "user": "Elarcis", "body": "xQuasar: yeah if you want pagniation to depend on the element size, you're going to need some JS trickery"}, {"timstamp": "2016-07-07 11:31", "user": "Elarcis", "body": "xQuasar: counting the number of elements, multiplying by each element's size and dividing by the container's height is the way we did it in a similar case"}, {"timstamp": "2016-07-07 11:32", "user": "Elarcis", "body": "xQuasar: or look for a directive that might already exist"}, {"timstamp": "2016-07-07 11:33", "user": "Elarcis", "body": "xQuasar: it seems ui-grid with the flexible height plugin handles it nicely"}, {"timstamp": "2016-07-07 11:34", "user": "xQuasar", "body": "Elarcis: cool, I'll check that out, thanks a lot"}], "label": "other"}
{"id": "8addb261", "body": "", "comments": [{"timstamp": "2018-11-16 12:01", "user": "Pyrrhus666", "body": "on topic : do we have something like ng-true-value / ng-false-value for reactive checkboxes ? I only seem to get true/false out of them, regardless of value-attribute"}, {"timstamp": "2018-11-16 12:12", "user": "SuperTyp", "body": "what? :D"}, {"timstamp": "2018-11-16 12:12", "user": "SuperTyp", "body": "like if the checkbox is checked its true but it's value is \"foo\" and \"bar\" otherwise?"}, {"timstamp": "2018-11-16 12:14", "user": "Pyrrhus666", "body": "no, more like value is foo when checked and bar when unchecked. thats what ng-false-value/ng-true-value did with angularjs"}, {"timstamp": "2018-11-16 12:15", "user": "Pyrrhus666", "body": "dammit, thats what you said, sorry :)"}, {"timstamp": "2018-11-16 12:15", "user": "SuperTyp", "body": "hm, don't think so but you can easily solve this in your component"}, {"timstamp": "2018-11-16 12:15", "user": "Pyrrhus666", "body": "true, but it would be nice to be able to use the values directly (its a formarray of checkboxes)"}, {"timstamp": "2018-11-16 12:28", "user": "SuperTyp", "body": "you can write your own checkbox component:"}], "label": "feature"}
{"id": "93d5950c", "body": "", "comments": [{"timstamp": "2017-02-21 14:57", "user": "fabioas", "body": "hi there"}, {"timstamp": "2017-02-21 14:58", "user": "fabioas", "body": "im using an ng-repeat like this: ng-repeat=\"produto in produtos\""}, {"timstamp": "2017-02-21 14:58", "user": "fabioas", "body": "but if i use in conjunction with filter it gives me this beautifull error"}, {"timstamp": "2017-02-21 14:58", "user": "fabioas", "body": "TypeError: Converting circular structure to JSON"}, {"timstamp": "2017-02-21 14:59", "user": "fabioas", "body": "ng-repeat=\"produto in produtos | filter:{name:'foo'}\""}, {"timstamp": "2017-02-21 14:59", "user": "fabioas", "body": "what im doing wrong?"}, {"timstamp": "2017-02-21 14:59", "user": "icebox", "body": "h2baik_: sorry... mistell"}, {"timstamp": "2017-02-21 15:00", "user": "icebox", "body": "fabioas: it depends on your data... any chance to debug it?"}, {"timstamp": "2017-02-21 15:00", "user": "fabioas", "body": "icebox: you mean the produtos data?"}, {"timstamp": "2017-02-21 15:01", "user": "icebox", "body": "fabioas: yes"}, {"timstamp": "2017-02-21 15:01", "user": "fabioas", "body": "yes"}, {"timstamp": "2017-02-21 15:01", "user": "icebox", "body": "fabioas: try to reproduce you issue filling a plunker, template link in the topic"}, {"timstamp": "2017-02-21 15:01", "user": "icebox", "body": "fabioas: then you may give a look at it"}, {"timstamp": "2017-02-21 15:01", "user": "icebox", "body": "*then we may"}], "label": "other"}
{"id": "93d594bb", "body": "", "comments": [{"timstamp": "2016-12-15 09:05", "user": "phelix", "body": "Would anyone be able to help me, here is my question. I have some checkboxes. Depending on the value I am creating a query to update the page. Which works just fine if a single item is checked. But if they check 2 I want the directive to know they are both checked so I can generate a query that includes both options. Not sure that makes any sense."}], "label": "other"}
{"id": "93d59525", "body": "", "comments": [{"timstamp": "2016-05-25 15:16", "user": "Paladice", "body": "somebody know ng-table ?"}, {"timstamp": "2016-05-25 15:17", "user": "Paladice", "body": "because I make it :"}, {"timstamp": "2016-05-25 15:17", "user": "Paladice", "body": "somebody have an idea ?"}, {"timstamp": "2016-05-25 15:19", "user": "strinh", "body": "paladice: change $users to $data?"}, {"timstamp": "2016-05-25 15:19", "user": "ngbot", "body": "[angular.js] Narretz pushed 2 new commits to master:"}, {"timstamp": "2016-05-25 15:19", "user": "ngbot", "body": "angular.js/master d803354 Martin Staffa: docs(angular.element): note restriction in toggleClass"}, {"timstamp": "2016-05-25 15:19", "user": "ngbot", "body": "angular.js/master 36b1493 David Goldberg: style(src/Angular.js): make comment formatting consistent..."}, {"timstamp": "2016-05-25 15:20", "user": "ngbot", "body": "[angular.js] Narretz pushed 2 new commits to v1.5.x:"}, {"timstamp": "2016-05-25 15:20", "user": "ngbot", "body": "angular.js/v1.5.x aa57f57 Martin Staffa: docs(angular.element): note restriction in toggleClass"}, {"timstamp": "2016-05-25 15:20", "user": "ngbot", "body": "angular.js/v1.5.x 05c8d88 David Goldberg: style(src/Angular.js): make comment formatting consistent..."}, {"timstamp": "2016-05-25 15:20", "user": "Paladice", "body": "strinh, O_O thanks it works ! But I don't understand, in my JS, \"data\"'s name is \"users\""}, {"timstamp": "2016-05-25 15:22", "user": "strinh", "body": "paladice: it's doesn't quite work like that. just because your var is named users, it really passes a reference to the values that the var represents. The object has no idea what the var's \"name\" is."}, {"timstamp": "2016-05-25 15:25", "user": "strinh", "body": "paladice: consider this example: `var users = [\"me\", \"you\"]; var data = { players: users }; data.users === undefined; data.players === users;`"}, {"timstamp": "2016-05-25 15:27", "user": "Paladice", "body": "strinh, oh thanks, I understand now :)"}, {"timstamp": "2016-05-25 15:41", "user": "ngbot", "body": "[angular.js] Narretz pushed 1 new commit to v1.5.x:"}, {"timstamp": "2016-05-25 15:41", "user": "ngbot", "body": "angular.js/v1.5.x fda338e Robin Bohm: refactor(ngMock): use exactly equal in browserTrigger..."}, {"timstamp": "2016-05-25 15:59", "user": "Paladice", "body": "icebox, strinh or other ^^ : do you know how I can get mysql blob in angularJs. I have a webservice rest which return a dto class with 3 String and 1 Blob. But I have an error, and I don't know if it is an angular or java problem"}, {"timstamp": "2016-05-25 15:59", "user": "icebox", "body": "java :)"}, {"timstamp": "2016-05-25 15:59", "user": "Paladice", "body": "the error : 2016-05-25 15:39:21.120 WARN 3892 --- [nio-8080-exec-4] .w.s.m.s.DefaultHandlerExceptionResolver : Failed to write HTTP message: org.springframework.http.converter.HttpMessageNotWritableException: Could not write content: No serializer found for class java.io.ByteArrayInputStream and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) ) (through"}, {"timstamp": "2016-05-25 15:59", "user": "Paladice", "body": "reference chain: com.myproject.dto.UsersListDto[\"listUsers\"]->java.util.ArrayList[3]->com.myproject.model.User[\"avatar\"]->$Proxy87[\"binaryStream\"]); nested exception is com.fasterxml.jackson.databind.JsonMappingException: No serializer found for class java.io.ByteArrayInputStream and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) ) (through reference"}, {"timstamp": "2016-05-25 15:59", "user": "Paladice", "body": "chain: com.myproject.dto.UsersListDto[\"listUsers\"]->java.util.ArrayList[3]->com.myproject.model.User[\"avatar\"]->$Proxy87[\"binaryStream\"])"}, {"timstamp": "2016-05-25 15:59", "user": "Paladice", "body": "icebox, lol it's mandatory a java issue ^^ ?"}, {"timstamp": "2016-05-25 16:00", "user": "icebox", "body": "Paladice: ok... firstly don't paste that in the channel"}, {"timstamp": "2016-05-25 16:01", "user": "Paladice", "body": "sorry I didn't know that it took 3 sentences :/"}, {"timstamp": "2016-05-25 16:01", "user": "icebox", "body": "Paladice: also one was too much"}, {"timstamp": "2016-05-25 16:02", "user": "Paladice", "body": "icebox, but if paste a pastebin it's also one sentence ^^"}, {"timstamp": "2016-05-25 16:02", "user": "icebox", "body": "Paladice: pastebin or whatever is ok... not in the channel"}, {"timstamp": "2016-05-25 16:03", "user": "Paladice", "body": ""}, {"timstamp": "2016-05-25 16:04", "user": "icebox", "body": "Paladice: however... going forward... uploading a file?"}, {"timstamp": "2016-05-25 16:05", "user": "icebox", "body": "Paladice: it seems you forgot to configure the serializer"}, {"timstamp": "2016-05-25 16:05", "user": "Paladice", "body": "icebox, ok thanks I'll search it :)"}, {"timstamp": "2016-05-25 16:07", "user": "icebox", "body": "Paladice: or the payload is empty... it says \"to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS\""}, {"timstamp": "2016-05-25 16:08", "user": "icebox", "body": "Paladice: so firstly check the request... then configure spring accordingly"}, {"timstamp": "2016-05-25 16:08", "user": "Paladice", "body": "thanks you very much icebox"}, {"timstamp": "2016-05-25 16:09", "user": "icebox", "body": "Paladice: did you forgetthe decorator @RequestMapping(\"/foo\")?"}, {"timstamp": "2016-05-25 16:09", "user": "Paladice", "body": "no. I have the decorator."}, {"timstamp": "2016-05-25 16:10", "user": "icebox", "body": "Paladice: ok... so see above"}, {"timstamp": "2016-05-25 16:10", "user": "Paladice", "body": "icebox, this is my webservice :)"}, {"timstamp": "2016-05-25 16:11", "user": "icebox", "body": "Paladice: are you sure get-users-list is correct?"}, {"timstamp": "2016-05-25 16:12", "user": "icebox", "body": "Paladice: and there I would expect a Map :) @RequestMapping(\"get-users-list\") public Map<String,Object> getUsersList() {..."}, {"timstamp": "2016-05-25 16:13", "user": "Paladice", "body": "icebox, I will try it :)"}, {"timstamp": "2016-05-25 16:13", "user": "icebox", "body": "Paladice: really I cannot test it here... so maybe I am very wrong here"}, {"timstamp": "2016-05-25 16:13", "user": "icebox", "body": "temhaa: does it make sense?"}, {"timstamp": "2016-05-25 16:16", "user": "Paladice", "body": "icebox, the system.print send me :"}, {"timstamp": "2016-05-25 16:17", "user": "Paladice", "body": "and I think the issue is : avatar=com.mysql.jdbc.Blob@67b76c, you're right icebox I probably must to cast it."}, {"timstamp": "2016-05-25 16:19", "user": "temhaa", "body": "icebox: I couldn't understand. Actually I wonder to behaviour of controller"}, {"timstamp": "2016-05-25 16:20", "user": "icebox", "body": "temhaa: did you see the plunker I suggested?"}, {"timstamp": "2016-05-25 16:21", "user": "icebox", "body": "temhaa: I mean, is your question about sharing data between the controllers or you are wondering because typing in the input the text belo is not updated?"}, {"timstamp": "2016-05-25 16:22", "user": "temhaa", "body": "icebox: I saw that. It is about sharing data. Actually I mean different from that."}, {"timstamp": "2016-05-25 16:22", "user": "icebox", "body": "temhaa: ok... it is not working in that way"}, {"timstamp": "2016-05-25 16:23", "user": "temhaa", "body": "icebox: so?"}, {"timstamp": "2016-05-25 16:23", "user": "icebox", "body": "temhaa: $scope is per controller... there is a$rootScope but it is not recommended... the way is... use services"}, {"timstamp": "2016-05-25 16:24", "user": "icebox", "body": "temhaa: generally speaking..."}, {"timstamp": "2016-05-25 16:24", "user": "temhaa", "body": "icebox: {name} variable under same scope which is rootscope?"}, {"timstamp": "2016-05-25 16:25", "user": "temhaa", "body": "icebox: therefore I can't seediffeent value in output"}, {"timstamp": "2016-05-25 16:25", "user": "Paladice", "body": "temhaa, I believe that rootScope is a programm scope. $scope is juste controller scope."}, {"timstamp": "2016-05-25 16:26", "user": "icebox", "body": "temhaa: $scope is not magic... it is an object... foo1.name !== foo2.name"}, {"timstamp": "2016-05-25 16:26", "user": "Paladice", "body": "temhaa, $scope.name in controller1 is different of $scope.name in controller 2"}, {"timstamp": "2016-05-25 16:26", "user": "Paladice", "body": "application*, not \"programm\""}, {"timstamp": "2016-05-25 16:26", "user": "icebox", "body": "temhaa: \"name\" property is in the scope of controller1 and it is not equals to \"name\" property in the scope of the controller2"}, {"timstamp": "2016-05-25 16:27", "user": "Paladice", "body": "temhaa, but I believe that $rootScope.name is the same for twice controller"}, {"timstamp": "2016-05-25 16:28", "user": "sunimasuno", "body": "Paladice temhaa the way I think of it is controller1.$scope.name and controller2.$scope.name which is not 100% the structure, but functionally about right"}, {"timstamp": "2016-05-25 16:28", "user": "sunimasuno", "body": "While app.$rootScope.name is app wide"}, {"timstamp": "2016-05-25 16:28", "user": "sunimasuno", "body": "so app.controllers.controller1 sees the same $rootScope as app.controllers.controller2"}, {"timstamp": "2016-05-25 16:31", "user": "Paladice", "body": "sunimasuno, thanks for temhaa"}, {"timstamp": "2016-05-25 16:32", "user": "sunimasuno", "body": "^_^"}, {"timstamp": "2016-05-25 16:33", "user": "temhaa", "body": "icebox: Paladice sunimasuno Thanks for replies. I guess I should do more practice"}, {"timstamp": "2016-05-25 16:33", "user": "icebox", "body": "temhaa: you are welcome"}, {"timstamp": "2016-05-25 16:33", "user": "sunimasuno", "body": "temhaa \"that's what friends are for\""}, {"timstamp": "2016-05-25 16:33", "user": "temhaa", "body": "I started today angular js I hope I can do, learn"}, {"timstamp": "2016-05-25 16:34", "user": "sunimasuno", "body": "It's a lot of fun to work with, stick to it for a bit and I bet you'll enjoy it"}, {"timstamp": "2016-05-25 16:35", "user": "Paladice", "body": "temhaa, learn angularJs v2 =D"}, {"timstamp": "2016-05-25 16:36", "user": "sunimasuno", "body": "I've just started down that road myself, ng2 components look neat, but it's a whole new way to think"}, {"timstamp": "2016-05-25 16:36", "user": "temhaa", "body": "sunimasuno: thanks you can give me any suggestions. Paladice I started with 1.4*"}, {"timstamp": "2016-05-25 16:37", "user": "sunimasuno", "body": "For my own purposes I'm staying a bit more focused on NG1, the support long term still looks good, and a lot of people are running NG1 systems which means jobs for me. But NG2 is real fun looking, and from what I can tell they really improved a LOT from lessons learned."}, {"timstamp": "2016-05-25 16:37", "user": "sunimasuno", "body": "*shrug* two paths diverged in a wood"}], "label": "other"}
